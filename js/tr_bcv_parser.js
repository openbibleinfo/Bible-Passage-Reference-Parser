// Generated by CoffeeScript 1.10.0
(function() {
  var bcv_parser, bcv_passage, bcv_utils, root,
    hasProp = {}.hasOwnProperty;

  root = this;

  bcv_parser = (function() {
    bcv_parser.prototype.s = "";

    bcv_parser.prototype.entities = [];

    bcv_parser.prototype.passage = null;

    bcv_parser.prototype.regexps = {};

    bcv_parser.prototype.options = {
      consecutive_combination_strategy: "combine",
      osis_compaction_strategy: "b",
      book_sequence_strategy: "ignore",
      invalid_sequence_strategy: "ignore",
      sequence_combination_strategy: "combine",
      punctuation_strategy: "us",
      invalid_passage_strategy: "ignore",
      non_latin_digits_strategy: "ignore",
      passage_existence_strategy: "bcv",
      zero_chapter_strategy: "error",
      zero_verse_strategy: "error",
      single_chapter_1_strategy: "chapter",
      book_alone_strategy: "ignore",
      book_range_strategy: "ignore",
      captive_end_digits_strategy: "delete",
      end_range_digits_strategy: "verse",
      include_apocrypha: false,
      ps151_strategy: "c",
      versification_system: "default",
      case_sensitive: "none"
    };

    function bcv_parser() {
      var key, ref, val;
      this.options = {};
      ref = bcv_parser.prototype.options;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        val = ref[key];
        this.options[key] = val;
      }
      this.versification_system(this.options.versification_system);
    }

    bcv_parser.prototype.parse = function(s) {
      var ref;
      this.reset();
      this.s = s;
      s = this.replace_control_characters(s);
      ref = this.match_books(s), s = ref[0], this.passage.books = ref[1];
      this.entities = this.match_passages(s)[0];
      return this;
    };

    bcv_parser.prototype.parse_with_context = function(s, context) {
      var entities, ref, ref1, ref2;
      this.reset();
      ref = this.match_books(this.replace_control_characters(context)), context = ref[0], this.passage.books = ref[1];
      ref1 = this.match_passages(context), entities = ref1[0], context = ref1[1];
      this.reset();
      this.s = s;
      s = this.replace_control_characters(s);
      ref2 = this.match_books(s), s = ref2[0], this.passage.books = ref2[1];
      this.passage.books.push({
        value: "",
        parsed: [],
        start_index: 0,
        type: "context",
        context: context
      });
      s = "\x1f" + (this.passage.books.length - 1) + "/9\x1f" + s;
      this.entities = this.match_passages(s)[0];
      return this;
    };

    bcv_parser.prototype.reset = function() {
      this.s = "";
      this.entities = [];
      if (this.passage) {
        this.passage.books = [];
        return this.passage.indices = {};
      } else {
        this.passage = new bcv_passage;
        this.passage.options = this.options;
        return this.passage.translations = this.translations;
      }
    };

    bcv_parser.prototype.set_options = function(options) {
      var key, val;
      for (key in options) {
        if (!hasProp.call(options, key)) continue;
        val = options[key];
        if (key === "include_apocrypha" || key === "versification_system" || key === "case_sensitive") {
          this[key](val);
        } else {
          this.options[key] = val;
        }
      }
      return this;
    };

    bcv_parser.prototype.include_apocrypha = function(arg) {
      var base, base1, ref, translation, verse_count;
      if (!((arg != null) && (arg === true || arg === false))) {
        return this;
      }
      this.options.include_apocrypha = arg;
      this.regexps.books = this.regexps.get_books(arg, this.options.case_sensitive);
      ref = this.translations;
      for (translation in ref) {
        if (!hasProp.call(ref, translation)) continue;
        if (translation === "aliases" || translation === "alternates") {
          continue;
        }
        if ((base = this.translations[translation]).chapters == null) {
          base.chapters = {};
        }
        if ((base1 = this.translations[translation].chapters)["Ps"] == null) {
          base1["Ps"] = bcv_utils.shallow_clone_array(this.translations["default"].chapters["Ps"]);
        }
        if (arg === true) {
          if (this.translations[translation].chapters["Ps151"] != null) {
            verse_count = this.translations[translation].chapters["Ps151"][0];
          } else {
            verse_count = this.translations["default"].chapters["Ps151"][0];
          }
          this.translations[translation].chapters["Ps"][150] = verse_count;
        } else {
          if (this.translations[translation].chapters["Ps"].length === 151) {
            this.translations[translation].chapters["Ps"].pop();
          }
        }
      }
      return this;
    };

    bcv_parser.prototype.versification_system = function(system) {
      var base, base1, base2, book, chapter_list, ref, ref1;
      if (!((system != null) && (this.translations[system] != null))) {
        return this;
      }
      if (this.translations.alternates["default"] != null) {
        if (system === "default") {
          if (this.translations.alternates["default"].order != null) {
            this.translations["default"].order = bcv_utils.shallow_clone(this.translations.alternates["default"].order);
          }
          ref = this.translations.alternates["default"].chapters;
          for (book in ref) {
            if (!hasProp.call(ref, book)) continue;
            chapter_list = ref[book];
            this.translations["default"].chapters[book] = bcv_utils.shallow_clone_array(chapter_list);
          }
        } else {
          this.versification_system("default");
        }
      }
      if ((base = this.translations.alternates)["default"] == null) {
        base["default"] = {
          order: null,
          chapters: {}
        };
      }
      if (system !== "default" && (this.translations[system].order != null)) {
        if ((base1 = this.translations.alternates["default"]).order == null) {
          base1.order = bcv_utils.shallow_clone(this.translations["default"].order);
        }
        this.translations["default"].order = bcv_utils.shallow_clone(this.translations[system].order);
      }
      if (system !== "default" && (this.translations[system].chapters != null)) {
        ref1 = this.translations[system].chapters;
        for (book in ref1) {
          if (!hasProp.call(ref1, book)) continue;
          chapter_list = ref1[book];
          if ((base2 = this.translations.alternates["default"].chapters)[book] == null) {
            base2[book] = bcv_utils.shallow_clone_array(this.translations["default"].chapters[book]);
          }
          this.translations["default"].chapters[book] = bcv_utils.shallow_clone_array(chapter_list);
        }
      }
      this.options.versification_system = system;
      this.include_apocrypha(this.options.include_apocrypha);
      return this;
    };

    bcv_parser.prototype.case_sensitive = function(arg) {
      if (!((arg != null) && (arg === "none" || arg === "books"))) {
        return this;
      }
      if (arg === this.options.case_sensitive) {
        return this;
      }
      this.options.case_sensitive = arg;
      this.regexps.books = this.regexps.get_books(this.options.include_apocrypha, arg);
      return this;
    };

    bcv_parser.prototype.translation_info = function(new_translation) {
      var book, chapter_list, id, old_translation, out, ref, ref1, ref2;
      if (new_translation == null) {
        new_translation = "default";
      }
      if ((new_translation != null) && (((ref = this.translations.aliases[new_translation]) != null ? ref.alias : void 0) != null)) {
        new_translation = this.translations.aliases[new_translation].alias;
      }
      if (!((new_translation != null) && (this.translations[new_translation] != null))) {
        new_translation = "default";
      }
      old_translation = this.options.versification_system;
      if (new_translation !== old_translation) {
        this.versification_system(new_translation);
      }
      out = {
        alias: new_translation,
        books: [],
        chapters: {},
        order: bcv_utils.shallow_clone(this.translations["default"].order)
      };
      ref1 = this.translations["default"].chapters;
      for (book in ref1) {
        if (!hasProp.call(ref1, book)) continue;
        chapter_list = ref1[book];
        out.chapters[book] = bcv_utils.shallow_clone_array(chapter_list);
      }
      ref2 = out.order;
      for (book in ref2) {
        if (!hasProp.call(ref2, book)) continue;
        id = ref2[book];
        out.books[id - 1] = book;
      }
      if (new_translation !== old_translation) {
        this.versification_system(old_translation);
      }
      return out;
    };

    bcv_parser.prototype.replace_control_characters = function(s) {
      s = s.replace(this.regexps.control, " ");
      if (this.options.non_latin_digits_strategy === "replace") {
        s = s.replace(/[٠۰߀०০੦૦୦0౦೦൦๐໐༠၀႐០᠐᥆᧐᪀᪐᭐᮰᱀᱐꘠꣐꤀꧐꩐꯰０]/g, "0");
        s = s.replace(/[١۱߁१১੧૧୧௧౧೧൧๑໑༡၁႑១᠑᥇᧑᪁᪑᭑᮱᱁᱑꘡꣑꤁꧑꩑꯱１]/g, "1");
        s = s.replace(/[٢۲߂२২੨૨୨௨౨೨൨๒໒༢၂႒២᠒᥈᧒᪂᪒᭒᮲᱂᱒꘢꣒꤂꧒꩒꯲２]/g, "2");
        s = s.replace(/[٣۳߃३৩੩૩୩௩౩೩൩๓໓༣၃႓៣᠓᥉᧓᪃᪓᭓᮳᱃᱓꘣꣓꤃꧓꩓꯳３]/g, "3");
        s = s.replace(/[٤۴߄४৪੪૪୪௪౪೪൪๔໔༤၄႔៤᠔᥊᧔᪄᪔᭔᮴᱄᱔꘤꣔꤄꧔꩔꯴４]/g, "4");
        s = s.replace(/[٥۵߅५৫੫૫୫௫౫೫൫๕໕༥၅႕៥᠕᥋᧕᪅᪕᭕᮵᱅᱕꘥꣕꤅꧕꩕꯵５]/g, "5");
        s = s.replace(/[٦۶߆६৬੬૬୬௬౬೬൬๖໖༦၆႖៦᠖᥌᧖᪆᪖᭖᮶᱆᱖꘦꣖꤆꧖꩖꯶６]/g, "6");
        s = s.replace(/[٧۷߇७৭੭૭୭௭౭೭൭๗໗༧၇႗៧᠗᥍᧗᪇᪗᭗᮷᱇᱗꘧꣗꤇꧗꩗꯷７]/g, "7");
        s = s.replace(/[٨۸߈८৮੮૮୮௮౮೮൮๘໘༨၈႘៨᠘᥎᧘᪈᪘᭘᮸᱈᱘꘨꣘꤈꧘꩘꯸８]/g, "8");
        s = s.replace(/[٩۹߉९৯੯૯୯௯౯೯൯๙໙༩၉႙៩᠙᥏᧙᪉᪙᭙᮹᱉᱙꘩꣙꤉꧙꩙꯹９]/g, "9");
      }
      return s;
    };

    bcv_parser.prototype.match_books = function(s) {
      var book, books, has_replacement, k, len, ref;
      books = [];
      ref = this.regexps.books;
      for (k = 0, len = ref.length; k < len; k++) {
        book = ref[k];
        has_replacement = false;
        s = s.replace(book.regexp, function(full, prev, bk) {
          var extra;
          has_replacement = true;
          books.push({
            value: bk,
            parsed: book.osis,
            type: "book"
          });
          extra = book.extra != null ? "/" + book.extra : "";
          return prev + "\x1f" + (books.length - 1) + extra + "\x1f";
        });
        if (has_replacement === true && /^[\s\x1f\d:.,;\-\u2013\u2014]+$/.test(s)) {
          break;
        }
      }
      s = s.replace(this.regexps.translations, function(match) {
        books.push({
          value: match,
          parsed: match.toLowerCase(),
          type: "translation"
        });
        return "\x1e" + (books.length - 1) + "\x1e";
      });
      return [s, this.get_book_indices(books, s)];
    };

    bcv_parser.prototype.get_book_indices = function(books, s) {
      var add_index, match, re;
      add_index = 0;
      re = /([\x1f\x1e])(\d+)(?:\/\d+)?\1/g;
      while (match = re.exec(s)) {
        books[match[2]].start_index = match.index + add_index;
        add_index += books[match[2]].value.length - match[0].length;
      }
      return books;
    };

    bcv_parser.prototype.match_passages = function(s) {
      var accum, book_id, entities, full, match, next_char, original_part_length, part, passage, post_context, ref, regexp_index_adjust, start_index_adjust;
      entities = [];
      post_context = {};
      while (match = this.regexps.escaped_passage.exec(s)) {
        full = match[0], part = match[1], book_id = match[2];
        original_part_length = part.length;
        match.index += full.length - original_part_length;
        if (/\s[2-9]\d\d\s*$|\s\d{4,}\s*$/.test(part)) {
          part = part.replace(/\s+\d+\s*$/, "");
        }
        if (!/[\d\x1f\x1e)]$/.test(part)) {
          part = this.replace_match_end(part);
        }
        if (this.options.captive_end_digits_strategy === "delete") {
          next_char = match.index + part.length;
          if (s.length > next_char && /^\w/.test(s.substr(next_char, 1))) {
            part = part.replace(/[\s*]+\d+$/, "");
          }
          part = part.replace(/(\x1e[)\]]?)[\s*]*\d+$/, "$1");
        }
        part = part.replace(/[A-Z]+/g, function(capitals) {
          return capitals.toLowerCase();
        });
        start_index_adjust = part.substr(0, 1) === "\x1f" ? 0 : part.split("\x1f")[0].length;
        passage = {
          value: grammar.parse(part, {
            punctuation_strategy: this.options.punctuation_strategy
          }),
          type: "base",
          start_index: this.passage.books[book_id].start_index - start_index_adjust,
          match: part
        };
        if (this.options.book_alone_strategy === "full" && this.options.book_range_strategy === "include" && passage.value[0].type === "b" && (passage.value.length === 1 || (passage.value.length > 1 && passage.value[1].type === "translation_sequence")) && start_index_adjust === 0 && (this.passage.books[book_id].parsed.length === 1 || (this.passage.books[book_id].parsed.length > 1 && this.passage.books[book_id].parsed[1].type === "translation")) && /^[234]/.test(this.passage.books[book_id].parsed[0])) {
          this.create_book_range(s, passage, book_id);
        }
        ref = this.passage.handle_obj(passage), accum = ref[0], post_context = ref[1];
        entities = entities.concat(accum);
        regexp_index_adjust = this.adjust_regexp_end(accum, original_part_length, part.length);
        if (regexp_index_adjust > 0) {
          this.regexps.escaped_passage.lastIndex -= regexp_index_adjust;
        }
      }
      return [entities, post_context];
    };

    bcv_parser.prototype.adjust_regexp_end = function(accum, old_length, new_length) {
      var regexp_index_adjust;
      regexp_index_adjust = 0;
      if (accum.length > 0) {
        regexp_index_adjust = old_length - accum[accum.length - 1].indices[1] - 1;
      } else if (old_length !== new_length) {
        regexp_index_adjust = old_length - new_length;
      }
      return regexp_index_adjust;
    };

    bcv_parser.prototype.replace_match_end = function(part) {
      var match, remove;
      remove = part.length;
      while (match = this.regexps.match_end_split.exec(part)) {
        remove = match.index + match[0].length;
      }
      if (remove < part.length) {
        part = part.substr(0, remove);
      }
      return part;
    };

    bcv_parser.prototype.create_book_range = function(s, passage, book_id) {
      var cases, i, k, limit, prev, range_regexp, ref;
      cases = [bcv_parser.prototype.regexps.first, bcv_parser.prototype.regexps.second, bcv_parser.prototype.regexps.third];
      limit = parseInt(this.passage.books[book_id].parsed[0].substr(0, 1), 10);
      for (i = k = 1, ref = limit; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {
        range_regexp = i === limit - 1 ? bcv_parser.prototype.regexps.range_and : bcv_parser.prototype.regexps.range_only;
        prev = s.match(RegExp("(?:^|\\W)(" + cases[i - 1] + "\\s*" + range_regexp + "\\s*)\\x1f" + book_id + "\\x1f", "i"));
        if (prev != null) {
          return this.add_book_range_object(passage, prev, i);
        }
      }
      return false;
    };

    bcv_parser.prototype.add_book_range_object = function(passage, prev, start_book_number) {
      var i, k, length, ref, ref1, results;
      length = prev[1].length;
      passage.value[0] = {
        type: "b_range_pre",
        value: [
          {
            type: "b_pre",
            value: start_book_number.toString(),
            indices: [prev.index, prev.index + length]
          }, passage.value[0]
        ],
        indices: [0, passage.value[0].indices[1] + length]
      };
      passage.value[0].value[1].indices[0] += length;
      passage.value[0].value[1].indices[1] += length;
      passage.start_index -= length;
      passage.match = prev[1] + passage.match;
      if (passage.value.length === 1) {
        return;
      }
      results = [];
      for (i = k = 1, ref = passage.value.length; 1 <= ref ? k < ref : k > ref; i = 1 <= ref ? ++k : --k) {
        if (passage.value[i].value == null) {
          continue;
        }
        if (((ref1 = passage.value[i].value[0]) != null ? ref1.indices : void 0) != null) {
          passage.value[i].value[0].indices[0] += length;
          passage.value[i].value[0].indices[1] += length;
        }
        passage.value[i].indices[0] += length;
        results.push(passage.value[i].indices[1] += length);
      }
      return results;
    };

    bcv_parser.prototype.osis = function() {
      var k, len, osis, out, ref;
      out = [];
      ref = this.parsed_entities();
      for (k = 0, len = ref.length; k < len; k++) {
        osis = ref[k];
        if (osis.osis.length > 0) {
          out.push(osis.osis);
        }
      }
      return out.join(",");
    };

    bcv_parser.prototype.osis_and_translations = function() {
      var k, len, osis, out, ref;
      out = [];
      ref = this.parsed_entities();
      for (k = 0, len = ref.length; k < len; k++) {
        osis = ref[k];
        if (osis.osis.length > 0) {
          out.push([osis.osis, osis.translations.join(",")]);
        }
      }
      return out;
    };

    bcv_parser.prototype.osis_and_indices = function() {
      var k, len, osis, out, ref;
      out = [];
      ref = this.parsed_entities();
      for (k = 0, len = ref.length; k < len; k++) {
        osis = ref[k];
        if (osis.osis.length > 0) {
          out.push({
            osis: osis.osis,
            translations: osis.translations,
            indices: osis.indices
          });
        }
      }
      return out;
    };

    bcv_parser.prototype.parsed_entities = function() {
      var entity, entity_id, i, k, l, last_i, len, len1, length, m, n, osis, osises, out, passage, ref, ref1, ref2, ref3, strings, translation, translation_alias, translation_osis, translations;
      out = [];
      for (entity_id = k = 0, ref = this.entities.length; 0 <= ref ? k < ref : k > ref; entity_id = 0 <= ref ? ++k : --k) {
        entity = this.entities[entity_id];
        if (entity.type && entity.type === "translation_sequence" && out.length > 0 && entity_id === out[out.length - 1].entity_id + 1) {
          out[out.length - 1].indices[1] = entity.absolute_indices[1];
        }
        if (entity.passages == null) {
          continue;
        }
        if ((entity.type === "b" && this.options.book_alone_strategy === "ignore") || (entity.type === "b_range" && this.options.book_range_strategy === "ignore") || entity.type === "context") {
          continue;
        }
        translations = [];
        translation_alias = null;
        if (entity.passages[0].translations != null) {
          ref1 = entity.passages[0].translations;
          for (l = 0, len = ref1.length; l < len; l++) {
            translation = ref1[l];
            translation_osis = ((ref2 = translation.osis) != null ? ref2.length : void 0) > 0 ? translation.osis : "";
            if (translation_alias == null) {
              translation_alias = translation.alias;
            }
            translations.push(translation_osis);
          }
        } else {
          translations = [""];
          translation_alias = "default";
        }
        osises = [];
        length = entity.passages.length;
        for (i = m = 0, ref3 = length; 0 <= ref3 ? m < ref3 : m > ref3; i = 0 <= ref3 ? ++m : --m) {
          passage = entity.passages[i];
          if (passage.type == null) {
            passage.type = entity.type;
          }
          if (passage.valid.valid === false) {
            if (this.options.invalid_sequence_strategy === "ignore" && entity.type === "sequence") {
              this.snap_sequence("ignore", entity, osises, i, length);
            }
            if (this.options.invalid_passage_strategy === "ignore") {
              continue;
            }
          }
          if ((passage.type === "b" || passage.type === "b_range") && this.options.book_sequence_strategy === "ignore" && entity.type === "sequence") {
            this.snap_sequence("book", entity, osises, i, length);
            continue;
          }
          if ((passage.type === "b_range_start" || passage.type === "range_end_b") && this.options.book_range_strategy === "ignore") {
            this.snap_range(entity, i);
          }
          if (passage.absolute_indices == null) {
            passage.absolute_indices = entity.absolute_indices;
          }
          osises.push({
            osis: passage.valid.valid ? this.to_osis(passage.start, passage.end, translation_alias) : "",
            type: passage.type,
            indices: passage.absolute_indices,
            translations: translations,
            start: passage.start,
            end: passage.end,
            enclosed_indices: passage.enclosed_absolute_indices,
            entity_id: entity_id,
            entities: [passage]
          });
        }
        if (osises.length === 0) {
          continue;
        }
        if (osises.length > 1 && this.options.consecutive_combination_strategy === "combine") {
          osises = this.combine_consecutive_passages(osises, translation_alias);
        }
        if (this.options.sequence_combination_strategy === "separate") {
          out = out.concat(osises);
        } else {
          strings = [];
          last_i = osises.length - 1;
          if ((osises[last_i].enclosed_indices != null) && osises[last_i].enclosed_indices[1] >= 0) {
            entity.absolute_indices[1] = osises[last_i].enclosed_indices[1];
          }
          for (n = 0, len1 = osises.length; n < len1; n++) {
            osis = osises[n];
            if (osis.osis.length > 0) {
              strings.push(osis.osis);
            }
          }
          out.push({
            osis: strings.join(","),
            indices: entity.absolute_indices,
            translations: translations,
            entity_id: entity_id,
            entities: osises
          });
        }
      }
      return out;
    };

    bcv_parser.prototype.to_osis = function(start, end, translation) {
      var osis, out;
      if ((end.c == null) && (end.v == null) && start.b === end.b && (start.c == null) && (start.v == null) && this.options.book_alone_strategy === "first_chapter") {
        end.c = 1;
      }
      osis = {
        start: "",
        end: ""
      };
      if (start.c == null) {
        start.c = 1;
      }
      if (start.v == null) {
        start.v = 1;
      }
      if (end.c == null) {
        if (this.options.passage_existence_strategy.indexOf("c") >= 0 || ((this.passage.translations[translation].chapters[end.b] != null) && this.passage.translations[translation].chapters[end.b].length === 1)) {
          end.c = this.passage.translations[translation].chapters[end.b].length;
        } else {
          end.c = 999;
        }
      }
      if (end.v == null) {
        if ((this.passage.translations[translation].chapters[end.b][end.c - 1] != null) && this.options.passage_existence_strategy.indexOf("v") >= 0) {
          end.v = this.passage.translations[translation].chapters[end.b][end.c - 1];
        } else {
          end.v = 999;
        }
      }
      if (this.options.include_apocrypha && this.options.ps151_strategy === "b" && ((start.c === 151 && start.b === "Ps") || (end.c === 151 && end.b === "Ps"))) {
        this.fix_ps151(start, end, translation);
      }
      if (this.options.osis_compaction_strategy === "b" && start.c === 1 && start.v === 1 && ((end.c === 999 && end.v === 999) || (end.c === this.passage.translations[translation].chapters[end.b].length && this.options.passage_existence_strategy.indexOf("c") >= 0 && (end.v === 999 || (end.v === this.passage.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf("v") >= 0))))) {
        osis.start = start.b;
        osis.end = end.b;
      } else if (this.options.osis_compaction_strategy.length <= 2 && start.v === 1 && (end.v === 999 || (end.v === this.passage.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf("v") >= 0))) {
        osis.start = start.b + "." + start.c.toString();
        osis.end = end.b + "." + end.c.toString();
      } else {
        osis.start = start.b + "." + start.c.toString() + "." + start.v.toString();
        osis.end = end.b + "." + end.c.toString() + "." + end.v.toString();
      }
      if (osis.start === osis.end) {
        out = osis.start;
      } else {
        out = osis.start + "-" + osis.end;
      }
      if (start.extra != null) {
        out = start.extra + "," + out;
      }
      if (end.extra != null) {
        out += "," + end.extra;
      }
      return out;
    };

    bcv_parser.prototype.fix_ps151 = function(start, end, translation) {
      var ref;
      if (translation !== "default" && (((ref = this.translations[translation]) != null ? ref.chapters["Ps151"] : void 0) == null)) {
        this.passage.promote_book_to_translation("Ps151", translation);
      }
      if (start.c === 151 && start.b === "Ps") {
        if (end.c === 151 && end.b === "Ps") {
          start.b = "Ps151";
          start.c = 1;
          end.b = "Ps151";
          return end.c = 1;
        } else {
          start.extra = this.to_osis({
            b: "Ps151",
            c: 1,
            v: start.v
          }, {
            b: "Ps151",
            c: 1,
            v: this.passage.translations[translation].chapters["Ps151"][0]
          }, translation);
          start.b = "Prov";
          start.c = 1;
          return start.v = 1;
        }
      } else {
        end.extra = this.to_osis({
          b: "Ps151",
          c: 1,
          v: 1
        }, {
          b: "Ps151",
          c: 1,
          v: end.v
        }, translation);
        end.c = 150;
        return end.v = this.passage.translations[translation].chapters["Ps"][149];
      }
    };

    bcv_parser.prototype.combine_consecutive_passages = function(osises, translation) {
      var enclosed_sequence_start, has_enclosed, i, is_enclosed_last, k, last_i, osis, out, prev, prev_i, ref;
      out = [];
      prev = {};
      last_i = osises.length - 1;
      enclosed_sequence_start = -1;
      has_enclosed = false;
      for (i = k = 0, ref = last_i; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        osis = osises[i];
        if (osis.osis.length > 0) {
          prev_i = out.length - 1;
          is_enclosed_last = false;
          if (osis.enclosed_indices[0] !== enclosed_sequence_start) {
            enclosed_sequence_start = osis.enclosed_indices[0];
          }
          if (enclosed_sequence_start >= 0 && (i === last_i || osises[i + 1].enclosed_indices[0] !== osis.enclosed_indices[0])) {
            is_enclosed_last = true;
            has_enclosed = true;
          }
          if (this.is_verse_consecutive(prev, osis.start, translation)) {
            out[prev_i].end = osis.end;
            out[prev_i].is_enclosed_last = is_enclosed_last;
            out[prev_i].indices[1] = osis.indices[1];
            out[prev_i].enclosed_indices[1] = osis.enclosed_indices[1];
            out[prev_i].osis = this.to_osis(out[prev_i].start, osis.end, translation);
          } else {
            out.push(osis);
          }
          prev = {
            b: osis.end.b,
            c: osis.end.c,
            v: osis.end.v
          };
        } else {
          out.push(osis);
          prev = {};
        }
      }
      if (has_enclosed) {
        this.snap_enclosed_indices(out);
      }
      return out;
    };

    bcv_parser.prototype.snap_enclosed_indices = function(osises) {
      var k, len, osis;
      for (k = 0, len = osises.length; k < len; k++) {
        osis = osises[k];
        if (osis.is_enclosed_last != null) {
          if (osis.enclosed_indices[0] < 0 && osis.is_enclosed_last) {
            osis.indices[1] = osis.enclosed_indices[1];
          }
          delete osis.is_enclosed_last;
        }
      }
      return osises;
    };

    bcv_parser.prototype.is_verse_consecutive = function(prev, check, translation) {
      var translation_order;
      if (prev.b == null) {
        return false;
      }
      translation_order = this.passage.translations[translation].order != null ? this.passage.translations[translation].order : this.passage.translations["default"].order;
      if (prev.b === check.b) {
        if (prev.c === check.c) {
          if (prev.v === check.v - 1) {
            return true;
          }
        } else if (check.v === 1 && prev.c === check.c - 1) {
          if (prev.v === this.passage.translations[translation].chapters[prev.b][prev.c - 1]) {
            return true;
          }
        }
      } else if (check.c === 1 && check.v === 1 && translation_order[prev.b] === translation_order[check.b] - 1) {
        if (prev.c === this.passage.translations[translation].chapters[prev.b].length && prev.v === this.passage.translations[translation].chapters[prev.b][prev.c - 1]) {
          return true;
        }
      }
      return false;
    };

    bcv_parser.prototype.snap_range = function(entity, passage_i) {
      var entity_i, key, pluck, ref, source_entity, target_entity, temp, type;
      if (entity.type === "b_range_start" || (entity.type === "sequence" && entity.passages[passage_i].type === "b_range_start")) {
        entity_i = 1;
        source_entity = "end";
        type = "b_range_start";
      } else {
        entity_i = 0;
        source_entity = "start";
        type = "range_end_b";
      }
      target_entity = source_entity === "end" ? "start" : "end";
      ref = entity.passages[passage_i][target_entity];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        entity.passages[passage_i][target_entity][key] = entity.passages[passage_i][source_entity][key];
      }
      if (entity.type === "sequence") {
        if (passage_i >= entity.value.length) {
          passage_i = entity.value.length - 1;
        }
        pluck = this.passage.pluck(type, entity.value[passage_i]);
        if (pluck != null) {
          temp = this.snap_range(pluck, 0);
          if (passage_i === 0) {
            entity.absolute_indices[0] = temp.absolute_indices[0];
          } else {
            entity.absolute_indices[1] = temp.absolute_indices[1];
          }
        }
      } else {
        entity.original_type = entity.type;
        entity.type = entity.value[entity_i].type;
        entity.absolute_indices = [entity.value[entity_i].absolute_indices[0], entity.value[entity_i].absolute_indices[1]];
      }
      return entity;
    };

    bcv_parser.prototype.snap_sequence = function(type, entity, osises, i, length) {
      var passage;
      passage = entity.passages[i];
      if (passage.absolute_indices[0] === entity.absolute_indices[0] && i < length - 1 && this.get_snap_sequence_i(entity.passages, i, length) !== i) {
        entity.absolute_indices[0] = entity.passages[i + 1].absolute_indices[0];
        this.remove_absolute_indices(entity.passages, i + 1);
      } else if (passage.absolute_indices[1] === entity.absolute_indices[1] && i > 0) {
        entity.absolute_indices[1] = osises.length > 0 ? osises[osises.length - 1].indices[1] : entity.passages[i - 1].absolute_indices[1];
      } else if (type === "book" && i < length - 1 && !this.starts_with_book(entity.passages[i + 1])) {
        entity.passages[i + 1].absolute_indices[0] = passage.absolute_indices[0];
      }
      return entity;
    };

    bcv_parser.prototype.get_snap_sequence_i = function(passages, i, length) {
      var j, k, ref, ref1;
      for (j = k = ref = i + 1, ref1 = length; ref <= ref1 ? k < ref1 : k > ref1; j = ref <= ref1 ? ++k : --k) {
        if (this.starts_with_book(passages[j])) {
          return j;
        }
        if (passages[j].valid.valid) {
          return i;
        }
      }
      return i;
    };

    bcv_parser.prototype.starts_with_book = function(passage) {
      if (passage.type.substr(0, 1) === "b") {
        return true;
      }
      if ((passage.type === "range" || passage.type === "ff") && passage.start.type.substr(0, 1) === "b") {
        return true;
      }
      return false;
    };

    bcv_parser.prototype.remove_absolute_indices = function(passages, i) {
      var end, k, len, passage, ref, ref1, start;
      if (passages[i].enclosed_absolute_indices[0] < 0) {
        return false;
      }
      ref = passages[i].enclosed_absolute_indices, start = ref[0], end = ref[1];
      ref1 = passages.slice(i);
      for (k = 0, len = ref1.length; k < len; k++) {
        passage = ref1[k];
        if (passage.enclosed_absolute_indices[0] === start && passage.enclosed_absolute_indices[1] === end) {
          passage.enclosed_absolute_indices = [-1, -1];
        } else {
          break;
        }
      }
      return true;
    };

    return bcv_parser;

  })();

  root.bcv_parser = bcv_parser;

  bcv_passage = (function() {
    function bcv_passage() {}

    bcv_passage.prototype.books = [];

    bcv_passage.prototype.indices = {};

    bcv_passage.prototype.options = {};

    bcv_passage.prototype.translations = {};

    bcv_passage.prototype.handle_array = function(passages, accum, context) {
      var k, len, passage, ref;
      if (accum == null) {
        accum = [];
      }
      if (context == null) {
        context = {};
      }
      for (k = 0, len = passages.length; k < len; k++) {
        passage = passages[k];
        if (passage == null) {
          continue;
        }
        if (passage.type === "stop") {
          break;
        }
        ref = this.handle_obj(passage, accum, context), accum = ref[0], context = ref[1];
      }
      return [accum, context];
    };

    bcv_passage.prototype.handle_obj = function(passage, accum, context) {
      if ((passage.type != null) && (this[passage.type] != null)) {
        return this[passage.type](passage, accum, context);
      } else {
        return [accum, context];
      }
    };

    bcv_passage.prototype.b = function(passage, accum, context) {
      var alternates, b, k, len, obj, ref, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      alternates = [];
      ref = this.books[passage.value].parsed;
      for (k = 0, len = ref.length; k < len; k++) {
        b = ref[k];
        valid = this.validate_ref(passage.start_context.translations, {
          b: b
        });
        obj = {
          start: {
            b: b
          },
          end: {
            b: b
          },
          valid: valid
        };
        if (passage.passages.length === 0 && valid.valid) {
          passage.passages.push(obj);
        } else {
          alternates.push(obj);
        }
      }
      if (passage.passages.length === 0) {
        passage.passages.push(alternates.shift());
      }
      if (alternates.length > 0) {
        passage.passages[0].alternates = alternates;
      }
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      context = {
        b: passage.passages[0].start.b
      };
      if (passage.start_context.translations != null) {
        context.translations = passage.start_context.translations;
      }
      return [accum, context];
    };

    bcv_passage.prototype.b_range = function(passage, accum, context) {
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.b_range_pre = function(passage, accum, context) {
      var alternates, book, end, ref, ref1, start_obj;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      alternates = [];
      book = this.pluck("b", passage.value);
      ref = this.b(book, [], context), (ref1 = ref[0], end = ref1[0]), context = ref[1];
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      start_obj = {
        b: passage.value[0].value + end.passages[0].start.b.substr(1),
        type: "b"
      };
      passage.passages = [
        {
          start: start_obj,
          end: end.passages[0].end,
          valid: end.passages[0].valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.b_range_start = function(passage, accum, context) {
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.base = function(passage, accum, context) {
      this.indices = this.calculate_indices(passage.match, passage.start_index);
      return this.handle_array(passage.value, accum, context);
    };

    bcv_passage.prototype.bc = function(passage, accum, context) {
      var alternates, b, c, context_key, k, len, obj, ref, ref1, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      this.reset_context(context, ["b", "c", "v"]);
      c = this.pluck("c", passage.value).value;
      alternates = [];
      ref = this.books[this.pluck("b", passage.value).value].parsed;
      for (k = 0, len = ref.length; k < len; k++) {
        b = ref[k];
        context_key = "c";
        valid = this.validate_ref(passage.start_context.translations, {
          b: b,
          c: c
        });
        obj = {
          start: {
            b: b
          },
          end: {
            b: b
          },
          valid: valid
        };
        if (valid.messages.start_chapter_not_exist_in_single_chapter_book || valid.messages.start_chapter_1) {
          obj.valid = this.validate_ref(passage.start_context.translations, {
            b: b,
            v: c
          });
          if (valid.messages.start_chapter_not_exist_in_single_chapter_book) {
            obj.valid.messages.start_chapter_not_exist_in_single_chapter_book = 1;
          }
          obj.start.c = 1;
          obj.end.c = 1;
          context_key = "v";
        }
        obj.start[context_key] = c;
        ref1 = this.fix_start_zeroes(obj.valid, obj.start.c, obj.start.v), obj.start.c = ref1[0], obj.start.v = ref1[1];
        if (obj.start.v == null) {
          delete obj.start.v;
        }
        obj.end[context_key] = obj.start[context_key];
        if (passage.passages.length === 0 && obj.valid.valid) {
          passage.passages.push(obj);
        } else {
          alternates.push(obj);
        }
      }
      if (passage.passages.length === 0) {
        passage.passages.push(alternates.shift());
      }
      if (alternates.length > 0) {
        passage.passages[0].alternates = alternates;
      }
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      this.set_context_from_object(context, ["b", "c", "v"], passage.passages[0].start);
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.bc_title = function(passage, accum, context) {
      var bc, i, k, ref, ref1, ref2, title;
      passage.start_context = bcv_utils.shallow_clone(context);
      ref = this.bc(this.pluck("bc", passage.value), [], context), (ref1 = ref[0], bc = ref1[0]), context = ref[1];
      if (bc.passages[0].start.b.substr(0, 2) !== "Ps" && (bc.passages[0].alternates != null)) {
        for (i = k = 0, ref2 = bc.passages[0].alternates.length; 0 <= ref2 ? k < ref2 : k > ref2; i = 0 <= ref2 ? ++k : --k) {
          if (bc.passages[0].alternates[i].start.b.substr(0, 2) !== "Ps") {
            continue;
          }
          bc.passages[0] = bc.passages[0].alternates[i];
          break;
        }
      }
      if (bc.passages[0].start.b.substr(0, 2) !== "Ps") {
        accum.push(bc);
        return [accum, context];
      }
      this.books[this.pluck("b", bc.value).value].parsed = ["Ps"];
      title = this.pluck("title", passage.value);
      if (title == null) {
        title = this.pluck("v", passage.value);
      }
      passage.value[1] = {
        type: "v",
        value: [
          {
            type: "integer",
            value: 1,
            indices: title.indices
          }
        ],
        indices: title.indices
      };
      passage.type = "bcv";
      return this.bcv(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.bcv = function(passage, accum, context) {
      var alternates, b, bc, c, k, len, obj, ref, ref1, v, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      this.reset_context(context, ["b", "c", "v"]);
      bc = this.pluck("bc", passage.value);
      c = this.pluck("c", bc.value).value;
      v = this.pluck("v", passage.value).value;
      alternates = [];
      ref = this.books[this.pluck("b", bc.value).value].parsed;
      for (k = 0, len = ref.length; k < len; k++) {
        b = ref[k];
        valid = this.validate_ref(passage.start_context.translations, {
          b: b,
          c: c,
          v: v
        });
        ref1 = this.fix_start_zeroes(valid, c, v), c = ref1[0], v = ref1[1];
        obj = {
          start: {
            b: b,
            c: c,
            v: v
          },
          end: {
            b: b,
            c: c,
            v: v
          },
          valid: valid
        };
        if (passage.passages.length === 0 && valid.valid) {
          passage.passages.push(obj);
        } else {
          alternates.push(obj);
        }
      }
      if (passage.passages.length === 0) {
        passage.passages.push(alternates.shift());
      }
      if (alternates.length > 0) {
        passage.passages[0].alternates = alternates;
      }
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      this.set_context_from_object(context, ["b", "c", "v"], passage.passages[0].start);
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.bv = function(passage, accum, context) {
      var b, bcv, ref, ref1, ref2, v;
      passage.start_context = bcv_utils.shallow_clone(context);
      ref = passage.value, b = ref[0], v = ref[1];
      bcv = {
        indices: passage.indices,
        value: [
          {
            type: "bc",
            value: [
              b, {
                type: "c",
                value: [
                  {
                    type: "integer",
                    value: 1
                  }
                ]
              }
            ]
          }, v
        ]
      };
      ref1 = this.bcv(bcv, [], context), (ref2 = ref1[0], bcv = ref2[0]), context = ref1[1];
      passage.passages = bcv.passages;
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.c = function(passage, accum, context) {
      var c, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      c = passage.type === "integer" ? passage.value : this.pluck("integer", passage.value).value;
      valid = this.validate_ref(passage.start_context.translations, {
        b: context.b,
        c: c
      });
      if (!valid.valid && valid.messages.start_chapter_not_exist_in_single_chapter_book) {
        return this.v(passage, accum, context);
      }
      c = this.fix_start_zeroes(valid, c)[0];
      passage.passages = [
        {
          start: {
            b: context.b,
            c: c
          },
          end: {
            b: context.b,
            c: c
          },
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      accum.push(passage);
      context.c = c;
      this.reset_context(context, ["v"]);
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      return [accum, context];
    };

    bcv_passage.prototype.c_psalm = function(passage, accum, context) {
      var c;
      passage.type = "bc";
      c = parseInt(this.books[passage.value].value.match(/^\d+/)[0], 10);
      passage.value = [
        {
          type: "b",
          value: passage.value,
          indices: passage.indices
        }, {
          type: "c",
          value: [
            {
              type: "integer",
              value: c,
              indices: passage.indices
            }
          ],
          indices: passage.indices
        }
      ];
      return this.bc(passage, accum, context);
    };

    bcv_passage.prototype.c_title = function(passage, accum, context) {
      var title;
      passage.start_context = bcv_utils.shallow_clone(context);
      if (context.b !== "Ps") {
        return this.c(passage.value[0], accum, context);
      }
      title = this.pluck("title", passage.value);
      passage.value[1] = {
        type: "v",
        value: [
          {
            type: "integer",
            value: 1,
            indices: title.indices
          }
        ],
        indices: title.indices
      };
      passage.type = "cv";
      return this.cv(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.cv = function(passage, accum, context) {
      var c, ref, v, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      c = this.pluck("c", passage.value).value;
      v = this.pluck("v", passage.value).value;
      valid = this.validate_ref(passage.start_context.translations, {
        b: context.b,
        c: c,
        v: v
      });
      ref = this.fix_start_zeroes(valid, c, v), c = ref[0], v = ref[1];
      passage.passages = [
        {
          start: {
            b: context.b,
            c: c,
            v: v
          },
          end: {
            b: context.b,
            c: c,
            v: v
          },
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      accum.push(passage);
      context.c = c;
      context.v = v;
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      return [accum, context];
    };

    bcv_passage.prototype.cb_range = function(passage, accum, context) {
      var b, end_c, ref, start_c;
      passage.type = "range";
      ref = passage.value, b = ref[0], start_c = ref[1], end_c = ref[2];
      passage.value = [
        {
          type: "bc",
          value: [b, start_c],
          indices: passage.indices
        }, end_c
      ];
      end_c.indices[1] = passage.indices[1];
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.context = function(passage, accum, context) {
      var key, ref;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      ref = this.books[passage.value].context;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        context[key] = this.books[passage.value].context[key];
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.cv_psalm = function(passage, accum, context) {
      var bc, c_psalm, ref, v;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.type = "bcv";
      ref = passage.value, c_psalm = ref[0], v = ref[1];
      bc = this.c_psalm(c_psalm, [], passage.start_context)[0][0];
      passage.value = [bc, v];
      return this.bcv(passage, accum, context);
    };

    bcv_passage.prototype.ff = function(passage, accum, context) {
      var ref, ref1;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.value.push({
        type: "integer",
        indices: passage.indices,
        value: 999
      });
      ref = this.range(passage, [], passage.start_context), (ref1 = ref[0], passage = ref1[0]), context = ref[1];
      passage.value[0].indices = passage.value[1].indices;
      passage.value[0].absolute_indices = passage.value[1].absolute_indices;
      passage.value.pop();
      if (passage.passages[0].valid.messages.end_verse_not_exist != null) {
        delete passage.passages[0].valid.messages.end_verse_not_exist;
      }
      if (passage.passages[0].valid.messages.end_chapter_not_exist != null) {
        delete passage.passages[0].valid.messages.end_chapter_not_exist;
      }
      if (passage.passages[0].end.original_c != null) {
        delete passage.passages[0].end.original_c;
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.integer_title = function(passage, accum, context) {
      var v_indices;
      passage.start_context = bcv_utils.shallow_clone(context);
      if (context.b !== "Ps") {
        return this.integer(passage.value[0], accum, context);
      }
      passage.value[0] = {
        type: "c",
        value: [passage.value[0]],
        indices: [passage.value[0].indices[0], passage.value[0].indices[1]]
      };
      v_indices = [passage.indices[1] - 5, passage.indices[1]];
      passage.value[1] = {
        type: "v",
        value: [
          {
            type: "integer",
            value: 1,
            indices: v_indices
          }
        ],
        indices: v_indices
      };
      passage.type = "cv";
      return this.cv(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.integer = function(passage, accum, context) {
      if (context.v != null) {
        return this.v(passage, accum, context);
      }
      return this.c(passage, accum, context);
    };

    bcv_passage.prototype.next_v = function(passage, accum, context) {
      var prev_integer, psg, ref, ref1, ref2, ref3;
      passage.start_context = bcv_utils.shallow_clone(context);
      prev_integer = this.pluck_last_recursively("integer", passage.value);
      if (prev_integer == null) {
        prev_integer = {
          value: 1
        };
      }
      passage.value.push({
        type: "integer",
        indices: passage.indices,
        value: prev_integer.value + 1
      });
      ref = this.range(passage, [], passage.start_context), (ref1 = ref[0], psg = ref1[0]), context = ref[1];
      if ((psg.passages[0].valid.messages.end_verse_not_exist != null) && (psg.passages[0].valid.messages.start_verse_not_exist == null) && (psg.passages[0].valid.messages.start_chapter_not_exist == null) && (context.c != null)) {
        passage.value.pop();
        passage.value.push({
          type: "cv",
          indices: passage.indices,
          value: [
            {
              type: "c",
              value: [
                {
                  type: "integer",
                  value: context.c + 1,
                  indices: passage.indices
                }
              ],
              indices: passage.indices
            }, {
              type: "v",
              value: [
                {
                  type: "integer",
                  value: 1,
                  indices: passage.indices
                }
              ],
              indices: passage.indices
            }
          ]
        });
        ref2 = this.range(passage, [], passage.start_context), (ref3 = ref2[0], psg = ref3[0]), context = ref2[1];
      }
      psg.value[0].indices = psg.value[1].indices;
      psg.value[0].absolute_indices = psg.value[1].absolute_indices;
      psg.value.pop();
      if (psg.passages[0].valid.messages.end_verse_not_exist != null) {
        delete psg.passages[0].valid.messages.end_verse_not_exist;
      }
      if (psg.passages[0].valid.messages.end_chapter_not_exist != null) {
        delete psg.passages[0].valid.messages.end_chapter_not_exist;
      }
      if (psg.passages[0].end.original_c != null) {
        delete psg.passages[0].end.original_c;
      }
      accum.push(psg);
      return [accum, context];
    };

    bcv_passage.prototype.sequence = function(passage, accum, context) {
      var k, l, len, len1, obj, psg, ref, ref1, ref2, ref3, sub_psg;
      passage.start_context = bcv_utils.shallow_clone(context);
      passage.passages = [];
      ref = passage.value;
      for (k = 0, len = ref.length; k < len; k++) {
        obj = ref[k];
        ref1 = this.handle_array(obj, [], context), (ref2 = ref1[0], psg = ref2[0]), context = ref1[1];
        ref3 = psg.passages;
        for (l = 0, len1 = ref3.length; l < len1; l++) {
          sub_psg = ref3[l];
          if (sub_psg.type == null) {
            sub_psg.type = psg.type;
          }
          if (sub_psg.absolute_indices == null) {
            sub_psg.absolute_indices = psg.absolute_indices;
          }
          if (psg.start_context.translations != null) {
            sub_psg.translations = psg.start_context.translations;
          }
          sub_psg.enclosed_absolute_indices = psg.type === "sequence_post_enclosed" ? psg.absolute_indices : [-1, -1];
          passage.passages.push(sub_psg);
        }
      }
      if (passage.absolute_indices == null) {
        if (passage.passages.length > 0 && passage.type === "sequence") {
          passage.absolute_indices = [passage.passages[0].absolute_indices[0], passage.passages[passage.passages.length - 1].absolute_indices[1]];
        } else {
          passage.absolute_indices = this.get_absolute_indices(passage.indices);
        }
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.sequence_post_enclosed = function(passage, accum, context) {
      return this.sequence(passage, accum, context);
    };

    bcv_passage.prototype.v = function(passage, accum, context) {
      var c, no_c, ref, v, valid;
      v = passage.type === "integer" ? passage.value : this.pluck("integer", passage.value).value;
      passage.start_context = bcv_utils.shallow_clone(context);
      c = context.c != null ? context.c : 1;
      valid = this.validate_ref(passage.start_context.translations, {
        b: context.b,
        c: c,
        v: v
      });
      ref = this.fix_start_zeroes(valid, 0, v), no_c = ref[0], v = ref[1];
      passage.passages = [
        {
          start: {
            b: context.b,
            c: c,
            v: v
          },
          end: {
            b: context.b,
            c: c,
            v: v
          },
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      context.v = v;
      return [accum, context];
    };

    bcv_passage.prototype.range = function(passage, accum, context) {
      var end, end_obj, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, return_now, return_value, start, start_obj, valid;
      passage.start_context = bcv_utils.shallow_clone(context);
      ref = passage.value, start = ref[0], end = ref[1];
      ref1 = this.handle_obj(start, [], context), (ref2 = ref1[0], start = ref2[0]), context = ref1[1];
      if (end.type === "v" && ((start.type === "bc" && !((ref3 = start.passages) != null ? (ref4 = ref3[0]) != null ? (ref5 = ref4.valid) != null ? (ref6 = ref5.messages) != null ? ref6.start_chapter_not_exist_in_single_chapter_book : void 0 : void 0 : void 0 : void 0)) || start.type === "c") && this.options.end_range_digits_strategy === "verse") {
        passage.value[0] = start;
        return this.range_change_integer_end(passage, accum);
      }
      ref7 = this.handle_obj(end, [], context), (ref8 = ref7[0], end = ref8[0]), context = ref7[1];
      passage.value = [start, end];
      passage.indices = [start.indices[0], end.indices[1]];
      delete passage.absolute_indices;
      start_obj = {
        b: start.passages[0].start.b,
        c: start.passages[0].start.c,
        v: start.passages[0].start.v,
        type: start.type
      };
      end_obj = {
        b: end.passages[0].end.b,
        c: end.passages[0].end.c,
        v: end.passages[0].end.v,
        type: end.type
      };
      if (end.passages[0].valid.messages.start_chapter_is_zero) {
        end_obj.c = 0;
      }
      if (end.passages[0].valid.messages.start_verse_is_zero) {
        end_obj.v = 0;
      }
      valid = this.validate_ref(passage.start_context.translations, start_obj, end_obj);
      if (valid.valid) {
        ref9 = this.range_handle_valid(valid, passage, start, start_obj, end, end_obj, accum), return_now = ref9[0], return_value = ref9[1];
        if (return_now) {
          return return_value;
        }
      } else {
        return this.range_handle_invalid(valid, passage, start, start_obj, end, end_obj, accum);
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      passage.passages = [
        {
          start: start_obj,
          end: end_obj,
          valid: valid
        }
      ];
      if (passage.start_context.translations != null) {
        passage.passages[0].translations = passage.start_context.translations;
      }
      if (start_obj.type === "b") {
        if (end_obj.type === "b") {
          passage.type = "b_range";
        } else {
          passage.type = "b_range_start";
        }
      } else if (end_obj.type === "b") {
        passage.type = "range_end_b";
      }
      accum.push(passage);
      return [accum, context];
    };

    bcv_passage.prototype.range_change_end = function(passage, accum, new_end) {
      var end, new_obj, ref, start;
      ref = passage.value, start = ref[0], end = ref[1];
      if (end.type === "integer") {
        end.original_value = end.value;
        end.value = new_end;
      } else if (end.type === "v") {
        new_obj = this.pluck("integer", end.value);
        new_obj.original_value = new_obj.value;
        new_obj.value = new_end;
      } else if (end.type === "cv") {
        new_obj = this.pluck("c", end.value);
        new_obj.original_value = new_obj.value;
        new_obj.value = new_end;
      }
      return this.handle_obj(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.range_change_integer_end = function(passage, accum) {
      var end, ref, start;
      ref = passage.value, start = ref[0], end = ref[1];
      if (passage.original_type == null) {
        passage.original_type = passage.type;
      }
      if (passage.original_value == null) {
        passage.original_value = [start, end];
      }
      passage.type = start.type === "integer" ? "cv" : start.type + "v";
      if (start.type === "integer") {
        passage.value[0] = {
          type: "c",
          value: [start],
          indices: start.indices
        };
      }
      if (end.type === "integer") {
        passage.value[1] = {
          type: "v",
          value: [end],
          indices: end.indices
        };
      }
      return this.handle_obj(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.range_check_new_end = function(translations, start_obj, end_obj, valid) {
      var new_end, new_valid, obj_to_validate, type;
      new_end = 0;
      type = null;
      if (valid.messages.end_chapter_before_start) {
        type = "c";
      } else if (valid.messages.end_verse_before_start) {
        type = "v";
      }
      if (type != null) {
        new_end = this.range_get_new_end_value(start_obj, end_obj, valid, type);
      }
      if (new_end > 0) {
        obj_to_validate = {
          b: end_obj.b,
          c: end_obj.c,
          v: end_obj.v
        };
        obj_to_validate[type] = new_end;
        new_valid = this.validate_ref(translations, obj_to_validate);
        if (!new_valid.valid) {
          new_end = 0;
        }
      }
      return new_end;
    };

    bcv_passage.prototype.range_end_b = function(passage, accum, context) {
      return this.range(passage, accum, context);
    };

    bcv_passage.prototype.range_get_new_end_value = function(start_obj, end_obj, valid, key) {
      var new_end;
      new_end = 0;
      if ((key === "c" && valid.messages.end_chapter_is_zero) || (key === "v" && valid.messages.end_verse_is_zero)) {
        return new_end;
      }
      if (start_obj[key] >= 10 && end_obj[key] < 10 && start_obj[key] - 10 * Math.floor(start_obj[key] / 10) < end_obj[key]) {
        new_end = end_obj[key] + 10 * Math.floor(start_obj[key] / 10);
      } else if (start_obj[key] >= 100 && end_obj[key] < 100 && start_obj[key] - 100 < end_obj[key]) {
        new_end = end_obj[key] + 100;
      }
      return new_end;
    };

    bcv_passage.prototype.range_handle_invalid = function(valid, passage, start, start_obj, end, end_obj, accum) {
      var new_end, ref, temp_valid, temp_value;
      if (valid.valid === false && (valid.messages.end_chapter_before_start || valid.messages.end_verse_before_start) && (end.type === "integer" || end.type === "v") || (valid.valid === false && valid.messages.end_chapter_before_start && end.type === "cv")) {
        new_end = this.range_check_new_end(passage.start_context.translations, start_obj, end_obj, valid);
        if (new_end > 0) {
          return this.range_change_end(passage, accum, new_end);
        }
      }
      if (this.options.end_range_digits_strategy === "verse" && (start_obj.v == null) && (end.type === "integer" || end.type === "v")) {
        temp_value = end.type === "v" ? this.pluck("integer", end.value) : end.value;
        temp_valid = this.validate_ref(passage.start_context.translations, {
          b: start_obj.b,
          c: start_obj.c,
          v: temp_value
        });
        if (temp_valid.valid) {
          return this.range_change_integer_end(passage, accum);
        }
      }
      if (passage.original_type == null) {
        passage.original_type = passage.type;
      }
      passage.type = "sequence";
      ref = [[start, end], [[start], [end]]], passage.original_value = ref[0], passage.value = ref[1];
      return this.sequence(passage, accum, passage.start_context);
    };

    bcv_passage.prototype.range_handle_valid = function(valid, passage, start, start_obj, end, end_obj, accum) {
      var temp_valid, temp_value;
      if (valid.messages.end_chapter_not_exist && this.options.end_range_digits_strategy === "verse" && (start_obj.v == null) && (end.type === "integer" || end.type === "v") && this.options.passage_existence_strategy.indexOf("v") >= 0) {
        temp_value = end.type === "v" ? this.pluck("integer", end.value) : end.value;
        temp_valid = this.validate_ref(passage.start_context.translations, {
          b: start_obj.b,
          c: start_obj.c,
          v: temp_value
        });
        if (temp_valid.valid) {
          return [true, this.range_change_integer_end(passage, accum)];
        }
      }
      this.range_validate(valid, start_obj, end_obj, passage);
      return [false, null];
    };

    bcv_passage.prototype.range_validate = function(valid, start_obj, end_obj, passage) {
      var ref;
      if (valid.messages.end_chapter_not_exist || valid.messages.end_chapter_not_exist_in_single_chapter_book) {
        end_obj.original_c = end_obj.c;
        end_obj.c = valid.messages.end_chapter_not_exist ? valid.messages.end_chapter_not_exist : valid.messages.end_chapter_not_exist_in_single_chapter_book;
        if (end_obj.v != null) {
          end_obj.v = this.validate_ref(passage.start_context.translations, {
            b: end_obj.b,
            c: end_obj.c,
            v: 999
          }).messages.end_verse_not_exist;
          delete valid.messages.end_verse_is_zero;
        }
      } else if (valid.messages.end_verse_not_exist) {
        end_obj.original_v = end_obj.v;
        end_obj.v = valid.messages.end_verse_not_exist;
      }
      if (valid.messages.end_verse_is_zero && this.options.zero_verse_strategy !== "allow") {
        end_obj.v = valid.messages.end_verse_is_zero;
      }
      if (valid.messages.end_chapter_is_zero) {
        end_obj.c = valid.messages.end_chapter_is_zero;
      }
      ref = this.fix_start_zeroes(valid, start_obj.c, start_obj.v), start_obj.c = ref[0], start_obj.v = ref[1];
      return true;
    };

    bcv_passage.prototype.translation_sequence = function(passage, accum, context) {
      var k, l, len, len1, ref, translation, translations, val;
      passage.start_context = bcv_utils.shallow_clone(context);
      translations = [];
      translations.push({
        translation: this.books[passage.value[0].value].parsed
      });
      ref = passage.value[1];
      for (k = 0, len = ref.length; k < len; k++) {
        val = ref[k];
        val = this.books[this.pluck("translation", val).value].parsed;
        if (val != null) {
          translations.push({
            translation: val
          });
        }
      }
      for (l = 0, len1 = translations.length; l < len1; l++) {
        translation = translations[l];
        if (this.translations.aliases[translation.translation] != null) {
          translation.alias = this.translations.aliases[translation.translation].alias;
          translation.osis = this.translations.aliases[translation.translation].osis || translation.translation.toUpperCase();
        } else {
          translation.alias = "default";
          translation.osis = translation.translation.toUpperCase();
        }
      }
      if (accum.length > 0) {
        context = this.translation_sequence_apply(accum, translations);
      }
      if (passage.absolute_indices == null) {
        passage.absolute_indices = this.get_absolute_indices(passage.indices);
      }
      accum.push(passage);
      this.reset_context(context, ["translations"]);
      return [accum, context];
    };

    bcv_passage.prototype.translation_sequence_apply = function(accum, translations) {
      var context, i, k, new_accum, ref, ref1, use_i;
      use_i = 0;
      for (i = k = ref = accum.length - 1; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
        if (accum[i].original_type != null) {
          accum[i].type = accum[i].original_type;
        }
        if (accum[i].original_value != null) {
          accum[i].value = accum[i].original_value;
        }
        if (accum[i].type !== "translation_sequence") {
          continue;
        }
        use_i = i + 1;
        break;
      }
      if (use_i < accum.length) {
        accum[use_i].start_context.translations = translations;
        ref1 = this.handle_array(accum.slice(use_i), [], accum[use_i].start_context), new_accum = ref1[0], context = ref1[1];
      } else {
        context = bcv_utils.shallow_clone(accum[accum.length - 1].start_context);
      }
      return context;
    };

    bcv_passage.prototype.pluck = function(type, passages) {
      var k, len, passage;
      for (k = 0, len = passages.length; k < len; k++) {
        passage = passages[k];
        if (!((passage != null) && (passage.type != null) && passage.type === type)) {
          continue;
        }
        if (type === "c" || type === "v") {
          return this.pluck("integer", passage.value);
        }
        return passage;
      }
      return null;
    };

    bcv_passage.prototype.pluck_last_recursively = function(type, passages) {
      var k, passage, value;
      for (k = passages.length - 1; k >= 0; k += -1) {
        passage = passages[k];
        if (!((passage != null) && (passage.type != null))) {
          continue;
        }
        if (passage.type === type) {
          return this.pluck(type, [passage]);
        }
        value = this.pluck_last_recursively(type, passage.value);
        if (value != null) {
          return value;
        }
      }
      return null;
    };

    bcv_passage.prototype.set_context_from_object = function(context, keys, obj) {
      var k, len, results, type;
      results = [];
      for (k = 0, len = keys.length; k < len; k++) {
        type = keys[k];
        if (obj[type] == null) {
          continue;
        }
        results.push(context[type] = obj[type]);
      }
      return results;
    };

    bcv_passage.prototype.reset_context = function(context, keys) {
      var k, len, results, type;
      results = [];
      for (k = 0, len = keys.length; k < len; k++) {
        type = keys[k];
        results.push(delete context[type]);
      }
      return results;
    };

    bcv_passage.prototype.fix_start_zeroes = function(valid, c, v) {
      if (valid.messages.start_chapter_is_zero && this.options.zero_chapter_strategy === "upgrade") {
        c = valid.messages.start_chapter_is_zero;
      }
      if (valid.messages.start_verse_is_zero && this.options.zero_verse_strategy === "upgrade") {
        v = valid.messages.start_verse_is_zero;
      }
      return [c, v];
    };

    bcv_passage.prototype.calculate_indices = function(match, adjust) {
      var character, end_index, indices, k, l, len, len1, len2, m, match_index, part, part_length, parts, ref, switch_type, temp;
      switch_type = "book";
      indices = [];
      match_index = 0;
      adjust = parseInt(adjust, 10);
      parts = [match];
      ref = ["\x1e", "\x1f"];
      for (k = 0, len = ref.length; k < len; k++) {
        character = ref[k];
        temp = [];
        for (l = 0, len1 = parts.length; l < len1; l++) {
          part = parts[l];
          temp = temp.concat(part.split(character));
        }
        parts = temp;
      }
      for (m = 0, len2 = parts.length; m < len2; m++) {
        part = parts[m];
        switch_type = switch_type === "book" ? "rest" : "book";
        part_length = part.length;
        if (part_length === 0) {
          continue;
        }
        if (switch_type === "book") {
          part = part.replace(/\/\d+$/, "");
          end_index = match_index + part_length;
          if (indices.length > 0 && indices[indices.length - 1].index === adjust) {
            indices[indices.length - 1].end = end_index;
          } else {
            indices.push({
              start: match_index,
              end: end_index,
              index: adjust
            });
          }
          match_index += part_length + 2;
          adjust = this.books[part].start_index + this.books[part].value.length - match_index;
          indices.push({
            start: end_index + 1,
            end: end_index + 1,
            index: adjust
          });
        } else {
          end_index = match_index + part_length - 1;
          if (indices.length > 0 && indices[indices.length - 1].index === adjust) {
            indices[indices.length - 1].end = end_index;
          } else {
            indices.push({
              start: match_index,
              end: end_index,
              index: adjust
            });
          }
          match_index += part_length;
        }
      }
      return indices;
    };

    bcv_passage.prototype.get_absolute_indices = function(arg1) {
      var end, end_out, index, k, len, ref, start, start_out;
      start = arg1[0], end = arg1[1];
      start_out = null;
      end_out = null;
      ref = this.indices;
      for (k = 0, len = ref.length; k < len; k++) {
        index = ref[k];
        if (start_out === null && (index.start <= start && start <= index.end)) {
          start_out = start + index.index;
        }
        if ((index.start <= end && end <= index.end)) {
          end_out = end + index.index + 1;
          break;
        }
      }
      return [start_out, end_out];
    };

    bcv_passage.prototype.validate_ref = function(translations, start, end) {
      var k, len, messages, temp_valid, translation, valid;
      if (!((translations != null) && translations.length > 0)) {
        translations = [
          {
            translation: "default",
            osis: "",
            alias: "default"
          }
        ];
      }
      valid = false;
      messages = {};
      for (k = 0, len = translations.length; k < len; k++) {
        translation = translations[k];
        if (translation.alias == null) {
          translation.alias = "default";
        }
        if (translation.alias == null) {
          if (messages.translation_invalid == null) {
            messages.translation_invalid = [];
          }
          messages.translation_invalid.push(translation);
          continue;
        }
        if (this.translations.aliases[translation.alias] == null) {
          translation.alias = "default";
          if (messages.translation_unknown == null) {
            messages.translation_unknown = [];
          }
          messages.translation_unknown.push(translation);
        }
        temp_valid = this.validate_start_ref(translation.alias, start, messages)[0];
        if (end) {
          temp_valid = this.validate_end_ref(translation.alias, start, end, temp_valid, messages)[0];
        }
        if (temp_valid === true) {
          valid = true;
        }
      }
      return {
        valid: valid,
        messages: messages
      };
    };

    bcv_passage.prototype.validate_start_ref = function(translation, start, messages) {
      var ref, ref1, translation_order, valid;
      valid = true;
      if (translation !== "default" && (((ref = this.translations[translation]) != null ? ref.chapters[start.b] : void 0) == null)) {
        this.promote_book_to_translation(start.b, translation);
      }
      translation_order = ((ref1 = this.translations[translation]) != null ? ref1.order : void 0) != null ? translation : "default";
      if (start.v != null) {
        start.v = parseInt(start.v, 10);
      }
      if (this.translations[translation_order].order[start.b] != null) {
        if (start.c == null) {
          start.c = 1;
        }
        start.c = parseInt(start.c, 10);
        if (isNaN(start.c)) {
          valid = false;
          messages.start_chapter_not_numeric = true;
          return [valid, messages];
        }
        if (start.c === 0) {
          messages.start_chapter_is_zero = 1;
          if (this.options.zero_chapter_strategy === "error") {
            valid = false;
          } else {
            start.c = 1;
          }
        }
        if ((start.v != null) && start.v === 0) {
          messages.start_verse_is_zero = 1;
          if (this.options.zero_verse_strategy === "error") {
            valid = false;
          } else if (this.options.zero_verse_strategy === "upgrade") {
            start.v = 1;
          }
        }
        if (start.c > 0 && (this.translations[translation].chapters[start.b][start.c - 1] != null)) {
          if (start.v != null) {
            if (isNaN(start.v)) {
              valid = false;
              messages.start_verse_not_numeric = true;
            } else if (start.v > this.translations[translation].chapters[start.b][start.c - 1]) {
              if (this.options.passage_existence_strategy.indexOf("v") >= 0) {
                valid = false;
                messages.start_verse_not_exist = this.translations[translation].chapters[start.b][start.c - 1];
              }
            }
          } else if (start.c === 1 && this.options.single_chapter_1_strategy === "verse" && this.translations[translation].chapters[start.b].length === 1) {
            messages.start_chapter_1 = 1;
          }
        } else {
          if (start.c !== 1 && this.translations[translation].chapters[start.b].length === 1) {
            valid = false;
            messages.start_chapter_not_exist_in_single_chapter_book = 1;
          } else if (start.c > 0 && this.options.passage_existence_strategy.indexOf("c") >= 0) {
            valid = false;
            messages.start_chapter_not_exist = this.translations[translation].chapters[start.b].length;
          }
        }
      } else if (start.b == null) {
        valid = false;
        messages.start_book_not_defined = true;
      } else {
        if (this.options.passage_existence_strategy.indexOf("b") >= 0) {
          valid = false;
        }
        messages.start_book_not_exist = true;
      }
      return [valid, messages];
    };

    bcv_passage.prototype.validate_end_ref = function(translation, start, end, valid, messages) {
      var ref, translation_order;
      translation_order = ((ref = this.translations[translation]) != null ? ref.order : void 0) != null ? translation : "default";
      if (end.c != null) {
        end.c = parseInt(end.c, 10);
        if (isNaN(end.c)) {
          valid = false;
          messages.end_chapter_not_numeric = true;
        } else if (end.c === 0) {
          messages.end_chapter_is_zero = 1;
          if (this.options.zero_chapter_strategy === "error") {
            valid = false;
          } else {
            end.c = 1;
          }
        }
      }
      if (end.v != null) {
        end.v = parseInt(end.v, 10);
        if (isNaN(end.v)) {
          valid = false;
          messages.end_verse_not_numeric = true;
        } else if (end.v === 0) {
          messages.end_verse_is_zero = 1;
          if (this.options.zero_verse_strategy === "error") {
            valid = false;
          } else if (this.options.zero_verse_strategy === "upgrade") {
            end.v = 1;
          }
        }
      }
      if (this.translations[translation_order].order[end.b] != null) {
        if ((end.c == null) && this.translations[translation].chapters[end.b].length === 1) {
          end.c = 1;
        }
        if ((this.translations[translation_order].order[start.b] != null) && this.translations[translation_order].order[start.b] > this.translations[translation_order].order[end.b]) {
          if (this.options.passage_existence_strategy.indexOf("b") >= 0) {
            valid = false;
          }
          messages.end_book_before_start = true;
        }
        if (start.b === end.b && (end.c != null) && !isNaN(end.c)) {
          if (start.c == null) {
            start.c = 1;
          }
          if (!isNaN(parseInt(start.c, 10)) && start.c > end.c) {
            valid = false;
            messages.end_chapter_before_start = true;
          } else if (start.c === end.c && (end.v != null) && !isNaN(end.v)) {
            if (start.v == null) {
              start.v = 1;
            }
            if (!isNaN(parseInt(start.v, 10)) && start.v > end.v) {
              valid = false;
              messages.end_verse_before_start = true;
            }
          }
        }
        if ((end.c != null) && !isNaN(end.c)) {
          if (this.translations[translation].chapters[end.b][end.c - 1] == null) {
            if (this.translations[translation].chapters[end.b].length === 1) {
              messages.end_chapter_not_exist_in_single_chapter_book = 1;
            } else if (end.c > 0 && this.options.passage_existence_strategy.indexOf("c") >= 0) {
              messages.end_chapter_not_exist = this.translations[translation].chapters[end.b].length;
            }
          }
        }
        if ((end.v != null) && !isNaN(end.v)) {
          if (end.c == null) {
            end.c = this.translations[translation].chapters[end.b].length;
          }
          if (end.v > this.translations[translation].chapters[end.b][end.c - 1] && this.options.passage_existence_strategy.indexOf("v") >= 0) {
            messages.end_verse_not_exist = this.translations[translation].chapters[end.b][end.c - 1];
          }
        }
      } else {
        valid = false;
        messages.end_book_not_exist = true;
      }
      return [valid, messages];
    };

    bcv_passage.prototype.promote_book_to_translation = function(book, translation) {
      var base, base1;
      if ((base = this.translations)[translation] == null) {
        base[translation] = {};
      }
      if ((base1 = this.translations[translation]).chapters == null) {
        base1.chapters = {};
      }
      if (this.translations[translation].chapters[book] == null) {
        return this.translations[translation].chapters[book] = bcv_utils.shallow_clone_array(this.translations["default"].chapters[book]);
      }
    };

    return bcv_passage;

  })();

  bcv_utils = {
    shallow_clone: function(obj) {
      var key, out, val;
      if (obj == null) {
        return obj;
      }
      out = {};
      for (key in obj) {
        if (!hasProp.call(obj, key)) continue;
        val = obj[key];
        out[key] = val;
      }
      return out;
    },
    shallow_clone_array: function(arr) {
      var i, k, out, ref;
      if (arr == null) {
        return arr;
      }
      out = [];
      for (i = k = 0, ref = arr.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        if (typeof arr[i] !== "undefined") {
          out[i] = arr[i];
        }
      }
      return out;
    }
  };

  bcv_parser.prototype.regexps.translations = /(?:(?:KM|YC(?:1998|200[189])?|T(?:KK|SV|C)|HAD\[İI\]|C(?:AN|OS)))\b/gi;

  bcv_parser.prototype.translations = {
    aliases: {
      yc1998: {
        osis: "YC",
        alias: "default"
      },
      yc2001: {
        osis: "YC",
        alias: "default"
      },
      yc2008: {
        osis: "YC",
        alias: "default"
      },
      yc2009: {
        osis: "YC",
        alias: "default"
      },
      tkk: {
        osis: "YC",
        alias: "default"
      },
      cos: {
        osis: "TC",
        alias: "default"
      },
      "default": {
        osis: "",
        alias: "default"
      }
    },
    alternates: {},
    "default": {
      order: {
        "Gen": 1,
        "Exod": 2,
        "Lev": 3,
        "Num": 4,
        "Deut": 5,
        "Josh": 6,
        "Judg": 7,
        "Ruth": 8,
        "1Sam": 9,
        "2Sam": 10,
        "1Kgs": 11,
        "2Kgs": 12,
        "1Chr": 13,
        "2Chr": 14,
        "Ezra": 15,
        "Neh": 16,
        "Esth": 17,
        "Job": 18,
        "Ps": 19,
        "Prov": 20,
        "Eccl": 21,
        "Song": 22,
        "Isa": 23,
        "Jer": 24,
        "Lam": 25,
        "Ezek": 26,
        "Dan": 27,
        "Hos": 28,
        "Joel": 29,
        "Amos": 30,
        "Obad": 31,
        "Jonah": 32,
        "Mic": 33,
        "Nah": 34,
        "Hab": 35,
        "Zeph": 36,
        "Hag": 37,
        "Zech": 38,
        "Mal": 39,
        "Matt": 40,
        "Mark": 41,
        "Luke": 42,
        "John": 43,
        "Acts": 44,
        "Rom": 45,
        "1Cor": 46,
        "2Cor": 47,
        "Gal": 48,
        "Eph": 49,
        "Phil": 50,
        "Col": 51,
        "1Thess": 52,
        "2Thess": 53,
        "1Tim": 54,
        "2Tim": 55,
        "Titus": 56,
        "Phlm": 57,
        "Heb": 58,
        "Jas": 59,
        "1Pet": 60,
        "2Pet": 61,
        "1John": 62,
        "2John": 63,
        "3John": 64,
        "Jude": 65,
        "Rev": 66,
        "Tob": 67,
        "Jdt": 68,
        "GkEsth": 69,
        "Wis": 70,
        "Sir": 71,
        "Bar": 72,
        "PrAzar": 73,
        "Sus": 74,
        "Bel": 75,
        "SgThree": 76,
        "EpJer": 77,
        "1Macc": 78,
        "2Macc": 79,
        "3Macc": 80,
        "4Macc": 81,
        "1Esd": 82,
        "2Esd": 83,
        "PrMan": 84
      },
      chapters: {
        "Gen": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 55, 32, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26],
        "Exod": [22, 25, 22, 31, 23, 30, 25, 32, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 36, 31, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38],
        "Lev": [17, 16, 17, 35, 19, 30, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34],
        "Num": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 50, 13, 32, 22, 29, 35, 41, 30, 25, 18, 65, 23, 31, 40, 16, 54, 42, 56, 29, 34, 13],
        "Deut": [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 32, 18, 29, 23, 22, 20, 22, 21, 20, 23, 30, 25, 22, 19, 19, 26, 68, 29, 20, 30, 52, 29, 12],
        "Josh": [18, 24, 17, 24, 15, 27, 26, 35, 27, 43, 23, 24, 33, 15, 63, 10, 18, 28, 51, 9, 45, 34, 16, 33],
        "Judg": [36, 23, 31, 24, 31, 40, 25, 35, 57, 18, 40, 15, 25, 20, 20, 31, 13, 31, 30, 48, 25],
        "Ruth": [22, 23, 18, 22],
        "1Sam": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 15, 23, 29, 22, 44, 25, 12, 25, 11, 31, 13],
        "2Sam": [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 33, 43, 26, 22, 51, 39, 25],
        "1Kgs": [53, 46, 28, 34, 18, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 53],
        "2Kgs": [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 21, 21, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30],
        "1Chr": [54, 55, 24, 43, 26, 81, 40, 40, 44, 14, 47, 40, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30],
        "2Chr": [17, 18, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 22, 15, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23],
        "Ezra": [11, 70, 13, 24, 17, 22, 28, 36, 15, 44],
        "Neh": [11, 20, 32, 23, 19, 19, 73, 18, 38, 39, 36, 47, 31],
        "Esth": [22, 23, 15, 17, 14, 14, 10, 17, 32, 3],
        "Job": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 24, 34, 17],
        "Ps": [6, 12, 8, 8, 12, 10, 17, 9, 20, 18, 7, 8, 6, 7, 5, 11, 15, 50, 14, 9, 13, 31, 6, 10, 22, 12, 14, 9, 11, 12, 24, 11, 22, 22, 28, 12, 40, 22, 13, 17, 13, 11, 5, 26, 17, 11, 9, 14, 20, 23, 19, 9, 6, 7, 23, 13, 11, 11, 17, 12, 8, 12, 11, 10, 13, 20, 7, 35, 36, 5, 24, 20, 28, 23, 10, 12, 20, 72, 13, 19, 16, 8, 18, 12, 13, 17, 7, 18, 52, 17, 16, 15, 5, 23, 11, 13, 12, 9, 9, 5, 8, 28, 22, 35, 45, 48, 43, 13, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 13, 10, 7, 12, 15, 21, 10, 20, 14, 9, 6],
        "Prov": [33, 22, 35, 27, 23, 35, 27, 36, 18, 32, 31, 28, 25, 35, 33, 33, 28, 24, 29, 30, 31, 29, 35, 34, 28, 28, 27, 28, 27, 33, 31],
        "Eccl": [18, 26, 22, 16, 20, 12, 29, 17, 18, 20, 10, 14],
        "Song": [17, 17, 11, 16, 16, 13, 13, 14],
        "Isa": [31, 22, 26, 6, 30, 13, 25, 22, 21, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 12, 25, 24],
        "Jer": [19, 37, 25, 31, 31, 30, 34, 22, 26, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],
        "Lam": [22, 22, 66, 22, 22],
        "Ezek": [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 49, 32, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],
        "Dan": [21, 49, 30, 37, 31, 28, 28, 27, 27, 21, 45, 13],
        "Hos": [11, 23, 5, 19, 15, 11, 16, 14, 17, 15, 12, 14, 16, 9],
        "Joel": [20, 32, 21],
        "Amos": [15, 16, 15, 13, 27, 14, 17, 14, 15],
        "Obad": [21],
        "Jonah": [17, 10, 10, 11],
        "Mic": [16, 13, 12, 13, 15, 16, 20],
        "Nah": [15, 13, 19],
        "Hab": [17, 20, 19],
        "Zeph": [18, 15, 20],
        "Hag": [15, 23],
        "Zech": [21, 13, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21],
        "Mal": [14, 17, 18, 6],
        "Matt": [25, 23, 17, 25, 48, 34, 29, 34, 38, 42, 30, 50, 58, 36, 39, 28, 27, 35, 30, 34, 46, 46, 39, 51, 46, 75, 66, 20],
        "Mark": [45, 28, 35, 41, 43, 56, 37, 38, 50, 52, 33, 44, 37, 72, 47, 20],
        "Luke": [80, 52, 38, 44, 39, 49, 50, 56, 62, 42, 54, 59, 35, 35, 32, 31, 37, 43, 48, 47, 38, 71, 56, 53],
        "John": [51, 25, 36, 54, 47, 71, 53, 59, 41, 42, 57, 50, 38, 31, 27, 33, 26, 40, 42, 31, 25],
        "Acts": [26, 47, 26, 37, 42, 15, 60, 40, 43, 48, 30, 25, 52, 28, 41, 40, 34, 28, 41, 38, 40, 30, 35, 27, 27, 32, 44, 31],
        "Rom": [32, 29, 31, 25, 21, 23, 25, 39, 33, 21, 36, 21, 14, 23, 33, 27],
        "1Cor": [31, 16, 23, 21, 13, 20, 40, 13, 27, 33, 34, 31, 13, 40, 58, 24],
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 14],
        "Gal": [24, 21, 29, 31, 26, 18],
        "Eph": [23, 22, 21, 32, 33, 24],
        "Phil": [30, 30, 21, 23],
        "Col": [29, 23, 25, 18],
        "1Thess": [10, 20, 13, 18, 28],
        "2Thess": [12, 17, 18],
        "1Tim": [20, 15, 16, 16, 25, 21],
        "2Tim": [18, 26, 17, 22],
        "Titus": [16, 15, 15],
        "Phlm": [25],
        "Heb": [14, 18, 19, 16, 14, 20, 28, 13, 28, 39, 40, 29, 25],
        "Jas": [27, 26, 18, 17, 20],
        "1Pet": [25, 25, 22, 19, 14],
        "2Pet": [21, 22, 18],
        "1John": [10, 29, 24, 21, 21],
        "2John": [13],
        "3John": [15],
        "Jude": [25],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 17, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],
        "Tob": [22, 14, 17, 21, 22, 18, 16, 21, 6, 13, 18, 22, 17, 15],
        "Jdt": [16, 28, 10, 15, 24, 21, 32, 36, 14, 23, 23, 20, 20, 19, 14, 25],
        "GkEsth": [22, 23, 15, 17, 14, 14, 10, 17, 32, 13, 12, 6, 18, 19, 16, 24],
        "Wis": [16, 24, 19, 20, 23, 25, 30, 21, 18, 21, 26, 27, 19, 31, 19, 29, 21, 25, 22],
        "Sir": [30, 18, 31, 31, 15, 37, 36, 19, 18, 31, 34, 18, 26, 27, 20, 30, 32, 33, 30, 31, 28, 27, 27, 34, 26, 29, 30, 26, 28, 25, 31, 24, 33, 31, 26, 31, 31, 34, 35, 30, 22, 25, 33, 23, 26, 20, 25, 25, 16, 29, 30],
        "Bar": [22, 35, 37, 37, 9],
        "PrAzar": [68],
        "Sus": [64],
        "Bel": [42],
        "SgThree": [39],
        "EpJer": [73],
        "1Macc": [64, 70, 60, 61, 68, 63, 50, 32, 73, 89, 74, 53, 53, 49, 41, 24],
        "2Macc": [36, 32, 40, 50, 27, 31, 42, 36, 29, 38, 38, 45, 26, 46, 39],
        "3Macc": [29, 33, 30, 21, 51, 41, 23],
        "4Macc": [35, 24, 21, 26, 38, 35, 23, 29, 32, 21, 27, 19, 27, 20, 32, 25, 24, 24],
        "1Esd": [58, 30, 24, 63, 73, 34, 15, 96, 55],
        "2Esd": [40, 48, 36, 52, 56, 59, 70, 63, 47, 59, 46, 51, 58, 48, 63, 78],
        "PrMan": [15],
        "Ps151": [7]
      }
    },
    vulgate: {
      chapters: {
        "Gen": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 55, 32, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 32, 25],
        "Exod": [22, 25, 22, 31, 23, 30, 25, 32, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 36, 31, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 36],
        "Lev": [17, 16, 17, 35, 19, 30, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 45, 34],
        "Num": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 34, 15, 34, 45, 41, 50, 13, 32, 22, 30, 35, 41, 30, 25, 18, 65, 23, 31, 39, 17, 54, 42, 56, 29, 34, 13],
        "Josh": [18, 24, 17, 25, 16, 27, 26, 35, 27, 44, 23, 24, 33, 15, 63, 10, 18, 28, 51, 9, 43, 34, 16, 33],
        "Judg": [36, 23, 31, 24, 32, 40, 25, 35, 57, 18, 40, 15, 25, 20, 20, 31, 13, 31, 30, 48, 24],
        "1Sam": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 43, 15, 23, 28, 23, 44, 25, 12, 25, 11, 31, 13],
        "1Kgs": [53, 46, 28, 34, 18, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 54],
        "1Chr": [54, 55, 24, 43, 26, 81, 40, 40, 44, 14, 46, 40, 14, 17, 29, 43, 27, 17, 19, 7, 30, 19, 32, 31, 31, 32, 34, 21, 30],
        "Neh": [11, 20, 31, 23, 19, 19, 73, 18, 38, 39, 36, 46, 31],
        "Job": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 23, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 35, 28, 25, 16],
        "Ps": [6, 13, 9, 10, 13, 11, 18, 10, 39, 8, 9, 6, 7, 5, 10, 15, 51, 15, 10, 14, 32, 6, 10, 22, 12, 14, 9, 11, 13, 25, 11, 22, 23, 28, 13, 40, 23, 14, 18, 14, 12, 5, 26, 18, 12, 10, 15, 21, 23, 21, 11, 7, 9, 24, 13, 12, 12, 18, 14, 9, 13, 12, 11, 14, 20, 8, 36, 37, 6, 24, 20, 28, 23, 11, 13, 21, 72, 13, 20, 17, 8, 19, 13, 14, 17, 7, 19, 53, 17, 16, 16, 5, 23, 11, 13, 12, 9, 9, 5, 8, 29, 22, 35, 45, 48, 43, 14, 31, 7, 10, 10, 9, 26, 9, 10, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 14, 10, 8, 12, 15, 21, 10, 11, 9, 14, 9, 6],
        "Eccl": [18, 26, 22, 17, 19, 11, 30, 17, 18, 20, 10, 14],
        "Song": [16, 17, 11, 16, 17, 12, 13, 14],
        "Jer": [19, 37, 25, 31, 31, 30, 34, 22, 26, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 20, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],
        "Ezek": [28, 9, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 49, 32, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],
        "Dan": [21, 49, 100, 34, 31, 28, 28, 27, 27, 21, 45, 13, 65, 42],
        "Hos": [11, 24, 5, 19, 15, 11, 16, 14, 17, 15, 12, 14, 15, 10],
        "Amos": [15, 16, 15, 13, 27, 15, 17, 14, 14],
        "Jonah": [16, 11, 10, 11],
        "Mic": [16, 13, 12, 13, 14, 16, 20],
        "Hag": [14, 24],
        "Matt": [25, 23, 17, 25, 48, 34, 29, 34, 38, 42, 30, 50, 58, 36, 39, 28, 26, 35, 30, 34, 46, 46, 39, 51, 46, 75, 66, 20],
        "Mark": [45, 28, 35, 40, 43, 56, 37, 39, 49, 52, 33, 44, 37, 72, 47, 20],
        "John": [51, 25, 36, 54, 47, 72, 53, 59, 41, 42, 57, 50, 38, 31, 27, 33, 26, 40, 42, 31, 25],
        "Acts": [26, 47, 26, 37, 42, 15, 59, 40, 43, 48, 30, 25, 52, 27, 41, 40, 34, 28, 40, 38, 40, 30, 35, 27, 27, 32, 44, 31],
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],
        "Tob": [25, 23, 25, 23, 28, 22, 20, 24, 12, 13, 21, 22, 23, 17],
        "Jdt": [12, 18, 15, 17, 29, 21, 25, 34, 19, 20, 21, 20, 31, 18, 15, 31],
        "Wis": [16, 25, 19, 20, 24, 27, 30, 21, 19, 21, 27, 27, 19, 31, 19, 29, 20, 25, 20],
        "Sir": [40, 23, 34, 36, 18, 37, 40, 22, 25, 34, 36, 19, 32, 27, 22, 31, 31, 33, 28, 33, 31, 33, 38, 47, 36, 28, 33, 30, 35, 27, 42, 28, 33, 31, 26, 28, 34, 39, 41, 32, 28, 26, 37, 27, 31, 23, 31, 28, 19, 31, 38, 13],
        "Bar": [22, 35, 38, 37, 9, 72],
        "1Macc": [67, 70, 60, 61, 68, 63, 50, 32, 73, 89, 74, 54, 54, 49, 41, 24],
        "2Macc": [36, 33, 40, 50, 27, 31, 42, 36, 29, 38, 38, 46, 26, 46, 40]
      }
    },
    ceb: {
      chapters: {
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],
        "Tob": [22, 14, 17, 21, 22, 18, 16, 21, 6, 13, 18, 22, 18, 15],
        "PrAzar": [67],
        "EpJer": [72],
        "1Esd": [55, 26, 24, 63, 71, 33, 15, 92, 55]
      }
    },
    kjv: {
      chapters: {
        "3John": [14]
      }
    },
    nab: {
      order: {
        "Gen": 1,
        "Exod": 2,
        "Lev": 3,
        "Num": 4,
        "Deut": 5,
        "Josh": 6,
        "Judg": 7,
        "Ruth": 8,
        "1Sam": 9,
        "2Sam": 10,
        "1Kgs": 11,
        "2Kgs": 12,
        "1Chr": 13,
        "2Chr": 14,
        "PrMan": 15,
        "Ezra": 16,
        "Neh": 17,
        "1Esd": 18,
        "2Esd": 19,
        "Tob": 20,
        "Jdt": 21,
        "Esth": 22,
        "GkEsth": 23,
        "1Macc": 24,
        "2Macc": 25,
        "3Macc": 26,
        "4Macc": 27,
        "Job": 28,
        "Ps": 29,
        "Prov": 30,
        "Eccl": 31,
        "Song": 32,
        "Wis": 33,
        "Sir": 34,
        "Isa": 35,
        "Jer": 36,
        "Lam": 37,
        "Bar": 38,
        "EpJer": 39,
        "Ezek": 40,
        "Dan": 41,
        "PrAzar": 42,
        "Sus": 43,
        "Bel": 44,
        "SgThree": 45,
        "Hos": 46,
        "Joel": 47,
        "Amos": 48,
        "Obad": 49,
        "Jonah": 50,
        "Mic": 51,
        "Nah": 52,
        "Hab": 53,
        "Zeph": 54,
        "Hag": 55,
        "Zech": 56,
        "Mal": 57,
        "Matt": 58,
        "Mark": 59,
        "Luke": 60,
        "John": 61,
        "Acts": 62,
        "Rom": 63,
        "1Cor": 64,
        "2Cor": 65,
        "Gal": 66,
        "Eph": 67,
        "Phil": 68,
        "Col": 69,
        "1Thess": 70,
        "2Thess": 71,
        "1Tim": 72,
        "2Tim": 73,
        "Titus": 74,
        "Phlm": 75,
        "Heb": 76,
        "Jas": 77,
        "1Pet": 78,
        "2Pet": 79,
        "1John": 80,
        "2John": 81,
        "3John": 82,
        "Jude": 83,
        "Rev": 84
      },
      chapters: {
        "Gen": [31, 25, 24, 26, 32, 22, 24, 22, 29, 32, 32, 20, 18, 24, 21, 16, 27, 33, 38, 18, 34, 24, 20, 67, 34, 35, 46, 22, 35, 43, 54, 33, 20, 31, 29, 43, 36, 30, 23, 23, 57, 38, 34, 34, 28, 34, 31, 22, 33, 26],
        "Exod": [22, 25, 22, 31, 23, 30, 29, 28, 35, 29, 10, 51, 22, 31, 27, 36, 16, 27, 25, 26, 37, 30, 33, 18, 40, 37, 21, 43, 46, 38, 18, 35, 23, 35, 35, 38, 29, 31, 43, 38],
        "Lev": [17, 16, 17, 35, 26, 23, 38, 36, 24, 20, 47, 8, 59, 57, 33, 34, 16, 30, 37, 27, 24, 33, 44, 23, 55, 46, 34],
        "Num": [54, 34, 51, 49, 31, 27, 89, 26, 23, 36, 35, 16, 33, 45, 41, 35, 28, 32, 22, 29, 35, 41, 30, 25, 19, 65, 23, 31, 39, 17, 54, 42, 56, 29, 34, 13],
        "Deut": [46, 37, 29, 49, 33, 25, 26, 20, 29, 22, 32, 31, 19, 29, 23, 22, 20, 22, 21, 20, 23, 29, 26, 22, 19, 19, 26, 69, 28, 20, 30, 52, 29, 12],
        "1Sam": [28, 36, 21, 22, 12, 21, 17, 22, 27, 27, 15, 25, 23, 52, 35, 23, 58, 30, 24, 42, 16, 23, 28, 23, 44, 25, 12, 25, 11, 31, 13],
        "2Sam": [27, 32, 39, 12, 25, 23, 29, 18, 13, 19, 27, 31, 39, 33, 37, 23, 29, 32, 44, 26, 22, 51, 39, 25],
        "1Kgs": [53, 46, 28, 20, 32, 38, 51, 66, 28, 29, 43, 33, 34, 31, 34, 34, 24, 46, 21, 43, 29, 54],
        "2Kgs": [18, 25, 27, 44, 27, 33, 20, 29, 37, 36, 20, 22, 25, 29, 38, 20, 41, 37, 37, 21, 26, 20, 37, 20, 30],
        "1Chr": [54, 55, 24, 43, 41, 66, 40, 40, 44, 14, 47, 41, 14, 17, 29, 43, 27, 17, 19, 8, 30, 19, 32, 31, 31, 32, 34, 21, 30],
        "2Chr": [18, 17, 17, 22, 14, 42, 22, 18, 31, 19, 23, 16, 23, 14, 19, 14, 19, 34, 11, 37, 20, 12, 21, 27, 28, 23, 9, 27, 36, 27, 21, 33, 25, 33, 27, 23],
        "Neh": [11, 20, 38, 17, 19, 19, 72, 18, 37, 40, 36, 47, 31],
        "Job": [22, 13, 26, 21, 27, 30, 21, 22, 35, 22, 20, 25, 28, 22, 35, 22, 16, 21, 29, 29, 34, 30, 17, 25, 6, 14, 23, 28, 25, 31, 40, 22, 33, 37, 16, 33, 24, 41, 30, 32, 26, 17],
        "Ps": [6, 11, 9, 9, 13, 11, 18, 10, 21, 18, 7, 9, 6, 7, 5, 11, 15, 51, 15, 10, 14, 32, 6, 10, 22, 12, 14, 9, 11, 13, 25, 11, 22, 23, 28, 13, 40, 23, 14, 18, 14, 12, 5, 27, 18, 12, 10, 15, 21, 23, 21, 11, 7, 9, 24, 14, 12, 12, 18, 14, 9, 13, 12, 11, 14, 20, 8, 36, 37, 6, 24, 20, 28, 23, 11, 13, 21, 72, 13, 20, 17, 8, 19, 13, 14, 17, 7, 19, 53, 17, 16, 16, 5, 23, 11, 13, 12, 9, 9, 5, 8, 29, 22, 35, 45, 48, 43, 14, 31, 7, 10, 10, 9, 8, 18, 19, 2, 29, 176, 7, 8, 9, 4, 8, 5, 6, 5, 6, 8, 8, 3, 18, 3, 3, 21, 26, 9, 8, 24, 14, 10, 8, 12, 15, 21, 10, 20, 14, 9, 6],
        "Eccl": [18, 26, 22, 17, 19, 12, 29, 17, 18, 20, 10, 14],
        "Song": [17, 17, 11, 16, 16, 12, 14, 14],
        "Isa": [31, 22, 26, 6, 30, 13, 25, 23, 20, 34, 16, 6, 22, 32, 9, 14, 14, 7, 25, 6, 17, 25, 18, 23, 12, 21, 13, 29, 24, 33, 9, 20, 24, 17, 10, 22, 38, 22, 8, 31, 29, 25, 28, 28, 25, 13, 15, 22, 26, 11, 23, 15, 12, 17, 13, 12, 21, 14, 21, 22, 11, 12, 19, 11, 25, 24],
        "Jer": [19, 37, 25, 31, 31, 30, 34, 23, 25, 25, 23, 17, 27, 22, 21, 21, 27, 23, 15, 18, 14, 30, 40, 10, 38, 24, 22, 17, 32, 24, 40, 44, 26, 22, 19, 32, 21, 28, 18, 16, 18, 22, 13, 30, 5, 28, 7, 47, 39, 46, 64, 34],
        "Ezek": [28, 10, 27, 17, 17, 14, 27, 18, 11, 22, 25, 28, 23, 23, 8, 63, 24, 32, 14, 44, 37, 31, 49, 27, 17, 21, 36, 26, 21, 26, 18, 32, 33, 31, 15, 38, 28, 23, 29, 49, 26, 20, 27, 31, 25, 24, 23, 35],
        "Dan": [21, 49, 100, 34, 30, 29, 28, 27, 27, 21, 45, 13, 64, 42],
        "Hos": [9, 25, 5, 19, 15, 11, 16, 14, 17, 15, 11, 15, 15, 10],
        "Joel": [20, 27, 5, 21],
        "Jonah": [16, 11, 10, 11],
        "Mic": [16, 13, 12, 14, 14, 16, 20],
        "Nah": [14, 14, 19],
        "Zech": [17, 17, 10, 14, 11, 15, 14, 23, 17, 12, 17, 14, 9, 21],
        "Mal": [14, 17, 24],
        "Acts": [26, 47, 26, 37, 42, 15, 60, 40, 43, 49, 30, 25, 52, 28, 41, 40, 34, 28, 40, 38, 40, 30, 35, 27, 27, 32, 44, 31],
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21],
        "Tob": [22, 14, 17, 21, 22, 18, 17, 21, 6, 13, 18, 22, 18, 15],
        "Sir": [30, 18, 31, 31, 15, 37, 36, 19, 18, 31, 34, 18, 26, 27, 20, 30, 32, 33, 30, 31, 28, 27, 27, 33, 26, 29, 30, 26, 28, 25, 31, 24, 33, 31, 26, 31, 31, 34, 35, 30, 22, 25, 33, 23, 26, 20, 25, 25, 16, 29, 30],
        "Bar": [22, 35, 38, 37, 9, 72],
        "2Macc": [36, 32, 40, 50, 27, 31, 42, 36, 29, 38, 38, 46, 26, 46, 39]
      }
    },
    nlt: {
      chapters: {
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]
      }
    },
    nrsv: {
      chapters: {
        "2Cor": [24, 17, 18, 18, 21, 18, 16, 24, 15, 18, 33, 21, 13],
        "Rev": [20, 29, 22, 11, 14, 17, 17, 13, 21, 11, 19, 18, 18, 20, 8, 21, 18, 24, 21, 15, 27, 21]
      }
    }
  };

  bcv_parser.prototype.languages = ["tr"];

  bcv_parser.prototype.regexps.space = "[\\s\\xa0]";

  bcv_parser.prototype.regexps.escaped_passage = /(?:^|[^\x1f\x1e\dA-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:ch(?:apters?|a?pts?\.?|a?p?s?\.?)?\s*\d+\s*(?:[\u2013\u2014\-]|through|thru|to)\s*\d+\s*(?:from|of|in)(?:\s+the\s+book\s+of)?\s*)|(?:ch(?:apters?|a?pts?\.?|a?p?s?\.?)?\s*\d+\s*(?:from|of|in)(?:\s+the\s+book\s+of)?\s*)|(?:\d+(?:th|nd|st)\s*ch(?:apter|a?pt\.?|a?p?\.?)?\s*(?:from|of|in)(?:\s+the\s+book\s+of)?\s*))?\x1f(\d+)(?:\/\d+)?\x1f(?:\/\d+\x1f|[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014]|ba[şs]l[İIiı]k(?![a-z])|b[öo]l[üu]mler|b[öo]l[üu]m|ayet[İIi]|[İIi]le|baplar|b[öo]|ayet|bap|a\.|bp|vs|vd|ve|[b-e](?!\w)|$)+)/gi;

  bcv_parser.prototype.regexps.match_end_split = /\d\W*ba[şs]l[İIiı]k|\d\W*(?:vs|vd)(?:[\s\xa0*]*\.)?|\d[\s\xa0*]*[b-e](?!\w)|\x1e(?:[\s\xa0*]*[)\]\uff09])?|[\d\x1f]/gi;

  bcv_parser.prototype.regexps.control = /[\x1e\x1f]/g;

  bcv_parser.prototype.regexps.pre_book = "[^A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ]";

  bcv_parser.prototype.regexps.first = "(?:1|I|B[İIi]r|B[İIi]r[İIi]nc[İIi]|[İIi]lk)\\.?" + bcv_parser.prototype.regexps.space + "*";

  bcv_parser.prototype.regexps.second = "(?:2|II|[İIi]k[İIi]|[İIi]k[İIi]nc[İIi])\\.?" + bcv_parser.prototype.regexps.space + "*";

  bcv_parser.prototype.regexps.third = "(?:3|III|[ÜU][çc]|[ÜU][çc][üu]nc[üu])\\.?" + bcv_parser.prototype.regexps.space + "*";

  bcv_parser.prototype.regexps.range_and = "(?:[&\u2013\u2014-]|ve|[İIi]le)";

  bcv_parser.prototype.regexps.range_only = "(?:[\u2013\u2014-]|[İIi]le)";

  bcv_parser.prototype.regexps.get_books = function(include_apocrypha, case_sensitive) {
    var book, books, k, len, out;
    books = [
      {
        osis: ["Ps"],
        apocrypha: true,
        extra: "2",
        regexp: /(\b)(Ps151)(?=\.1)/g
      }, {
        osis: ["Gen"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yar(?:at[Iİı]l(?:[Iİı][sş]))?|Ba[sş](?:lang(?:[Iİı][cç])?)|Tekv[Iİ]n|Gen)|Ba[sş]|(?:Yarat(?:il[iİIı][sş]|[İIı]li[şs])|Tekvin|Ba[şs]langi[cç]))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Exod"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Exod|M[Iİı]s(?:[Iİı]r(?:dan[\\s\\xa0]*(?:[CÇ](?:[Iİı]k(?:[Iİı][sş]))|['’]dan[\\s\\xa0]*(?:[CÇ](?:[Iİı]k(?:[Iİı][sş]))))))|[CÇ](?:[Iİı]k))|M[Iİı]s(?:[Iİı]r(?:['’]dan[\\s\\xa0]*(?:[CÇ](?:[Iİı]k(?:[Iİı][sş])))))|(?:M(?:is[İıiI]r(?:(?:['’]dan[\\s\\xa0]*(?:[ÇC](?:[ıiIİ]k(?:[İıiI][sş])))|dan[\\s\\xa0]*[CÇ](?:[iİIı]k(?:[İIiı][sş]))))|[Iıİ]s(?:(?:[ıIİ]r(?:dan[\\s\\xa0]*(?:[CÇ](?:(?:[ıİI]ki[sş]|ik[iıIİ][sş]))|[’']dan[\\s\\xa0]*(?:[CÇ](?:(?:[Iİı]ki[sş]|ik[İiıI][şs])))))|ir(?:[’']dan[\\s\\xa0]*(?:[ÇC](?:[Iİiı]k(?:[İıiI][şs])))|dan[\\s\\xa0]*[CÇ](?:[iıİI]k(?:[ıİIi][sş]))))))|(?:[CÇ](?:ik(?:[iıİI][sş])?|[Iİı]k(?:[iIİı][sş]))))|M[Iİı]s(?:[ıIİ]r(?:[’']dan[\\s\\xa0]*(?:[CÇ](?:(?:[Iİı]ki[sş]|ik[İiıI][şs]))))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Bel"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Bel(?:[\\s\\xa0]*ve[\\s\\xa0]*Ejderha)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Lev"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Lev(?:[Iiİ]l(?:[Iiİ]ler)|ılıler)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Num"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:[CÇ](?:[oö]lde[\\s\\xa0]*Say(?:[Iİı]m))|Say(?:[Iİı]lar)?|Num)|(?:[CÇ](?:[öo]lde[\\s\\xa0]*Sayim)|Sayilar))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Sir"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(S(?:ir(?:ak)?|[Iİı]rak))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Wis"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:B[Iiİ]lgel(?:[Iiİ]k)|Wis))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Lam"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yeremya(?:['’]n(?:[Iİı]n[\\s\\xa0]*Mers(?:[Iİ]yeler[Iİ]))|n[Iİı]n[\\s\\xa0]*Mers(?:[Iİ]yeler[Iİ]))|Lam|A(?:[gğ](?:[Iİı](?:t(?:lar)?)?)))|(?:Yeremya(?:(?:['’]n(?:(?:[İıI]n[\\s\\xa0]*Mers(?:iyeler[iIİ]|[Iİ]yeleri))|in[\\s\\xa0]*Mers[İiI]yeler[İiI]))|n(?:(?:[ıIİ]n[\\s\\xa0]*Mers(?:iyeler[Iİi]|[Iİ]yeleri))|in[\\s\\xa0]*Mers[İiI]yeler[İIi]))|A(?:[gğ]i(?:t(?:lar)?)?)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["EpJer"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yeremya(?:n[Iiİı]n[\\s\\xa0]*Mektubu|['’]n(?:[Iiİı]n[\\s\\xa0]*Mektubu))|EpJer))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Rev"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Rev|Va(?:h(?:[Iiİ]y)?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["PrMan"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:PrMan|Mana[sş](?:[sş]e(?:(?:['’]n(?:[Iİ]n[\\s\\xa0]*Duas[Iİı])|n[Iİ]n[\\s\\xa0]*Duas[Iİı]))))|Mana[sş](?:[şs]e(?:(?:[’']n(?:(?:[İI]n[\\s\\xa0]*Duasi|in[\\s\\xa0]*Duas[iİıI]))|n(?:[Iİ]n[\\s\\xa0]*Duasi|in[\\s\\xa0]*Duas[İiIı])))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Deut"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Kunun(?:un[\\s\\xa0]*Tekrar[Iİı]|['’]un[\\s\\xa0]*Tekrar[Iİı])|Tesn[Iİ]ye|Yas(?:a(?:['’]n(?:[Iİı]n[\\s\\xa0]*Tekrar[Iİı])|n[Iİı]n[\\s\\xa0]*Tekrar[Iİı]))?|Deut)|(?:Kunun(?:['’]un[\\s\\xa0]*Tekrari|un[\\s\\xa0]*Tekrari)|Yasa(?:n(?:in[\\s\\xa0]*Tekrar[ıİIi]|[Iİı]n[\\s\\xa0]*Tekrari)|(?:[’']n(?:in[\\s\\xa0]*Tekrar[Iıiİ]|[Iİı]n[\\s\\xa0]*Tekrari)))|Tesniye))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Josh"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Y(?:[sş]u|e[sş]u)|Josh))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Judg"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:H(?:ak(?:[Iiİ]mler)?|âk[Iiİ]mler)|Judg))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Ruth"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ruth?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["1Esd"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:1(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras|Esd)|B(?:[Iİ]r(?:[\s\xa0]*Esdras|[Iİ]nc(?:[Iİ][\s\xa0]*Esdras)))|I(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras|lk[\s\xa0]*Esdras)|İlk[\s\xa0]*Esdras)|(?:B(?:[İI]r(?:inc(?:[iIİ][\s\xa0]*Esdras|[İI]nci[\s\xa0]*Esdras))|ir(?:[\s\xa0]*Esdras|[İIi]nc(?:[iIİ][\s\xa0]*Esdras)))|ilk[\s\xa0]*Esdras)|B[İI]r(?:[İI]nci[\s\xa0]*Esdras))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Esd"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:2(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras|Esd)|I(?:k(?:[Iİ](?:[\s\xa0]*Esdras|nc[Iİ][\s\xa0]*Esdras))|I(?:\.[\s\xa0]*Esdras|[\s\xa0]*Esdras))|İk(?:[Iİ](?:[\s\xa0]*Esdras|nc[Iİ][\s\xa0]*Esdras)))|(?:ik(?:[İiI](?:[\s\xa0]*Esdras|nc[iİI][\s\xa0]*Esdras))|(?:[İI]k(?:i(?:[\s\xa0]*Esdras|nc[Iİi][\s\xa0]*Esdras)|[İI]nci[\s\xa0]*Esdras))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Isa"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:I(?:sa(?:ya)?|şaya)|[iİ](?:[sş]aya)|Y(?:e[sş]aya|[sş]a)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Sam"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])(2Sam|(?:2(?:\.[\s\xa0]*Sa(?:muel)?|[\s\xa0]*Sa(?:muel)?|Sa)|I(?:k[Iİ](?:nc(?:[Iİ][\s\xa0]*Samuel|[\s\xa0]*Samuel))|I(?:\.[\s\xa0]*Samuel|[\s\xa0]*Samuel))|İk[Iİ](?:nc(?:[Iİ][\s\xa0]*Samuel|[\s\xa0]*Samuel)))|[Iİ]k(?:[Iİ][\s\xa0]*Samuel)|(?:[İI]k(?:(?:[Iİ]nci[\s\xa0]*Samuel|i(?:nc[Iiİ][\s\xa0]*Samuel|[\s\xa0]*Samuel)))|ik[İiI](?:nc(?:[İIi][\s\xa0]*Samuel|[\s\xa0]*Samuel)))|ik(?:[İiI][\s\xa0]*Samuel))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Sam"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])(1Sam|(?:İlk[\s\xa0]*Samuel|1(?:\.[\s\xa0]*Sa(?:muel)?|[\s\xa0]*Sa(?:muel)?|Sa)|I(?:lk[\s\xa0]*Samuel|\.[\s\xa0]*Samuel|[\s\xa0]*Samuel)|B[Iİ]r(?:(?:[Iİ]nc(?:[Iİ][\s\xa0]*Samuel)|[\s\xa0]*Samuel)))|(?:ilk[\s\xa0]*Samuel|B(?:ir(?:[iIİ]nc(?:[İiI][\s\xa0]*Samuel)|[\s\xa0]*Samuel)|[Iİ]r(?:inc(?:[Iİi][\s\xa0]*Samuel|[İI]nci[\s\xa0]*Samuel))))|B[İI]r(?:[İI]nci[\s\xa0]*Samuel))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Kgs"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:2(?:\.[\s\xa0]*K(?:r(?:allar)?|[Iİı]rallar)|K(?:gs|r)|[\s\xa0]*K(?:r(?:allar)?|[Iİı]rallar))|I(?:k(?:[Iİ](?:[\s\xa0]*K(?:rallar|[Iİı]rallar)|nc(?:[Iİ][\s\xa0]*K(?:rallar|[Iİı]rallar))))|I(?:\.[\s\xa0]*K(?:rallar|[Iİı]rallar)|[\s\xa0]*K(?:rallar|[Iİı]rallar)))|İk(?:[Iİ](?:[\s\xa0]*K(?:rallar|[Iİı]rallar)|nc(?:[Iİ][\s\xa0]*K(?:rallar|[Iİı]rallar)))))|(?:2(?:[\s\xa0]*Kirallar|\.[\s\xa0]*Kirallar)|ik(?:[iİI](?:[\s\xa0]*K(?:rallar|[iIıİ]rallar)|nc(?:[Iİi][\s\xa0]*K(?:rallar|[Iiİı]rallar))))|I(?:k(?:(?:[Iİ](?:[\s\xa0]*Kirallar|nc(?:i[\s\xa0]*K(?:rallar|[Iıiİ]rallar)|[İI][\s\xa0]*Kirallar)))|i(?:[\s\xa0]*K(?:rallar|[ıIİi]rallar)|nc(?:[iIİ][\s\xa0]*K(?:rallar|[ıIİi]rallar))))|I(?:[\s\xa0]*Kirallar|\.[\s\xa0]*Kirallar))|İk(?:(?:[Iİ](?:[\s\xa0]*Kirallar|nc(?:i[\s\xa0]*K(?:rallar|[iıIİ]rallar)|[İI][\s\xa0]*Kirallar)))|i(?:[\s\xa0]*K(?:rallar|[iıIİ]rallar)|nc(?:[iIİ][\s\xa0]*K(?:rallar|[iİıI]rallar))))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Kgs"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:I(?:\.[\s\xa0]*K(?:rallar|[Iİı]rallar)|[\s\xa0]*K(?:rallar|[Iİı]rallar)|lk[\s\xa0]*K(?:rallar|[Iİı]rallar))|1(?:\.[\s\xa0]*K(?:r(?:allar)?|[Iİı]rallar)|K(?:gs|r)|[\s\xa0]*K(?:r(?:allar)?|[Iİı]rallar))|İlk[\s\xa0]*K(?:rallar|[Iİı]rallar)|B(?:[Iİ]r(?:(?:[Iİ]nc(?:[Iİ][\s\xa0]*K(?:rallar|[Iİı]rallar)))|[\s\xa0]*K(?:rallar|[Iİı]rallar))))|(?:B(?:(?:[Iİ]r(?:[\s\xa0]*Kirallar|(?:[Iİ]nc(?:i[\s\xa0]*K(?:rallar|[Iİiı]rallar)|[İI][\s\xa0]*Kirallar))|inc(?:[Iİi][\s\xa0]*K(?:rallar|[iİıI]rallar))))|ir(?:[\s\xa0]*K(?:rallar|[İiıI]rallar)|(?:[Iİi]nc(?:[İIi][\s\xa0]*K(?:rallar|[İiıI]rallar)))))|1(?:[\s\xa0]*Kirallar|\.[\s\xa0]*Kirallar)|I(?:[\s\xa0]*Kirallar|lk[\s\xa0]*Kirallar|\.[\s\xa0]*Kirallar)|ilk[\s\xa0]*K(?:rallar|[Iıİi]rallar)|İlk[\s\xa0]*Kirallar))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Chr"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:İk[Iİ](?:nc(?:[Iİ][\s\xa0]*Tar(?:[Iİ]hler)|[\s\xa0]*Tar[Iİ]hler))|2(?:\.[\s\xa0]*Ta(?:r[Iİ]hler)?|[\s\xa0]*Ta(?:r[Iİ]hler)?|Chr|Ta)|I(?:k[Iİ](?:nc(?:[Iİ][\s\xa0]*Tar(?:[Iİ]hler)|[\s\xa0]*Tar[Iİ]hler))|I(?:\.[\s\xa0]*Tar[Iİ]hler|[\s\xa0]*Tar[Iİ]hler)))|[Iİ]k(?:[Iİ][\s\xa0]*Tar(?:[Iİ]hler))|(?:İk(?:[Iİ](?:nc(?:i[\s\xa0]*Tar(?:[iİI]hler|[İI][\s\xa0]*Tarihler)|[\s\xa0]*Tarihler))|i(?:nc[Iiİ][\s\xa0]*Tar(?:[iIİ]hler)|[\s\xa0]*Tar[iİI]hler))|ik[Iiİ](?:nc(?:[Iiİ][\s\xa0]*Tar(?:[İIi]hler)|[\s\xa0]*Tar[iIİ]hler))|2(?:[\s\xa0]*Tarihler|\.[\s\xa0]*Tarihler)|I(?:I(?:[\s\xa0]*Tarihler|\.[\s\xa0]*Tarihler)|k(?:[Iİ](?:nc(?:i[\s\xa0]*Tar(?:[iIİ]hler|[Iİ][\s\xa0]*Tarihler)|[\s\xa0]*Tarihler))|i(?:nc[Iİi][\s\xa0]*Tar(?:[iIİ]hler)|[\s\xa0]*Tar[Iİi]hler))))|(?:[İI]k(?:[Iİ](?:nc(?:[İI][\s\xa0]*Tarihler|[\s\xa0]*Tarihler)))|ik[Iiİ][\s\xa0]*Tar(?:[iIİ]hler))|[İI]k(?:[Iİ][\s\xa0]*Tarihler))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Chr"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:B[Iİ]r(?:(?:[Iİ]nc(?:[Iİ][\s\xa0]*Tar(?:[Iİ]hler))|[\s\xa0]*Tar[Iİ]hler))|İlk[\s\xa0]*Tar[Iİ]hler|1(?:\.[\s\xa0]*Ta(?:r[Iİ]hler)?|[\s\xa0]*Ta(?:r[Iİ]hler)?|Chr|Ta)|I(?:\.[\s\xa0]*Tar[Iİ]hler|lk[\s\xa0]*Tar[Iİ]hler|[\s\xa0]*Tar[Iİ]hler))|(?:ilk[\s\xa0]*Tar[iİI]hler|B(?:ir(?:[Iiİ]nc(?:[İiI][\s\xa0]*Tar(?:[İiI]hler))|[\s\xa0]*Tar[Iİi]hler)|[Iİ]r(?:(?:[Iİ]nc(?:i[\s\xa0]*Tar(?:[iIİ]hler|[Iİ][\s\xa0]*Tarihler))|inc[iİI][\s\xa0]*Tar(?:[Iİi]hler)|[\s\xa0]*Tarihler)))|I(?:lk[\s\xa0]*Tarihler|[\s\xa0]*Tarihler|\.[\s\xa0]*Tarihler)|1(?:[\s\xa0]*Tarihler|\.[\s\xa0]*Tarihler)|İlk[\s\xa0]*Tarihler)|B[Iİ]r(?:[Iİ]nc(?:[Iİ][\s\xa0]*Tarihler)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Ezra"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ezra?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Neh"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Neh(?:emya)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["GkEsth"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yunanca[\\s\\xa0]*Ester|G(?:kEsth|rek[cç]e[\\s\\xa0]*Ester)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Esth"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Est(?:er|h)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Job"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Job|Ey[uü][bp]?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Ps"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Zebur|Ps|Mez(?:mur(?:lar)?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["PrAzar"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Azarya(?:n[Iİı]n[\\s\\xa0]*Duas[Iİı]|['’]n(?:[Iİı]n[\\s\\xa0]*Duas[Iİı]))|PrAzar)|Azarya(?:n(?:[İıI]n[\\s\\xa0]*Duasi|in[\\s\\xa0]*Duas[iıIİ])|[’']n(?:(?:[ıIİ]n[\\s\\xa0]*Duasi|in[\\s\\xa0]*Duas[ıİIi]))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Prov"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:S(?:[uü]leyman(?:(?:[Iİı]n[\\s\\xa0]*(?:Meseller[Iİ]|[OÖ]zdey(?:[Iİ](?:[sş]ler[Iİ]))))|(?:['’](?:[Iİı]n[\\s\\xa0]*(?:Meseller[Iİ]|[OÖ]zdey(?:[Iİ](?:[sş]ler[Iİ])))))))|Prov|[OÖ]zd|Meseller)|S[uü]leyman(?:(?:['’](?:in[\\s\\xa0]*(?:(?:[OÖ]zdey(?:[Iiİ](?:[sş]ler[iIİ]))|Meseller[İiI])|(?:[ıİI]n[\\s\\xa0]*(?:Meselleri|[ÖO]zdey(?:i(?:[sş]ler[Iİi]|[İI](?:[sş]leri)))))))|in[\\s\\xa0]*(?:[OÖ]zdey(?:[İiI](?:[sş]ler[İIi]))|Meseller[İiI])|(?:[İıI]n[\\s\\xa0]*(?:Meselleri|[ÖO]zdey(?:i(?:[şs]ler[iIİ]|[Iİ](?:[şs]leri)))))))|S[üu]leyman(?:(?:[Iıİ]n[\\s\\xa0]*(?:[OÖ]zdey(?:[İI](?:[şs]leri)))|(?:['’](?:[Iİı]n[\\s\\xa0]*(?:Meselleri|[OÖ]zdey(?:i(?:[şs]ler[İiI]|[İI](?:[sş]leri))))))))|S[uü]leyman(?:[’'](?:[İIı]n[\\s\\xa0]*(?:[ÖO]zdey(?:[İI](?:[şs]leri))))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Eccl"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Va[Iiİ]z?|Eccl))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["SgThree"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:SgThree|[UÜ](?:[cç][\\s\\xa0]*Gen(?:[cç][\\s\\xa0]*Adam(?:[Iİı]n[\\s\\xa0]*Ezg(?:[Iİ]s[Iİ])))))|[UÜ](?:[çc][\\s\\xa0]*Gen(?:[cç][\\s\\xa0]*Adam(?:in[\\s\\xa0]*Ezg(?:[iIİ]s[iİI]|[ıİI]n[\\s\\xa0]*Ezg(?:(?:[Iİ]si|is[İIi]))))))|[UÜ](?:[çc][\\s\\xa0]*Gen(?:[çc][\\s\\xa0]*Adam(?:[Iıİ]n[\\s\\xa0]*Ezg(?:(?:[Iİ]si|is[iİI]))))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Song"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Song|Ne[sş](?:[Iİ]deler[\\s\\xa0]*Ne(?:[sş](?:[Iİ]des[Iİ])))|Ezg[Iİ]ler[\\s\\xa0]*Ezg(?:[Iİ]s[Iİ])?)|Ezg|(?:Ne[sş](?:ideler[\\s\\xa0]*Ne(?:[sş](?:[İIi]des[Iiİ])|[İI]deler[\\s\\xa0]*Ne(?:[şs](?:(?:[Iİ]desi|ides[Iiİ])))))|Ezg(?:iler[\\s\\xa0]*Ezg[iİI]s[Iiİ]|[İI]ler[\\s\\xa0]*Ezg(?:(?:[İI]si|is[İIi]))))|Ne[sş](?:[İI]deler[\\s\\xa0]*Ne(?:[şs](?:(?:[Iİ]desi|ides[Iiİ])))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jer"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yer(?:emya)?|Jer))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Ezek"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Hez(?:ek[Iiİ]el)?|Ezek))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Dan"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Dan(?:[Iiİ]el)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Hos"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ho(?:[sş](?:ea)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Joel"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yoel?|Joel))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Amos"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Amos?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Obad"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(O(?:va(?:dya)?|bad(?:ya)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jonah"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yun(?:us)?|Jonah))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Mic"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(M(?:[Iİ]ka?|i(?:c|ka?)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Nah"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Nah(?:um)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Hab"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Hab(?:akkuk)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Zeph"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Sef(?:anya)?|Tsefanya|Zeph))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Hag"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Hag(?:gay|ay)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Zech"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Ze(?:ch|k[ae]r(?:(?:[Iiİ]ya|ya))?)|Zek)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Mal"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Mal(?:ak[Iiİ])?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Matt"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Matta(?:['’](?:n(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|[Iİ]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ])))|Matta['’](?:(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|Mat(?:t(?:a(?:ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))|[Iİ]nc(?:[Iİ]l[Iİ])|[’']ya[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l)))|n[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[ıu]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))?)?|Matta(?:'(?:İn[\\s\\xa0]*(?:inc(?:IlI|İl[İi]|ilİ)|İnc(?:İli|il[Iİ]))|a[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:İncil|inc[İi]l))|n(?:in[\\s\\xa0]*(?:Inc(?:İli|Ilİ)|İnc(?:Ili|İl[Iİ]|ilİ)|incIli)|un[\\s\\xa0]*(?:Incilİ|İnc(?:İli|il[İI])|inc(?:ili|İl[Iİ]))|ın[\\s\\xa0]*(?:IncIli|İnc(?:İli|il[iİ])|inc(?:İl[iİ]|ilİ))|In[\\s\\xa0]*incİlİ|İn[\\s\\xa0]*(?:inc(?:ilI|İlİ)|Inc(?:İli|ilİ)|İnc(?:İli|il[Iİ])))|un[\\s\\xa0]*(?:inc(?:İl[İi]|Il[Iİ])|İnc(?:İli|il[Iİ]))|ın[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|inc(?:IlI|[İi]lİ)|Incİli)|In[\\s\\xa0]*(?:İncil[İI]|incIlİ)|in[\\s\\xa0]*(?:İncİl[İi]|Inc[iİ]li|incİlİ))|’(?:n(?:İn[\\s\\xa0]*(?:inc(?:IlI|İl[İI]|ilİ)|İnc(?:İli|il[İI]))|in[\\s\\xa0]*(?:İncİlİ|inc(?:İl[iİ]|ilİ))|In[\\s\\xa0]*(?:incili|İnc(?:[Iİ]li|ilİ))|un[\\s\\xa0]*(?:incİl[iİ]|Incil[İi]|İnc(?:İli|il[Iİ]))|ın[\\s\\xa0]*(?:Inc[iİ]li|İnc(?:[Iİ]li|ilİ)|inc[iİ]lİ))|In[\\s\\xa0]*İncİli|İn[\\s\\xa0]*(?:inc[iİ]l[iİ]|İnc(?:İli|il[İi]))|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[Iİ]l)|ore[\\s\\xa0]*(?:[Iİ]ncil|incİl))|un[\\s\\xa0]*(?:incİl[iİ]|Incil[iİ]|İnc(?:[İI]li|ilİ))|ın[\\s\\xa0]*(?:Incİli|İnc(?:İli|il[İi])|inc(?:il[Iİ]|İlİ))|in[\\s\\xa0]*(?:incİl[Iİ]|Incil[iİ]|İnc(?:Il[iİ]|İlİ)))|İn[\\s\\xa0]*(?:IncilI|İnc(?:İli|il[İi])|inc(?:İl[İi]|Ilİ)))|Matta(?:’(?:un[\\s\\xa0]*(?:İncil[iI]|inc(?:İlI|[Ii]l[Iiİ])|Inc(?:[İI]li|ilI))|ın[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:Ili|il[İiI])|inc(?:ili|Il[İiI]|İl[Ii]))|in[\\s\\xa0]*(?:Inc(?:ilI|[İI]l[İIi])|inc(?:İli|[iI]l[İIi])|İnc(?:IlI|il[Iiİ]|İl[iI]))|In[\\s\\xa0]*(?:Inc(?:[Iİ]li|il[İiI])|inc[Iiİ]l[iİI]|İnc(?:Ili|il[iIİ]))|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*[Ii]ncil|ore[\\s\\xa0]*inc[Ii]l)|İn[\\s\\xa0]*(?:İnc(?:Ili|ilI)|inc(?:[İi]lI|Il[İIi])|Inc(?:[İI]li|il[Iİi]))|n(?:in[\\s\\xa0]*(?:Inc[iİI]l[Iİi]|İnc(?:[Ii]l[Iİi]|İl[iI])|inc(?:İlI|Il[iIİ]|il[iI]))|un[\\s\\xa0]*(?:İnc[Ii]li|inc(?:İlI|[iI]l[iIİ])|Inc(?:[İI]li|ilI))|İn[\\s\\xa0]*(?:İnc[Ii]li|Inc(?:[Iİ]li|il[iIİ])|inc(?:İli|Il[iİ]|il[iI]))|ın[\\s\\xa0]*(?:inc(?:Il[Iİi]|[İi]l[iI])|İncil[Ii]|Inc(?:Ili|il[Iİ]))|In[\\s\\xa0]*(?:Inc(?:[İI]li|il[Iiİ])|inc(?:[İI]l[İiI]|il[Iİ])|İncil[iI])))|'(?:n(?:in[\\s\\xa0]*(?:inc(?:[iİ]l[Iiİ]|Il[Iİ])|Inc(?:il[İiI]|İl[Iİ]|Il[iI])|İnc(?:İli|Il[İI]|il[Ii]))|un[\\s\\xa0]*(?:inc(?:İli|Il[iIİ]|il[Iİ])|İnc[Ii]li|Inc(?:[İI]li|il[Ii]))|In[\\s\\xa0]*(?:[Iİ]nc(?:(?:[Iİ]li|il[iİI]))|inc(?:[Ii]l[iIİ]|İl[iI]))|ın[\\s\\xa0]*(?:Inc(?:İli|il[İIi])|İnc(?:Ili|ilI)|inc(?:İlI|Il[iİI]|il[iI]))|İn[\\s\\xa0]*(?:İnc[iI]li|inc(?:Il[iIİ]|il[iİ]|İl[Ii])|Inc(?:Ili|il[iI])))|İn[\\s\\xa0]*(?:İnc[iI]li|Inc(?:[Iİ]li|il[Iİi])|inc(?:İlI|Il[İi]|il[Ii]))|in[\\s\\xa0]*(?:Inc(?:Il[İIi]|[iİ]l[İI])|inc(?:[Ii]l[İIi]|İl[Ii])|İnc(?:İlI|[iI]l[İIi]))|a[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:incIl|Incil))|In[\\s\\xa0]*(?:Inc(?:[İI]li|il[iİI])|inc(?:[iİ]l[Iİi]|Il[Ii])|İnc[Iİi]li)|ın[\\s\\xa0]*(?:İncil[iI]|inc(?:Il[iİ]|[İi]l[Ii])|Inc(?:Ili|il[Iİi]))|un[\\s\\xa0]*(?:İnc[Ii]li|inc(?:Ili|İlI|il[iİI])|Inc(?:[Iİ]li|il[iİI])))|İn[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:[Iİ]li|il[iİ])|inc(?:İlI|il[iIİ]|Il[iI])))|Matta(?:ın[\\s\\xa0]*(?:inc(?:ilI|İl[Iİ]|Ilİ)|İnc(?:İli|il[iİ]))|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[Iİ]l)|ore[\\s\\xa0]*(?:İncil|inc[iİ]l))|n(?:In[\\s\\xa0]*incili|in[\\s\\xa0]*(?:İnc(?:IlI|İl[Iİ]|ilİ)|Inc(?:İl[Iİ]|ilİ))|ın[\\s\\xa0]*(?:incİl[Iİ]|Incil[İI]|İnc(?:[İI]li|ilİ))|un[\\s\\xa0]*(?:Incili|İnc(?:İli|il[Iİ])|inc(?:İl[Iİ]|Ilİ))|İn[\\s\\xa0]*(?:IncIli|İnc(?:[İI]li|ilİ)|inc(?:İl[Iİ]|Ilİ)))|in(?:[\\s\\xa0]*(?:İnc[iİ]l[iİ]|Incİli|inc(?:Il[iİ]|İlİ))|c(?:IlI|[iİ]lİ))|Incİli|İnc(?:İli|il[İI])|un[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|inc(?:ili|[Iİ]lİ)|Incİli)|ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:(?:[İI]ncil|incİl))|'ya[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:İncil|inc[Iİ]l))|’ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[Iİ]l)|ore[\\s\\xa0]*(?:İncil|inc[iİ]l)))|Matta(?:ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*inc(?:[Ii]l)|İnc[iI]li|in(?:c(?:Il[İi]|[İi]l[iI])|[\\s\\xa0]*(?:İnc(?:[iİ]lI|Il[İIi])|Inc(?:[iI]l[İIi]|İl[Iİ])|inc(?:IlI|il[iİI]|İl[Ii])))|ın[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:[İI]li|il[iIİ])|inc(?:İli|il[İi]|Il[iI]))|’ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*[iI]ncil|ore[\\s\\xa0]*(?:incIl|Incil))|'ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Ii]ncil)|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*[iI]ncil|ore[\\s\\xa0]*(?:incIl|Incil))|un[\\s\\xa0]*(?:İncil[iI]|inc(?:il[İI]|[İI]l[iI])|Inc(?:Ili|il[İIi]))|n(?:ın[\\s\\xa0]*(?:İncil[Ii]|inc(?:İli|[Ii]l[iIİ])|Inc[İiI]li)|In[\\s\\xa0]*(?:[Iİ]nc(?:(?:[İI]li|il[Iİi]))|inc(?:[Iİ]l[Iİi]|il[İI]))|İn[\\s\\xa0]*(?:Inc(?:İli|il[iIİ])|İncil[Ii]|inc(?:İli|il[iIİ]|Il[iI]))|in[\\s\\xa0]*(?:inc[Iİi]l[İIi]|İnc(?:İli|Il[iİ]|il[Ii])|Inc(?:İli|Il[Iiİ]|il[iI]))|un[\\s\\xa0]*(?:İnc[Ii]li|Inc(?:[İI]li|il[İI])|inc(?:İli|il[iIİ]|Il[Ii])))|In(?:c(?:Ili|il[İIi])|[\\s\\xa0]*(?:[İI]nc(?:(?:[Iİ]li|il[Iİi]))|inc[İiI]l[iIİ])))?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Mark"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Markos(?:['’](?:n(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|[Iİ]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ])))|Markos['’](?:(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|Mar(?:k(?:os(?:ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))|[Iİ]nc(?:[Iİ]l[Iİ])|[’']ya[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l)))|n[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[ıu]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))?)?|Markos(?:'(?:a[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:İncil|inc[Iİ]l)|öre[\\s\\xa0]*(?:İncil|inc[iİ]l))|un[\\s\\xa0]*(?:inc(?:İl[iİ]|il[İI])|İnc(?:İli|il[Iİ]))|In[\\s\\xa0]*Inc(?:Ili|ilİ)|in[\\s\\xa0]*(?:İnc(?:ili|İl[iİ]|Ilİ)|incİlI|Incİlİ)|ın[\\s\\xa0]*(?:inc(?:İl[iİ]|il[Iİ])|İnc(?:[Iİ]li|ilİ))|İn[\\s\\xa0]*(?:incİl[iİ]|Incil[iİ]|İnc(?:İli|il[Iİ]))|n(?:In[\\s\\xa0]*(?:inc(?:Ili|İlİ)|[Iİ]ncilİ)|un[\\s\\xa0]*(?:Inc[iİ]li|İnc(?:İli|il[İI])|inc[iİ]lİ)|ın[\\s\\xa0]*(?:inc(?:İl[iİ]|Il[Iİ])|İnc(?:[Iİ]li|ilİ))|in[\\s\\xa0]*(?:incİli|İnc(?:ilI|İl[iİ]))|İn[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|inc(?:ilI|[Iİ]lİ)|Incİli)))|’(?:ın[\\s\\xa0]*(?:inc(?:Ili|İl[iİ]|ilİ)|İnc(?:İli|il[Iİ]))|n(?:ın[\\s\\xa0]*(?:Incilİ|inc(?:ilI|İl[Iİ])|İnc(?:İli|il[İi]))|in[\\s\\xa0]*(?:İnc(?:İl[İi]|il[Iİ])|Inc(?:İli|il[iİ]))|İn[\\s\\xa0]*(?:IncilI|İnc(?:İli|il[İI])|inc(?:İl[iİ]|ilİ))|In[\\s\\xa0]*incİlİ|un[\\s\\xa0]*(?:Incİli|İnc(?:İli|il[İi])|inc(?:Il[İi]|İlİ)))|a[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:İncil|inc[iİ]l)|öre[\\s\\xa0]*(?:[Iİ]ncil|incİl))|İn[\\s\\xa0]*(?:inc[Iİ]l[iİ]|İnc(?:İli|il[iİ]))|in[\\s\\xa0]*(?:inc(?:ili|Ilİ)|Incİlİ|İnc(?:İl[İi]|Ilİ))|un[\\s\\xa0]*(?:Inc[Iİ]li|İnc(?:İli|il[Iİ])|inc[Iİ]lİ)|In[\\s\\xa0]*(?:İncilI|Incİli))|İn[\\s\\xa0]*(?:Incili|İnc(?:[Iİ]li|ilİ)|inc(?:İl[iİ]|Ilİ)))|Markos(?:’(?:un[\\s\\xa0]*(?:İnc[Ii]li|Incil[İIi]|inc(?:il[iIİ]|[İI]l[iI]))|ın[\\s\\xa0]*(?:İnc[Ii]li|Inc(?:[Iİ]li|il[İIi])|inc(?:İlI|Il[İI]|il[iI]))|In[\\s\\xa0]*(?:İnc(?:[Iİ]li|il[İi])|inc[Iİi]l[İIi]|Inc(?:Ili|il[İiI]))|in[\\s\\xa0]*(?:inc(?:İl[iIİ]|il[İI]|Il[Ii])|Inc(?:[Ii]l[Iİi]|İl[iI])|İnc(?:İlI|il[Iİi]|Il[Ii]))|n(?:ın[\\s\\xa0]*(?:inc(?:İli|Il[İiI]|il[İi])|İnc(?:Ili|ilI)|Inc(?:[Iİ]li|il[iI]))|un[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:Ili|il[iIİ])|inc(?:IlI|il[İIi]|İl[Ii]))|In[\\s\\xa0]*(?:[Iİ]nc(?:(?:[İI]li|il[Iİi]))|inc(?:[iI]l[iIİ]|İl[Ii]))|in[\\s\\xa0]*(?:Inc(?:ilI|Il[İIi]|İl[İI])|İnc(?:ili|İlI|Il[Iİi])|inc[Iİi]l[iİI])|İn[\\s\\xa0]*(?:İnc[iI]li|Inc(?:[İI]li|il[iİ])|inc(?:İlI|Il[Iiİ]|il[iI])))|a[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:incIl|Incil)|öre[\\s\\xa0]*inc[Ii]l)|İn[\\s\\xa0]*(?:İnc(?:Ili|ilI)|inc(?:[İI]lI|il[İiI])|Inc(?:[Iİ]li|il[iIİ])))|'(?:in[\\s\\xa0]*(?:inc(?:[Ii]l[İiI]|İl[iİ])|İnc(?:İlI|il[İI]|Il[Ii])|Inc(?:[iI]l[İIi]|İl[iI]))|İn[\\s\\xa0]*(?:İnc[Ii]li|inc(?:İlI|[Ii]l[İiI])|Inc(?:[İI]li|ilI))|n(?:In[\\s\\xa0]*(?:[Iİ]nc(?:(?:[Iİ]li|il[iI]))|inc(?:il[Iiİ]|Il[Iİ]|İl[iI]))|ın[\\s\\xa0]*(?:inc(?:Ili|İlI|il[İiI])|Inc(?:[Iİ]li|il[Iiİ])|İncil[iI])|İn[\\s\\xa0]*(?:İncil[Ii]|inc(?:il[İi]|[İI]l[iI])|Inc(?:Ili|il[İIi]))|in[\\s\\xa0]*(?:İnc(?:İlI|Il[İIi]|il[iİ])|inc(?:[iI]l[İIi]|İl[İI])|Inc[İiI]l[İIi])|un[\\s\\xa0]*(?:İnc[Ii]li|inc(?:Il[iİI]|[İi]l[Ii])|Inc(?:Ili|il[İI])))|a[\\s\\xa0]*G(?:ore[\\s\\xa0]*[Ii]ncil|öre[\\s\\xa0]*(?:incIl|Incil))|ın[\\s\\xa0]*(?:inc(?:ili|İlI|Il[iİI])|Inc(?:[İI]li|il[İiI])|İncil[iI])|un[\\s\\xa0]*(?:İnc[iI]li|inc(?:ili|İlI|Il[iIİ])|Inc(?:[Iİ]li|il[Iiİ]))|In[\\s\\xa0]*(?:İnc(?:[Iİ]li|il[iİI])|inc[İIi]l[iİI]|Inc(?:İli|il[iI])))|İn[\\s\\xa0]*(?:Inc(?:[İI]li|il[Iİ])|İncil[iI]|inc(?:İlI|il[iİI]|Il[iI])))|Markos(?:a[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:İncil|inc[Iİ]l)|öre[\\s\\xa0]*(?:İncil|inc[iİ]l))|In(?:[\\s\\xa0]*(?:[İI]ncilİ|incİlI)|cili)|in(?:[\\s\\xa0]*(?:Inc(?:IlI|İlİ)|İnc(?:ilI|İl[İi]))|c(?:İl[Iİ]|Ilİ))|un[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|Inc(?:İli|il[İI])|incİlİ)|ın[\\s\\xa0]*(?:Inc(?:İli|ilI)|İnc(?:İli|il[Iİ])|inc[Iİ]lİ)|n(?:ın[\\s\\xa0]*(?:inc(?:ili|İl[Iİ]|Ilİ)|İnc(?:İli|il[Iİ]))|in[\\s\\xa0]*(?:İnc(?:il[İi]|İl[Iİ])|incIlI|Incilİ)|In[\\s\\xa0]*incİl[Iİ]|İn[\\s\\xa0]*(?:Incili|İnc(?:İli|il[iİ])|inc(?:İl[iİ]|ilİ))|un[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|Incilİ|inc(?:ilI|İl[iİ])))|ya[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:İncil|inc[Iİ]l)|öre[\\s\\xa0]*(?:İncil|inc[iİ]l))|İnc(?:İli|il[Iİ])|'ya[\\s\\xa0]*G(?:[öo]re[\\s\\xa0]*(?:İncil|inc[İI]l))|’ya[\\s\\xa0]*G(?:[öo]re[\\s\\xa0]*(?:İncil|inc[İi]l)))|Markos(?:İnc[iI]li|un[\\s\\xa0]*(?:Inc[iI]li|İncil[Ii]|inc(?:[iI]l[İIi]|İl[Ii]))|In(?:c(?:[Iİ]li|il[Iİ])|[\\s\\xa0]*(?:[İI]nc(?:(?:[Iİ]li|il[iI]))|inc(?:[iI]l[İIi]|İl[iİ])))|ya[\\s\\xa0]*G(?:ore[\\s\\xa0]*[Ii]ncil|öre[\\s\\xa0]*(?:incIl|Incil))|'ya[\\s\\xa0]*G[öo]re[\\s\\xa0]*(?:[Ii]ncil)|’ya[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:incIl|Incil))|in(?:c(?:İli|il[İIi]|Il[Ii])|[\\s\\xa0]*(?:İnc(?:İlI|Il[iİI]|il[İi])|Inc(?:il[iİI]|Il[İi]|İl[Ii])|inc[İIi]l[Iİi]))|a[\\s\\xa0]*G(?:ore[\\s\\xa0]*[Ii]ncil|öre[\\s\\xa0]*(?:incIl|Incil))|ın[\\s\\xa0]*(?:İnc[Ii]li|inc(?:il[iİI]|[İI]l[Ii])|Inc(?:Ili|il[iİ]))|n(?:In[\\s\\xa0]*(?:[Iİ]nc(?:(?:[Iİ]li|il[Iiİ]))|inc(?:İli|[Ii]l[Iiİ]))|un[\\s\\xa0]*(?:inc(?:İlI|Il[Iiİ]|il[İi])|Inc(?:[İI]li|il[Ii])|İncil[iI])|ın[\\s\\xa0]*(?:İnc[Ii]li|Inc(?:[İI]li|il[Iİi])|inc(?:İli|il[Iİ]|Il[iI]))|in[\\s\\xa0]*(?:İnc(?:İli|ilI|Il[Iiİ])|inc(?:[İi]l[İIi]|Il[iİ])|Inc(?:[İI]l[Iİi]|il[Ii]))|İn[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:[İI]li|il[Iİ])|inc(?:İlI|Il[iİI]|il[iI]))))?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Luke"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Luka(?:['’](?:n(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|[Iİ]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ])))|Luka['’](?:(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|Luk(?:a(?:ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))|[Iİ]nc(?:[Iİ]l[Iİ])|[’']ya[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l)))|n[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[ıu]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l)))|e)?|Luka(?:’(?:İn[\\s\\xa0]*(?:Incilİ|inc(?:IlI|İl[Iİ])|İnc(?:İli|il[iİ]))|In[\\s\\xa0]*(?:İncIli|Incilİ|incİlİ)|a[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:İncil|inc[iİ]l)|öre[\\s\\xa0]*(?:[Iİ]ncil|incİl))|un[\\s\\xa0]*(?:Inc[iİ]li|İnc(?:İli|il[Iİ])|inc[Iİ]lİ)|ın[\\s\\xa0]*(?:incİl[iİ]|Inc(?:Ili|ilİ)|İnc(?:İli|il[İI]))|in[\\s\\xa0]*(?:Inc[Iİ]lI|İnc(?:İl[İi]|ilİ))|n(?:in[\\s\\xa0]*(?:Incİl[Iİ]|incilI|İnc(?:İl[iİ]|ilİ))|In[\\s\\xa0]*(?:İncilI|Incilİ)|İn[\\s\\xa0]*(?:inc[Iİ]l[Iİ]|İnc(?:İli|il[iİ]))|ın[\\s\\xa0]*(?:incİl[Iİ]|Incil[iİ]|İnc(?:İli|il[Iİ]))|un[\\s\\xa0]*(?:incİl[İi]|Inc(?:Ili|ilİ)|İnc(?:[Iİ]li|ilİ))))|İn[\\s\\xa0]*(?:inc[Iİ]l[iİ]|İnc(?:[İI]li|ilİ))|'(?:un[\\s\\xa0]*(?:Incilİ|inc(?:ilI|İl[Iİ])|İnc(?:İli|il[Iİ]))|ın[\\s\\xa0]*(?:Incili|İnc(?:İli|il[İi])|inc(?:İl[Iİ]|ilİ))|n(?:In[\\s\\xa0]*İncilİ|in[\\s\\xa0]*(?:Incilİ|inc(?:IlI|İl[İi])|İnc(?:ilI|İl[iİ]))|un[\\s\\xa0]*(?:inc(?:il[iİ]|İl[Iİ])|İnc(?:İli|il[Iİ]))|İn[\\s\\xa0]*(?:Incili|İnc(?:İli|il[Iİ])|inc(?:İl[İi]|Ilİ))|ın[\\s\\xa0]*(?:inc[iİ]l[iİ]|İnc(?:[İI]li|ilİ)))|in[\\s\\xa0]*(?:İnc(?:il[iİ]|İl[Iİ])|Inc(?:ilI|İlİ)|incİli)|a[\\s\\xa0]*G[öo]re[\\s\\xa0]*(?:(?:[Iİ]ncil|incİl))|In[\\s\\xa0]*incilİ|İn[\\s\\xa0]*(?:Inc(?:İli|ilI)|İnc(?:[Iİ]li|ilİ)|inc[İI]lİ)))|Luka(?:'(?:un[\\s\\xa0]*(?:inc(?:İli|Il[iİI]|il[iİ])|İnc[iI]li|Inc(?:[Iİ]li|il[Ii]))|In[\\s\\xa0]*(?:[Iİ]nc(?:(?:[İI]li|il[İIi]))|inc(?:[İI]l[İIi]|il[Ii]))|in[\\s\\xa0]*(?:İnc(?:İli|ilI|Il[İiI])|inc(?:[Ii]l[iIİ]|İl[Iİ])|Inc(?:Il[İIi]|il[İi]|İl[iI]))|İn[\\s\\xa0]*(?:inc(?:il[Iİi]|[Iİ]l[Ii])|İncil[Ii]|Inc(?:Ili|il[İi]))|ın[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:[Iİ]li|il[İI])|inc(?:İli|Il[İIi]|il[Ii]))|a[\\s\\xa0]*G[öo]re[\\s\\xa0]*inc(?:[iI]l)|n(?:in[\\s\\xa0]*(?:inc(?:İlI|il[Iiİ]|Il[İi])|İnc(?:İlI|Il[iIİ]|il[İi])|Inc(?:[Iİ]l[Iiİ]|il[Ii]))|In[\\s\\xa0]*(?:Inc(?:[İI]li|il[İiI])|İnc(?:[İI]li|il[iI])|inc[Iiİ]l[Iİi])|ın[\\s\\xa0]*(?:inc(?:[İi]lI|Il[Iİi])|Inc(?:[İI]li|il[İIi])|İncil[Ii])|un[\\s\\xa0]*(?:İnc[iI]li|inc(?:İli|ilI|Il[İIi])|Inc(?:[Iİ]li|il[iİI]))|İn[\\s\\xa0]*(?:İnc[Ii]li|Inc(?:[İI]li|il[Iİ])|inc(?:İlI|il[Iiİ]|Il[Ii]))))|’(?:İn[\\s\\xa0]*(?:inc(?:İli|il[Iİi]|Il[iİ])|İnc(?:Ili|ilI)|Inc(?:[İI]li|il[Ii]))|n(?:In[\\s\\xa0]*(?:Inc(?:[İI]li|il[Ii])|İnc(?:[İI]li|il[İi])|inc[İIi]l[iIİ])|ın[\\s\\xa0]*(?:İnc[iI]li|inc(?:İli|[iI]l[Iiİ])|Inc(?:[Iİ]li|ilI))|un[\\s\\xa0]*(?:İncil[Ii]|Inc(?:İli|il[Ii])|inc(?:İlI|[iI]l[Iiİ]))|in[\\s\\xa0]*(?:inc(?:[İI]l[Iİi]|il[iİ])|Inc(?:İli|[Ii]l[iİI])|İnc(?:İlI|Il[Iİi]|il[Ii]))|İn[\\s\\xa0]*(?:İnc(?:Ili|ilI)|[Ii]nc(?:(?:[İI]li|il[iİI]))))|in[\\s\\xa0]*(?:Inc(?:il[Iİi]|[İI]l[İi])|inc[Iİi]l[Iİi]|İnc(?:İlI|Il[iIİ]|il[Ii]))|ın[\\s\\xa0]*(?:İnc[iI]li|Inc(?:İli|il[iI])|inc(?:İlI|[Ii]l[İIi]))|In[\\s\\xa0]*(?:İnc(?:İli|il[iIİ])|Inc(?:[İI]li|il[iI])|inc(?:[iI]l[İiI]|İl[iI]))|a[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:incIl|Incil)|öre[\\s\\xa0]*inc[iI]l)|un[\\s\\xa0]*(?:İnc[iI]li|inc(?:il[iIİ]|[Iİ]l[Ii])|Inc(?:Ili|il[İI])))|İn[\\s\\xa0]*(?:inc(?:[İI]lI|il[İIi])|Inc(?:[Iİ]li|il[İIi])|İncil[iI]))|Luka(?:a[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[Iİ]l)|ore[\\s\\xa0]*(?:[Iİ]ncil|incİl))|n(?:un[\\s\\xa0]*(?:Incilİ|İnc(?:İli|il[Iİ])|inc(?:IlI|İl[iİ]))|İn[\\s\\xa0]*(?:inc(?:İl[iİ]|il[Iİ])|İnc(?:İli|il[iİ]))|ın[\\s\\xa0]*(?:Inc(?:[Iİ]li|ilİ)|İnc(?:İli|il[Iİ])|incİlİ)|In[\\s\\xa0]*İncilI|in[\\s\\xa0]*(?:inc(?:İli|IlI)|İnc(?:İl[İi]|ilİ)|Inc[iİ]lİ))|İnc(?:[Iİ]li|ilİ)|ya[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:İncil|inc[iİ]l)|öre[\\s\\xa0]*(?:[Iİ]ncil|incİl))|In(?:[\\s\\xa0]*(?:İncil[İI]|Incİli|inc[Iİ]lİ)|c(?:İli|ilI))|'ya[\\s\\xa0]*G[öo]re[\\s\\xa0]*(?:(?:[Iİ]ncil|incİl))|in(?:[\\s\\xa0]*(?:İncİl[iİ]|incili)|c[iİ]lİ)|un[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|inc(?:IlI|[iİ]lİ)|Incİli)|’ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[Iİ]l)|ore[\\s\\xa0]*(?:İncil|inc[iİ]l))|ın[\\s\\xa0]*(?:Inc[iİ]li|İnc(?:[Iİ]li|ilİ)|inc[İI]lİ))|Luka(?:in(?:[\\s\\xa0]*(?:inc(?:[Iİ]l[iIİ]|il[Iİ])|Inc[İIi]l[İIi]|İnc(?:İlI|[iI]l[iIİ]))|c(?:Il[iIİ]|[İi]l[iI]))|In(?:[\\s\\xa0]*(?:inc(?:il[İiI]|[İI]l[Ii])|Inc(?:Ili|il[iIİ])|İnc[iİI]li)|c(?:Ili|il[iİ]))|İncil[iI]|’ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*[iI]ncil|ore[\\s\\xa0]*(?:incIl|Incil))|ın[\\s\\xa0]*(?:inc(?:il[İiI]|[Iİ]l[iI])|İncil[iI]|Inc(?:Ili|il[İI]))|un[\\s\\xa0]*(?:İncil[iI]|inc(?:Il[iİ]|[İi]l[iI])|Inc(?:Ili|il[iİI]))|'ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*inc(?:[Ii]l)|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*[Ii]ncil|ore[\\s\\xa0]*inc[Ii]l)|n(?:ın[\\s\\xa0]*(?:İnc[Ii]li|Incil[iI]|inc(?:[iI]l[Iiİ]|İl[Ii]))|In[\\s\\xa0]*(?:Inc(?:[İI]li|il[İiI])|İnc(?:[Iİ]li|il[İi])|inc[Iiİ]l[İiI])|un[\\s\\xa0]*(?:inc(?:İlI|il[iİI]|Il[İi])|İnc[iI]li|Inc(?:[İI]li|il[iI]))|in[\\s\\xa0]*(?:Inc(?:Il[iİI]|[iİ]l[iI])|inc(?:il[iIİ]|Il[iİ]|İl[İI])|İnc(?:İlI|Il[iİI]|il[Ii]))|İn[\\s\\xa0]*(?:İnc(?:Ili|ilI)|inc(?:ili|İlI|Il[iIİ])|Inc(?:[İI]li|il[iIİ])))|ya[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:incIl|Incil)|öre[\\s\\xa0]*inc[Ii]l))?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["1John"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:1(?:[\s\xa0]*Yu(?:hanna)?|Yu|John|\.[\s\xa0]*Yu(?:hanna)?)|I(?:[\s\xa0]*Yuhanna|lk[\s\xa0]*Yuhanna|\.[\s\xa0]*Yuhanna)|B(?:[Iİ]r(?:[\s\xa0]*Yuhanna|[Iİ]nc(?:[Iİ][\s\xa0]*Yuhanna)))|İlk[\s\xa0]*Yuhanna|Yuhanna(?:(?:['’]n(?:[Iİı]n[\s\xa0]*(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu|lk[\s\xa0]*Mektubu)|İlk[\s\xa0]*Mektubu|B(?:[Iİ]r(?:[\s\xa0]*Mektubu|[Iİ]nc(?:[Iİ][\s\xa0]*Mektubu)))|1(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu))))|n(?:[Iİı]n[\s\xa0]*(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu|lk[\s\xa0]*Mektubu)|İlk[\s\xa0]*Mektubu|B(?:[Iİ]r(?:[\s\xa0]*Mektubu|[Iİ]nc(?:[Iİ][\s\xa0]*Mektubu)))|1(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)))))|(?:B(?:ir(?:[\s\xa0]*Yuhanna|[İIi]nc(?:[iİI][\s\xa0]*Yuhanna))|[Iİ]r(?:(?:[Iİ]nci[\s\xa0]*Yuhanna|inc[iİI][\s\xa0]*Yuhanna)))|ilk[\s\xa0]*Yuhanna|Yuhanna(?:(?:['’]n(?:in[\s\xa0]*(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu|lk[\s\xa0]*Mektubu)|[iİ]lk[\s\xa0]*Mektubu|1(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|B(?:[iIİ]r(?:[\s\xa0]*Mektubu|[iIİ]nc(?:[İiI][\s\xa0]*Mektubu))))|(?:[İıI]n[\s\xa0]*(?:ilk[\s\xa0]*Mektubu|B(?:[İI]r(?:(?:[Iİ]nci[\s\xa0]*Mektubu|inc[Iİi][\s\xa0]*Mektubu))|ir(?:[\s\xa0]*Mektubu|[İiI]nc(?:[İIi][\s\xa0]*Mektubu)))))))|n(?:in[\s\xa0]*(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu|lk[\s\xa0]*Mektubu)|[İi]lk[\s\xa0]*Mektubu|1(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|B(?:[iIİ]r(?:[\s\xa0]*Mektubu|[iİI]nc(?:[Iİi][\s\xa0]*Mektubu))))|(?:[ıİI]n[\s\xa0]*(?:ilk[\s\xa0]*Mektubu|B(?:[Iİ]r(?:(?:[İI]nci[\s\xa0]*Mektubu|inc[iIİ][\s\xa0]*Mektubu))|ir(?:[\s\xa0]*Mektubu|[İiI]nc(?:[İiI][\s\xa0]*Mektubu)))))))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2John"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:2(?:[\s\xa0]*Yu(?:hanna)?|Yu|John|\.[\s\xa0]*Yu(?:hanna)?)|I(?:I(?:[\s\xa0]*Yuhanna|\.[\s\xa0]*Yuhanna)|k(?:[Iİ](?:[\s\xa0]*Yuhanna|nc[Iİ][\s\xa0]*Yuhanna)))|İk(?:[Iİ](?:[\s\xa0]*Yuhanna|nc[Iİ][\s\xa0]*Yuhanna))|Yuhanna(?:(?:['’]n(?:[Iİı]n[\s\xa0]*(?:İk(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu))|2(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|I(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|k(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu))))))|n(?:[Iİı]n[\s\xa0]*(?:İk(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu))|2(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|I(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|k(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu)))))))|(?:Yuhanna(?:(?:['’]n(?:(?:[Iİı]n[\s\xa0]*(?:(?:[Iİ]k(?:i(?:[\s\xa0]*Mektubu|nc[iİI][\s\xa0]*Mektubu)|[İI]nci[\s\xa0]*Mektubu))|ik(?:[iIİ](?:[\s\xa0]*Mektubu|nc[İiI][\s\xa0]*Mektubu))))|in[\s\xa0]*(?:I(?:k(?:[iIİ](?:[\s\xa0]*Mektubu|nc[Iiİ][\s\xa0]*Mektubu))|I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu))|(?:[iİ]k(?:[İIi](?:[\s\xa0]*Mektubu|nc[Iİi][\s\xa0]*Mektubu)))|2(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu))))|n(?:(?:[İIı]n[\s\xa0]*(?:(?:[İI]k(?:i(?:[\s\xa0]*Mektubu|nc[Iiİ][\s\xa0]*Mektubu)|[İI]nci[\s\xa0]*Mektubu))|ik(?:[Iiİ](?:[\s\xa0]*Mektubu|nc[iİI][\s\xa0]*Mektubu))))|in[\s\xa0]*(?:I(?:k(?:[Iİi](?:[\s\xa0]*Mektubu|nc[İiI][\s\xa0]*Mektubu))|I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu))|(?:[İi]k(?:[İIi](?:[\s\xa0]*Mektubu|nc[iIİ][\s\xa0]*Mektubu)))|2(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu))))|[İI]k(?:(?:[Iİ]nci[\s\xa0]*Yuhanna|i(?:[\s\xa0]*Yuhanna|nc[İIi][\s\xa0]*Yuhanna)))|ik(?:[Iİi](?:[\s\xa0]*Yuhanna|nc[iIİ][\s\xa0]*Yuhanna))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["3John"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:[UÜ](?:[cç](?:[\s\xa0]*Yuhanna|[uü]nc(?:[uü][\s\xa0]*Yuhanna))))|3(?:[\s\xa0]*Yu(?:hanna)?|Yu|John|\.[\s\xa0]*Yu(?:hanna)?)|III(?:[\s\xa0]*Yuhanna|\.[\s\xa0]*Yuhanna)|Yuhanna(?:n[Iİı]n[\s\xa0]*(?:(?:[UÜ](?:[cç](?:(?:[uü]nc(?:[uü][\s\xa0]*Mektubu)|[\s\xa0]*Mektubu)))|3(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|III(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)))|['’]n(?:[Iİı]n[\s\xa0]*(?:(?:[UÜ](?:[cç](?:(?:[uü]nc(?:[uü][\s\xa0]*Mektubu)|[\s\xa0]*Mektubu)))|3(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|III(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu))))))|Yuhanna(?:['’]nin[\s\xa0]*(?:(?:[UÜ](?:[cç](?:(?:[uü]nc(?:[uü][\s\xa0]*Mektubu)|[\s\xa0]*Mektubu)))|3(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|III(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)))|nin[\s\xa0]*(?:[ÜU](?:[cç](?:(?:[uü]nc(?:[uü][\s\xa0]*Mektubu)|[\s\xa0]*Mektubu)))|3(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|III(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["John"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Yuhanna(?:['’](?:n(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|[Iİ]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ])))|Yuhanna['’](?:(?:[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))|(?:John|Yu(?:h(?:anna(?:ya[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))|[Iİ]nc(?:[Iİ]l[Iİ])|[’']ya[\\s\\xa0]*G(?:[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l)))|n[Iuİı]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|[ıu]n[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l[Iİ]))|a[\\s\\xa0]*G[oö]re[\\s\\xa0]*(?:[Iİ]nc(?:[Iİ]l))))?)?)|Yuhanna(?:'(?:in[\\s\\xa0]*(?:incİl[iİ]|Incili|İnc(?:IlI|İl[iİ]))|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[Iİ]l)|ore[\\s\\xa0]*(?:[Iİ]ncil|incİl))|İn[\\s\\xa0]*(?:Inc[iİ]li|İnc(?:İli|il[İI])|inc[iİ]lİ)|ın[\\s\\xa0]*(?:IncilI|İnc(?:İli|il[İI])|inc(?:İl[Iİ]|Ilİ))|In[\\s\\xa0]*[İI]ncilİ|n(?:ın[\\s\\xa0]*(?:inc(?:IlI|İl[Iİ]|ilİ)|İnc(?:İli|il[İI]))|un[\\s\\xa0]*(?:Inc(?:[Iİ]li|ilİ)|İnc(?:İli|il[iİ])|incİlİ)|In[\\s\\xa0]*(?:inc(?:İli|Ilİ)|IncIli|İncilİ)|in[\\s\\xa0]*(?:İnc(?:ili|İl[Iİ])|Incİlİ)|İn[\\s\\xa0]*(?:(?:[İI]nc(?:İli|il[iİ]))|incİlİ))|un[\\s\\xa0]*(?:Inc(?:İli|ilİ)|inc(?:IlI|İlİ)|İnc(?:İli|il[iİ])))|’(?:İn[\\s\\xa0]*(?:Incilİ|inc(?:IlI|İl[Iİ])|İnc(?:İli|il[Iİ]))|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[İI]l)|ore[\\s\\xa0]*(?:[Iİ]ncil|incİl))|un[\\s\\xa0]*(?:IncilI|İnc(?:İli|il[iİ])|inc(?:İl[İi]|Ilİ))|ın[\\s\\xa0]*(?:IncilI|İnc(?:İli|il[Iİ])|inc(?:İl[İI]|Ilİ))|n(?:In[\\s\\xa0]*(?:İnc(?:İli|ilI)|incİlI)|ın[\\s\\xa0]*(?:IncilI|İnc(?:İli|il[iİ])|inc(?:İl[iİ]|Ilİ))|İn[\\s\\xa0]*(?:inc[iİ]l[iİ]|İnc(?:[Iİ]li|ilİ))|in[\\s\\xa0]*(?:Inc(?:Ili|ilİ)|incİlİ|İnc[iİ]lİ)|un[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|inc(?:Ili|[iİ]lİ)|Incİli))|In[\\s\\xa0]*(?:İnc(?:İli|ilİ)|Incilİ|incİlI)|in[\\s\\xa0]*(?:İnc(?:ili|İlİ)|incIlI|Incİlİ))|İn[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|Incilİ|inc(?:IlI|İl[İI])))|Yuhanna(?:İn[\\s\\xa0]*(?:inc(?:İli|il[Iİi]|Il[İi])|Inc(?:[İI]li|il[iI])|İncil[iI])|'(?:In[\\s\\xa0]*(?:[Iİ]nc(?:(?:[Iİ]li|il[Ii]))|inc[iİI]l[İiI])|n(?:un[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Incil[iI]|inc(?:[Ii]l[iİI]|İl[iI]))|İn[\\s\\xa0]*(?:(?:[Iİ]nc(?:Ili|ilI))|inc(?:[iI]l[iİI]|İl[iI]))|ın[\\s\\xa0]*(?:İnc[iI]li|Inc(?:[İI]li|il[Iİi])|inc(?:İli|Il[iİ]|il[iI]))|in[\\s\\xa0]*(?:İnc(?:İli|Il[Iiİ]|il[İI])|inc[İiI]l[iIİ]|Inc(?:[iI]l[iİI]|İl[Ii]))|In[\\s\\xa0]*(?:Inc(?:İli|il[Iiİ])|İnc(?:[Iİ]li|il[Ii])|inc(?:il[Iİi]|İl[İI]|Il[Ii])))|in[\\s\\xa0]*(?:İnc(?:İlI|il[Iiİ]|Il[İi])|Inc(?:[İI]l[Iİi]|il[Iİ])|inc(?:İlI|[iI]l[İIi]))|un[\\s\\xa0]*(?:İnc(?:Ili|ilI)|inc(?:il[İiI]|Il[iİ]|İl[Ii])|Inc(?:Ili|il[iI]))|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*[Ii]ncil|ore[\\s\\xa0]*inc[Ii]l)|ın[\\s\\xa0]*(?:İnc[iI]li|Inc(?:[İI]li|il[İi])|inc(?:İli|il[iIİ]|Il[Ii]))|İn[\\s\\xa0]*(?:İnc[iI]li|inc(?:Il[Iiİ]|[iİ]l[Ii])|Inc(?:Ili|il[İI])))|’(?:İn[\\s\\xa0]*(?:inc(?:İli|il[İIi]|Il[iİ])|İnc[iI]li|Inc(?:[İI]li|il[iI]))|In[\\s\\xa0]*(?:Inc(?:[İI]li|il[Ii])|inc(?:[iI]l[İiI]|İl[İi])|İnc(?:Ili|il[Ii]))|n(?:In[\\s\\xa0]*(?:Inc(?:[İI]li|il[iİI])|inc(?:[Ii]l[iIİ]|İl[iİ])|İnc(?:Ili|il[İi]))|un[\\s\\xa0]*(?:İncil[Ii]|inc(?:Il[İI]|[iİ]l[Ii])|Inc(?:Ili|il[Iİi]))|İn[\\s\\xa0]*(?:inc(?:[İi]lI|Il[iİI])|Inc(?:[Iİ]li|il[Iiİ])|İncil[iI])|in[\\s\\xa0]*(?:İnc(?:Il[İIi]|[iİ]l[Ii])|Inc(?:İl[İiI]|Il[Iİ]|il[iI])|inc(?:[Ii]l[iİI]|İl[iI]))|ın[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:[İI]li|il[iİ])|inc(?:İlI|il[Iiİ]|Il[iI])))|in[\\s\\xa0]*(?:inc(?:[İi]l[iİI]|Il[İi])|İnc(?:Il[Iiİ]|il[İI]|İl[Ii])|Inc(?:[Ii]l[Iİi]|İl[Ii]))|a[\\s\\xa0]*G(?:öre[\\s\\xa0]*[Ii]ncil|ore[\\s\\xa0]*inc[iI]l)|un[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:[Iİ]li|il[İi])|inc(?:İlI|il[İiI]|Il[iI]))|ın[\\s\\xa0]*(?:İnc[iI]li|Inc(?:[İI]li|il[İi])|inc(?:İli|il[Iiİ]|Il[iI]))))|Yuhanna(?:n(?:İn[\\s\\xa0]*(?:inc(?:IlI|İl[iİ]|ilİ)|İnc(?:İli|il[iİ]))|ın[\\s\\xa0]*(?:inc(?:ili|[Iİ]lİ)|Incİli|İnc(?:İli|il[iİ]))|in[\\s\\xa0]*(?:İncİl[Iİ]|Inc(?:Ili|ilİ))|In[\\s\\xa0]*(?:incİl[Iİ]|İnc(?:Ili|ilİ))|un[\\s\\xa0]*(?:İnc(?:[İI]li|ilİ)|inc(?:ilI|[Iİ]lİ)|Incİli))|’ya[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:İncil|inc[iİ]l)|öre[\\s\\xa0]*(?:[İI]ncil|incİl))|'ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[iİ]l)|ore[\\s\\xa0]*(?:[Iİ]ncil|incİl))|In[\\s\\xa0]*incİl[Iİ]|in(?:c[Iİ]l[İi]|[\\s\\xa0]*(?:İnc(?:İl[iİ]|il[Iİ])|incilI|Incilİ))|un[\\s\\xa0]*(?:İnc(?:[Iİ]li|ilİ)|Incİli|inc(?:Il[iİ]|İlİ))|ın[\\s\\xa0]*(?:inc[Iİ]l[Iİ]|İnc(?:[Iİ]li|ilİ))|ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:İncil|inc[Iİ]l)|ore[\\s\\xa0]*(?:İncil|inc[iİ]l))|İnc(?:İli|il[Iİ])|a[\\s\\xa0]*G[öo]re[\\s\\xa0]*(?:(?:[Iİ]ncil|incİl)))|Yuhanna(?:İnc[Ii]li|un[\\s\\xa0]*(?:İncil[Ii]|Inc(?:Ili|il[Iİi])|inc(?:IlI|il[iİI]|İl[Ii]))|ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*[Ii]ncil|ore[\\s\\xa0]*(?:incIl|Incil))|in(?:c(?:[Iİ]lI|il[iİI])|[\\s\\xa0]*(?:İnc(?:ili|İlI|Il[iİI])|inc(?:[İI]l[iIİ]|il[İi])|Inc(?:[Iİ]l[iIİ]|il[iI])))|n(?:İn[\\s\\xa0]*(?:İnc(?:Ili|ilI)|Inc(?:[İI]li|il[iİI])|inc(?:İlI|Il[iİ]|il[Ii]))|In[\\s\\xa0]*(?:Inc(?:[Iİ]li|il[Iİi])|İnc(?:İli|il[Ii])|inc(?:İli|[Ii]l[Iİi]))|un[\\s\\xa0]*(?:İncil[Ii]|inc(?:il[iİ]|[Iİ]l[iI])|Inc(?:Ili|il[Iİi]))|in[\\s\\xa0]*(?:Inc(?:İl[iİI]|Il[İI]|il[Ii])|inc[İiI]l[İIi]|İnc(?:İli|[iI]l[Iİi]))|ın[\\s\\xa0]*(?:İnc(?:Ili|ilI)|inc(?:il[İI]|[İI]l[Ii])|Inc(?:Ili|il[İiI])))|’ya[\\s\\xa0]*G(?:ore[\\s\\xa0]*(?:incIl|Incil)|öre[\\s\\xa0]*inc[Ii]l)|'ya[\\s\\xa0]*G(?:öre[\\s\\xa0]*(?:incIl|Incil)|ore[\\s\\xa0]*inc[Ii]l)|ın[\\s\\xa0]*(?:[iI]nc(?:(?:[Iİ]li|il[iİI]))|İncil[iI])|In(?:c(?:[Iİ]li|il[İIi])|[\\s\\xa0]*(?:[İI]nc(?:(?:[Iİ]li|il[İiI]))|inc(?:İli|[Ii]l[Iiİ])))|a[\\s\\xa0]*G[öo]re[\\s\\xa0]*inc(?:[iI]l))?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Acts"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Kutsal[\\s\\xa0]*Resuller[Iİ]n[\\s\\xa0]*(?:[Iİ](?:[sş]ler[Iİ]))|Ha(?:berc[Iİ]ler(?:[Iİ]n[\\s\\xa0]*(?:[Iİ](?:[sş]ler[Iİ])))|var[Iİ]ler(?:[Iİ]n[\\s\\xa0]*Faal(?:[Iİ]yetler[Iİ])))|Acts|El[cç](?:[Iİ]ler(?:[Iİ]n[\\s\\xa0]*(?:[Iİ](?:[sş]ler[Iİ])))?))|El[cç]|(?:Kutsal[\\s\\xa0]*Resuller(?:in[\\s\\xa0]*[Iiİ](?:[sş]ler[Iİi])|[İI]n[\\s\\xa0]*(?:i(?:[sş]ler[İiI]|[İI](?:[sş]leri))))|Resuller[İiI]n[\\s\\xa0]*(?:[Iİi](?:[şs]ler[iIİ]))|El[çc](?:(?:[İI]ler(?:in[\\s\\xa0]*(?:[İIi](?:[şs]ler[Iiİ])|[İI]n[\\s\\xa0]*(?:i(?:[şs]ler[Iiİ]|[Iİ](?:[şs]leri)))))|iler[Iİi]n[\\s\\xa0]*(?:[İIi](?:[sş]ler[İiI]))))|Ha(?:var(?:[Iİ]ler(?:(?:[Iİ]n[\\s\\xa0]*Faal(?:(?:[Iİ]yetleri|iyetler[İIi]))|in[\\s\\xa0]*Faal[iIİ]yetler[iİI]))|iler[Iiİ]n[\\s\\xa0]*Faal(?:[Iiİ]yetler[Iiİ]))|berc(?:[Iİ]ler(?:in[\\s\\xa0]*(?:[İiI](?:[şs]ler[iİI])|[Iİ]n[\\s\\xa0]*(?:i(?:[sş]ler[iIİ]|[İI](?:[şs]leri)))))|iler[iİI]n[\\s\\xa0]*(?:[iIİ](?:[sş]ler[İiI])))))|(?:El[çc](?:[İI]ler(?:[İI]n[\\s\\xa0]*(?:i(?:[şs]ler[Iiİ]|[Iİ](?:[şs]leri)))))|Haberc[Iİ]ler(?:[Iİ]n[\\s\\xa0]*(?:i(?:[sş]ler[iIİ]|[İI](?:[şs]leri))))|Kutsal[\\s\\xa0]*Resuller[Iİ]n[\\s\\xa0]*(?:[İI](?:[şs]leri)))|(?:El[çc](?:[Iİ]ler(?:[İI]n[\\s\\xa0]*(?:[İI](?:[şs]leri))))|Haberc[Iİ]ler(?:[Iİ]n[\\s\\xa0]*(?:[İI](?:[şs]leri)))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Rom"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Rom|Pavlus(?:['’]tan[\\s\\xa0]*Romal(?:[Iİı]lar(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)))|tan[\\s\\xa0]*Romal[Iİı]lar(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup))))|(?:Pavlus(?:[’']tan[\\s\\xa0]*Romal(?:ilar(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?|[Iıİ]lar))|tan[\\s\\xa0]*Romal(?:ilar(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?|[ıİI]lar))|Romal[İIiı]lar(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?))|Pavlus['’]tan[\\s\\xa0]*Romal(?:[İIı]lar))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Cor"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:I(?:I(?:[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler))|\.[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler)))|k(?:[Iİ](?:nc(?:[Iİ][\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler)))|[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler)))))|İk(?:[Iİ](?:nc(?:[Iİ][\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler)))|[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler))))|Kor(?:[Iİ]ntoslular(?:a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|(?:['’]a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup))))))|Pavlus(?:(?:['’]tan[\s\xa0]*Kor(?:[Iİ]ntl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup))))))))|tan[\s\xa0]*Kor(?:[Iİ]ntl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup))))))))|2(?:[\s\xa0]*Ko(?:r(?:[Iİ]nt(?:oslular|l[Iİ]ler)))?|Ko|\.[\s\xa0]*Ko(?:r(?:[Iİ]nt(?:oslular|l[Iİ]ler)))?|Cor))|(?:İk(?:i(?:[\s\xa0]*Kor(?:[iİI]nt(?:oslular|l[İiI]ler))|nc(?:[iIİ][\s\xa0]*Kor(?:[iIİ]nt(?:oslular|l[iIİ]ler))))|(?:[İI](?:nc(?:i[\s\xa0]*Kor(?:[Iİi]nt(?:oslular|l[Iİi]ler))|(?:[Iİ][\s\xa0]*Kor(?:int(?:oslular|l[İIi]ler)|[İI]ntliler)))|[\s\xa0]*Kor(?:int(?:oslular|l[iİI]ler)|[İI]ntliler))))|Pavlus(?:tan[\s\xa0]*Kor(?:intl(?:[İIi]ler(?:(?:[’']e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[iIİ](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İiI](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)))|(?:[İi]k(?:[iİI](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[İI]ntl(?:(?:[İI]ler(?:(?:[’']e[\s\xa0]*(?:ik(?:[İIi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup))))|e[\s\xa0]*(?:ik(?:[Iİi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup))|(?:[Iİ]k(?:i(?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))))|iler(?:(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iIİ](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İiI](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İIi](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)))|(?:[İi]k(?:[İiI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))|(?:[’']tan[\s\xa0]*Kor(?:intl(?:[iIİ]ler(?:(?:[’']e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİi](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)))|(?:[İi]k(?:[iIİ](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİi](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|(?:[İi]k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[Iİ]ntl(?:(?:[İI]ler(?:(?:[’']e[\s\xa0]*(?:ik(?:[İIi](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup))))|e[\s\xa0]*(?:ik(?:[Iİi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup))|(?:[Iİ]k(?:i(?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))))|iler(?:(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|(?:[iİ]k(?:[iİI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iIİ](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|(?:[İi]k(?:[iİI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))))|2(?:\.[\s\xa0]*Kor(?:int(?:oslular|l[iİI]ler)|[İI]ntliler)|[\s\xa0]*Kor(?:int(?:oslular|l[Iiİ]ler)|[İI]ntliler))|ik(?:[Iİi](?:[\s\xa0]*Kor(?:[İIi]nt(?:oslular|l[İIi]ler))|nc(?:[Iiİ][\s\xa0]*Kor(?:[Iİi]nt(?:oslular|l[iİI]ler)))))|Kor(?:int(?:oslular(?:(?:['’]a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İiI](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iİI](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)))|(?:[İi]k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|l(?:[Iİi]ler(?:(?:[’']e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İiI](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İiI](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))|(?:[İI]nt(?:oslular(?:a[\s\xa0]*(?:ik(?:[iİI](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))|(?:[’']a[\s\xa0]*(?:ik(?:[Iİi](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)|[İI]nci[\s\xa0]*Mektup)))))|l(?:[İiI]ler(?:(?:[’']e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İiI](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İiI](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİi](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|(?:[iİ]k(?:[iİI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))))|I(?:k(?:i(?:[\s\xa0]*Kor(?:[iİI]nt(?:oslular|l[iİI]ler))|nc(?:[İiI][\s\xa0]*Kor(?:[iIİ]nt(?:oslular|l[iİI]ler))))|(?:[İI](?:nc(?:i[\s\xa0]*Kor(?:[İIi]nt(?:oslular|l[iİI]ler))|(?:[Iİ][\s\xa0]*Kor(?:int(?:oslular|l[iIİ]ler)|[Iİ]ntliler)))|[\s\xa0]*Kor(?:int(?:oslular|l[İiI]ler)|[Iİ]ntliler))))|I(?:\.[\s\xa0]*Kor(?:int(?:oslular|l[Iİi]ler)|[Iİ]ntliler)|[\s\xa0]*Kor(?:int(?:oslular|l[iIİ]ler)|[İI]ntliler)))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Cor"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:Pavlus(?:tan[\s\xa0]*Kor(?:[Iİ]ntl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))|(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))|(?:['’]tan[\s\xa0]*Kor(?:[Iİ]ntl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))|(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))))|B(?:[Iİ]r(?:[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler))|(?:[Iİ]nc(?:[Iİ][\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler))))))|I(?:[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler))|\.[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler))|lk[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler)))|1(?:[\s\xa0]*Ko(?:r(?:[Iİ]nt(?:oslular|l[Iİ]ler)))?|Ko|\.[\s\xa0]*Ko(?:r(?:[Iİ]nt(?:oslular|l[Iİ]ler)))?|Cor)|İlk[\s\xa0]*Kor(?:[Iİ]nt(?:oslular|l[Iİ]ler))|Kor(?:[Iİ]ntoslular(?:a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))|(?:['’]a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))|(?:İlk[\s\xa0]*Kor(?:int(?:oslular|l[Iİi]ler)|[Iİ]ntliler)|B(?:ir(?:(?:[Iİi]nc(?:[Iİi][\s\xa0]*Kor(?:[Iİi]nt(?:oslular|l[İiI]ler))))|[\s\xa0]*Kor(?:[İiI]nt(?:oslular|l[Iiİ]ler)))|(?:[Iİ]r(?:inc(?:[iIİ][\s\xa0]*Kor(?:[İiI]nt(?:oslular|l[iIİ]ler)))|(?:[İI]nc(?:i[\s\xa0]*Kor(?:[İIi]nt(?:oslular|l[iIİ]ler))|(?:[Iİ][\s\xa0]*Kor(?:int(?:oslular|l[İiI]ler)|[İI]ntliler))))|[\s\xa0]*Kor(?:int(?:oslular|l[iIİ]ler)|[Iİ]ntliler))))|1(?:\.[\s\xa0]*Kor(?:int(?:oslular|l[İIi]ler)|[Iİ]ntliler)|[\s\xa0]*Kor(?:int(?:oslular|l[İIi]ler)|[İI]ntliler))|ilk[\s\xa0]*Kor(?:[Iİi]nt(?:oslular|l[Iiİ]ler))|Pavlus(?:tan[\s\xa0]*Kor(?:intl(?:[İIi]ler(?:(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iiİ]r(?:[\s\xa0]*Mektup|[İiI]nc(?:[iIİ][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iIİ]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[Iiİ][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[Iİ]ntl(?:iler(?:(?:[’']e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iiİ]r(?:[\s\xa0]*Mektup|[İIi]nc(?:[iIİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[iIİ]nc(?:[İiI][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|(?:[İI]ler(?:(?:[’']e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[İIi]nc(?:[iIİ][\s\xa0]*Mektup))|[İI]r(?:(?:[Iİ]nci[\s\xa0]*Mektup|inc[iIİ][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))|e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[iİI]nc(?:[İIi][\s\xa0]*Mektup))|[Iİ]r(?:(?:[İI]nci[\s\xa0]*Mektup|inc[iİI][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))))))|(?:[’']tan[\s\xa0]*Kor(?:intl(?:[Iiİ]ler(?:(?:[’']e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[İiI]r(?:[\s\xa0]*Mektup|[İIi]nc(?:[iİI][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iiİ]r(?:[\s\xa0]*Mektup|[iİI]nc(?:[Iiİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[İI]ntl(?:iler(?:(?:[’']e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iIİ]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[İIi][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iİI]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[Iiİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|(?:[İI]ler(?:(?:[’']e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[iİI]nc(?:[Iİi][\s\xa0]*Mektup))|[Iİ]r(?:(?:[Iİ]nci[\s\xa0]*Mektup|inc[Iiİ][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))|e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[İIi]nc(?:[iIİ][\s\xa0]*Mektup))|[Iİ]r(?:(?:[İI]nci[\s\xa0]*Mektup|inc[iIİ][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))))))))|I(?:lk[\s\xa0]*Kor(?:int(?:oslular|l[iİI]ler)|[Iİ]ntliler)|\.[\s\xa0]*Kor(?:int(?:oslular|l[Iiİ]ler)|[Iİ]ntliler)|[\s\xa0]*Kor(?:int(?:oslular|l[İiI]ler)|[İI]ntliler))|Kor(?:int(?:l(?:[iIİ]ler(?:(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iiİ]r(?:[\s\xa0]*Mektup|[Iİi]nc(?:[Iİi][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[İIi]r(?:[\s\xa0]*Mektup|[Iİi]nc(?:[iIİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|oslular(?:(?:['’]a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iIİ]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[Iiİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iİI]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[İiI][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[Iİ]nt(?:l(?:[İiI]ler(?:(?:[’']e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[İIi]nc(?:[Iiİ][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[İIi]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[Iiİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|oslular(?:a[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[İiI]nc(?:[iİI][\s\xa0]*Mektup))|[İI]r(?:(?:[İI]nci[\s\xa0]*Mektup|inc[Iiİ][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup)|(?:[’']a[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[iIİ]nc(?:[İIi][\s\xa0]*Mektup))|[İI]r(?:(?:[İI]nci[\s\xa0]*Mektup|inc[İIi][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))))))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Gal"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pavlus(?:tan[\\s\\xa0]*Galatyal[Iİı]lar(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup))|['’]tan[\\s\\xa0]*Galatyal(?:[Iİı]lar(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup))))|Gal)|(?:Pavlus(?:tan[\\s\\xa0]*Galatyal(?:ilar(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?|[İIı]lar)|['’]tan[\\s\\xa0]*Galatyal(?:ilar(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?|[Iİı]lar)))|Galatyal[İıIi]lar(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?))|Pavlus['’]tan[\\s\\xa0]*Galatyal(?:[Iİı]lar))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Eph"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pavlus(?:tan[\\s\\xa0]*Efesl[Iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|['’]tan[\\s\\xa0]*Efesl(?:[Iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))|E(?:ph|f(?:e(?:soslular(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup))?)?))|Pavlus(?:['’]tan[\\s\\xa0]*Efesliler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|tan[\\s\\xa0]*Efesliler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|(?:Efes(?:oslular|l(?:Iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|iler'e[\\s\\xa0]*Mektup|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|Pavlus(?:tan[\\s\\xa0]*Efesl[Iİ]ler|'tan[\\s\\xa0]*Efesl[iİ]ler|’tan[\\s\\xa0]*Efesl[Iİ]ler))|EfeslIler'e[\\s\\xa0]*Mektup|(?:Pavlus(?:tan[\\s\\xa0]*Efesliler|’tan[\\s\\xa0]*Efesliler|'tan[\\s\\xa0]*EfeslIler)|Efesl(?:iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?|[İI]ler)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Phil"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:P(?:avlus(?:['’]tan[\\s\\xa0]*F(?:[Iİ]l(?:[Iİ]p(?:[Iİ]l(?:[Iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))))|tan[\\s\\xa0]*F[Iİ]l(?:[Iİ]p(?:[Iİ]l(?:[Iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))))|hil)|Flp)|Pavlus(?:’tan[\\s\\xa0]*Fİlİp(?:Ililer'e[\\s\\xa0]*Mektup|İliler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|il(?:ilere[\\s\\xa0]*Mektup|Iler’e[\\s\\xa0]*Mektup|İler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|tan[\\s\\xa0]*Fİlİp(?:İliler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|il(?:Iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|iler'e[\\s\\xa0]*Mektup|İler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|'tan[\\s\\xa0]*Fİlİp(?:İliler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|il(?:ilere[\\s\\xa0]*Mektup|Iler[’']e[\\s\\xa0]*Mektup|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))|Pavlus(?:tan[\\s\\xa0]*Fİlİp(?:Ililer(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|il(?:iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Iler'e[\\s\\xa0]*Mektup))|’tan[\\s\\xa0]*Fİlİp(?:il(?:iler[’']e[\\s\\xa0]*Mektup|Iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Ililer(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|'tan[\\s\\xa0]*Fİlİp(?:Ililer(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|il(?:Ilere[\\s\\xa0]*Mektup|iler['’]e[\\s\\xa0]*Mektup)))|(?:Fİlİp(?:İl(?:Iler’e[\\s\\xa0]*Mektup|iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Il(?:iler’e[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|il(?:Ilere[\\s\\xa0]*Mektup|İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|iler'e[\\s\\xa0]*Mektup))|Pavlus(?:'tan[\\s\\xa0]*F(?:il(?:İp(?:il(?:Ilere[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup)|İl(?:ilere[\\s\\xa0]*Mektup|Iler’e[\\s\\xa0]*Mektup|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Ilİler'e[\\s\\xa0]*Mektup)|Ip(?:İl(?:İlere[\\s\\xa0]*Mektup|iler’e[\\s\\xa0]*Mektup)|Ililer’e[\\s\\xa0]*Mektup)|ip(?:ilİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İlİler'e[\\s\\xa0]*Mektup))|İl(?:İp(?:ilIler|İl[iİ]ler|Ilİler)|Ip(?:ilİlere[\\s\\xa0]*Mektup|İliler['’]e[\\s\\xa0]*Mektup)|ip(?:Il(?:İler’e[\\s\\xa0]*Mektup|iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|il[Iİ]ler'e[\\s\\xa0]*Mektup|İl(?:Ilere[\\s\\xa0]*Mektup|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))|Il(?:ip(?:ilIlere[\\s\\xa0]*Mektup|İl(?:Ilere[\\s\\xa0]*Mektup|İler’e[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup)|Ilİler'e[\\s\\xa0]*Mektup)|İp(?:İliler'e[\\s\\xa0]*Mektup|il(?:Iler’e[\\s\\xa0]*Mektup|İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|IpIliler'e[\\s\\xa0]*Mektup))|tan[\\s\\xa0]*F(?:Il(?:Ipilİlere[\\s\\xa0]*Mektup|İp(?:İliler'e[\\s\\xa0]*Mektup|ilİler'e[\\s\\xa0]*Mektup)|ip(?:IlIler’e[\\s\\xa0]*Mektup|İl(?:Iler’e[\\s\\xa0]*Mektup|(?:[iİ]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))))|İl(?:Ip[İi]liler’e[\\s\\xa0]*Mektup|İp(?:ilIler|İl[İI]ler|Ilİler)|ip(?:İl(?:Ilere[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup|İler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|il(?:İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Iler'e[\\s\\xa0]*Mektup)|Il(?:Ilere[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)))|il(?:Ipil(?:Ilere[\\s\\xa0]*Mektup|İler[’']e[\\s\\xa0]*Mektup)|İp(?:il[iİ]lere[\\s\\xa0]*Mektup|Il(?:Iler[’']e[\\s\\xa0]*Mektup|İler’e[\\s\\xa0]*Mektup)|İl(?:iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|ip(?:Ililer'e[\\s\\xa0]*Mektup|İlİler’e[\\s\\xa0]*Mektup)))|’tan[\\s\\xa0]*F(?:İl(?:İp(?:IlIler|İl[iİ]ler|ilİler)|Ip(?:il(?:İler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Iler'e[\\s\\xa0]*Mektup)|[Iİ]liler’e[\\s\\xa0]*Mektup)|ip(?:İl(?:Iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|IlIlere[\\s\\xa0]*Mektup|ilİler’e[\\s\\xa0]*Mektup))|il(?:İp(?:İl(?:iler’e[\\s\\xa0]*Mektup|İler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|il(?:iler’e[\\s\\xa0]*Mektup|İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Il[Iİ]ler'e[\\s\\xa0]*Mektup)|ip(?:ilIlere[\\s\\xa0]*Mektup|İl(?:ilere[\\s\\xa0]*Mektup|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Ilİler'e[\\s\\xa0]*Mektup)|IpilIler’e[\\s\\xa0]*Mektup)|Il(?:ip(?:Ililer'e[\\s\\xa0]*Mektup|İliler[’']e[\\s\\xa0]*Mektup)|Ipilİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İp(?:ililere[\\s\\xa0]*Mektup|İliler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))))|(?:Pavlus(?:’tan[\\s\\xa0]*F(?:Ilip(?:Ilİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İl(?:ilere[\\s\\xa0]*Mektup|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|il(?:Ipİl(?:iler’e[\\s\\xa0]*Mektup|Iler'e[\\s\\xa0]*Mektup)|İp(?:Ililere[\\s\\xa0]*Mektup|İliler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|İl(?:ip(?:İliler’e[\\s\\xa0]*Mektup|Ilİler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|IpilIler’e[\\s\\xa0]*Mektup))|'tan[\\s\\xa0]*F(?:Il(?:İpilİler'e[\\s\\xa0]*Mektup|Ipİliler’e[\\s\\xa0]*Mektup|ipİlİlere[\\s\\xa0]*Mektup)|İlip(?:Ilİlere[\\s\\xa0]*Mektup|İlIler['’]e[\\s\\xa0]*Mektup)|il(?:İpİlIlere[\\s\\xa0]*Mektup|ipililer’e[\\s\\xa0]*Mektup))|tan[\\s\\xa0]*F(?:il(?:İp(?:ilİler’e[\\s\\xa0]*Mektup|İlIler’e[\\s\\xa0]*Mektup)|ip(?:Ilİler’e[\\s\\xa0]*Mektup|ilİler'e[\\s\\xa0]*Mektup)|IpIlIlere[\\s\\xa0]*Mektup)|Ilİp(?:İlilere[\\s\\xa0]*Mektup|Ililer[’']e[\\s\\xa0]*Mektup)|İl(?:Ip(?:ilİler’e[\\s\\xa0]*Mektup|Ililer’e[\\s\\xa0]*Mektup)|ip(?:İliler’e[\\s\\xa0]*Mektup|il(?:ilere[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|Il(?:İlere[\\s\\xa0]*Mektup|Iler'e[\\s\\xa0]*Mektup)))))|Fİlİp(?:İlIler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Il(?:Ilere[\\s\\xa0]*Mektup|İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))|(?:Fİlİp[Ii]lilere[\\s\\xa0]*Mektup|Pavlus(?:'tan[\\s\\xa0]*F(?:Il(?:ip[İIi]l(?:[iI]ler’e[\\s\\xa0]*Mektup)|İpİlilere[\\s\\xa0]*Mektup|Ip(?:il[iI]ler’e[\\s\\xa0]*Mektup|Ililer’e[\\s\\xa0]*Mektup))|il(?:İpilİler'e[\\s\\xa0]*Mektup|Ip(?:il[Ii]ler’e[\\s\\xa0]*Mektup|[İI]lIler’e[\\s\\xa0]*Mektup)|ip(?:İl(?:İlere[\\s\\xa0]*Mektup|[iI]ler’e[\\s\\xa0]*Mektup)|Il[Ii]ler’e[\\s\\xa0]*Mektup|ilIler’e[\\s\\xa0]*Mektup))|İlip(?:ilİlere[\\s\\xa0]*Mektup|İliler[’']e[\\s\\xa0]*Mektup))|’tan[\\s\\xa0]*F(?:İl(?:ip(?:Il[Ii]ler’e[\\s\\xa0]*Mektup|İlIler’e[\\s\\xa0]*Mektup|il(?:[iI]ler’e[\\s\\xa0]*Mektup|İler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|Ipil[İi]ler’e[\\s\\xa0]*Mektup)|il(?:Ip(?:İl(?:iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|(?:[Ii]lİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|İp(?:IlIlere[\\s\\xa0]*Mektup|il[Ii]lere[\\s\\xa0]*Mektup|İlIler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|ip(?:(?:[Ii]lİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|İl(?:iler['’]e[\\s\\xa0]*Mektup|Iler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))|Il(?:İp(?:Ililere[\\s\\xa0]*Mektup|ilIlere[\\s\\xa0]*Mektup)|ip(?:İlIler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|ilİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Ipİliler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|tan[\\s\\xa0]*F(?:İl(?:Ip(?:il(?:(?:[iİ]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Iler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|Ililer(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|ip(?:Il(?:[İI]ler’e[\\s\\xa0]*Mektup|iler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|il(?:iler['’]e[\\s\\xa0]*Mektup|Iler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|İlIler’e[\\s\\xa0]*Mektup))|Il(?:İp(?:İliler’e[\\s\\xa0]*Mektup|il(?:[iI]ler(?:[’']e[\\s\\xa0]*Mektup)|İler’e[\\s\\xa0]*Mektup))|ip[Ii]l(?:(?:[Ii]lere[\\s\\xa0]*Mektup|İler[’']e[\\s\\xa0]*Mektup))|Ip(?:Ililere[\\s\\xa0]*Mektup|il(?:[Ii]lere[\\s\\xa0]*Mektup|İler[’']e[\\s\\xa0]*Mektup)))|il(?:İp(?:İlIlere[\\s\\xa0]*Mektup|il[iI]ler(?:[’']e[\\s\\xa0]*Mektup)|Ililer['’]e[\\s\\xa0]*Mektup)|ip(?:Il(?:[Ii]lere[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|il(?:[Ii]lere[\\s\\xa0]*Mektup|İler’e[\\s\\xa0]*Mektup))|Ip(?:ililere[\\s\\xa0]*Mektup|Il(?:ilere[\\s\\xa0]*Mektup|İler[’']e[\\s\\xa0]*Mektup))))))|(?:Pavlus(?:'tan[\\s\\xa0]*F(?:Il(?:İpİlİler|ipil(?:iler'e[\\s\\xa0]*Mektup|İler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|il(?:Ip(?:IlIlere[\\s\\xa0]*Mektup|İlİler'e[\\s\\xa0]*Mektup)|ipİl(?:Ilere[\\s\\xa0]*Mektup|İler’e[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup)|İp(?:il(?:ilere[\\s\\xa0]*Mektup|Iler[’']e[\\s\\xa0]*Mektup|İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|İliler['’]e[\\s\\xa0]*Mektup))|İl(?:Ip(?:İl(?:iler(?:e[\\s\\xa0]*Mektup)?|İler)|il(?:İler[’']e[\\s\\xa0]*Mektup|iler’e[\\s\\xa0]*Mektup)|Ililere[\\s\\xa0]*Mektup)|İp(?:İlIler|il[iİ]ler)|ipililer'e[\\s\\xa0]*Mektup))|tan[\\s\\xa0]*F(?:Il(?:Ip(?:İliler'e[\\s\\xa0]*Mektup|Ililer’e[\\s\\xa0]*Mektup)|İp(?:ilİlere[\\s\\xa0]*Mektup|İlİler)|ip(?:IlIler'e[\\s\\xa0]*Mektup|ilİlere[\\s\\xa0]*Mektup))|İl(?:İp(?:İliler|IlIler|ilİler)|ip(?:ililer|İlilere[\\s\\xa0]*Mektup|Ilİler)|Ipİl(?:İler|iler'e[\\s\\xa0]*Mektup))|il(?:Ip(?:ilİler|İl(?:ilere[\\s\\xa0]*Mektup|İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|ipİl(?:iler’e[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|İp(?:İliler'e[\\s\\xa0]*Mektup|IlIler(?:e[\\s\\xa0]*Mektup)?|ilİler'e[\\s\\xa0]*Mektup)))|’tan[\\s\\xa0]*F(?:il(?:ip(?:ilIler’e[\\s\\xa0]*Mektup|İl[İI]ler)|İp(?:il(?:Iler’e[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|İlİler)|IpIliler'e[\\s\\xa0]*Mektup)|Il(?:İp(?:Ililer'e[\\s\\xa0]*Mektup|ilİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İliler’e[\\s\\xa0]*Mektup)|ipIlİler'e[\\s\\xa0]*Mektup|Ipililere[\\s\\xa0]*Mektup)|İl(?:Ip(?:İliler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|ilİler)|ip(?:Ililer'e[\\s\\xa0]*Mektup|ilIlere[\\s\\xa0]*Mektup|İlİler)|İp(?:İlIler|Il[iİ]ler))))|F(?:Ilİpİlİler[’']e[\\s\\xa0]*Mektup|İl(?:Ipİlİler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|ip(?:İl[Iİ]ler’e[\\s\\xa0]*Mektup|Ilİlere[\\s\\xa0]*Mektup)|İp(?:Ililer'e[\\s\\xa0]*Mektup|il(?:Iler’e[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|İl(?:iler’e[\\s\\xa0]*Mektup|İler)))|ilİpİl[Iİ]lere[\\s\\xa0]*Mektup))|(?:F(?:ilİpİlİler['’]e[\\s\\xa0]*Mektup|İl(?:Ip(?:İl[Iİ]ler’e[\\s\\xa0]*Mektup|ilİlere[\\s\\xa0]*Mektup)|İpilIler'e[\\s\\xa0]*Mektup))|Pavlus(?:tan[\\s\\xa0]*F(?:İl(?:ipİlIler'e[\\s\\xa0]*Mektup|Ipİlilere[\\s\\xa0]*Mektup)|Il(?:ipİlİler’e[\\s\\xa0]*Mektup|IpilIler’e[\\s\\xa0]*Mektup)|il(?:ip(?:İl(?:İlere[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup)|Ilİlere[\\s\\xa0]*Mektup)|Ip(?:Ililer'e[\\s\\xa0]*Mektup|İlİler'e[\\s\\xa0]*Mektup)|İp(?:İlIler'e[\\s\\xa0]*Mektup|Ilİler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))))|'tan[\\s\\xa0]*F(?:ilİp(?:İlIler'e[\\s\\xa0]*Mektup|Il(?:ilere[\\s\\xa0]*Mektup|İler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|Il(?:İp(?:ililer'e[\\s\\xa0]*Mektup|İliler’e[\\s\\xa0]*Mektup)|ipİlİler'e[\\s\\xa0]*Mektup)|İl(?:Ip(?:ilIlere[\\s\\xa0]*Mektup|Ililer’e[\\s\\xa0]*Mektup)|ipilİler’e[\\s\\xa0]*Mektup))|’tan[\\s\\xa0]*F(?:Ilİpilİler'e[\\s\\xa0]*Mektup|İlIpililer'e[\\s\\xa0]*Mektup|ilipIlIler’e[\\s\\xa0]*Mektup)))|(?:Fİl(?:ip(?:İliler’e[\\s\\xa0]*Mektup|ilİlere[\\s\\xa0]*Mektup)|Ip(?:İliler’e[\\s\\xa0]*Mektup|Ilİlere[\\s\\xa0]*Mektup)|İpIlIler'e[\\s\\xa0]*Mektup)|Pavlus(?:’tan[\\s\\xa0]*F(?:İl(?:ip(?:IlIler'e[\\s\\xa0]*Mektup|il[Ii]ler'e[\\s\\xa0]*Mektup)|IpIliler'e[\\s\\xa0]*Mektup)|il(?:Ip(?:Il[Ii]ler’e[\\s\\xa0]*Mektup|ililer’e[\\s\\xa0]*Mektup)|ip[iI]liler’e[\\s\\xa0]*Mektup)|Il(?:Ip(?:il[Ii]ler’e[\\s\\xa0]*Mektup|Ililer’e[\\s\\xa0]*Mektup)|ip[Ii]l(?:[iI]ler’e[\\s\\xa0]*Mektup)))|'tan[\\s\\xa0]*F(?:Ilİp(?:Ililer(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|il(?:ilere[\\s\\xa0]*Mektup|Iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|ilİpIl(?:Iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|iler'e[\\s\\xa0]*Mektup)|İl(?:ip(?:IlIler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|il(?:[Ii]ler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|Ipil(?:ilere[\\s\\xa0]*Mektup|Iler’e[\\s\\xa0]*Mektup)))|tan[\\s\\xa0]*F(?:Il(?:Ip(?:Ililer'e[\\s\\xa0]*Mektup|il(?:iler[’']e[\\s\\xa0]*Mektup|Iler'e[\\s\\xa0]*Mektup))|ip(?:İlIler'e[\\s\\xa0]*Mektup|Il(?:İlere[\\s\\xa0]*Mektup|iler[’']e[\\s\\xa0]*Mektup)|il[Ii]ler(?:[’']e[\\s\\xa0]*Mektup)))|il(?:ip(?:İlIler'e[\\s\\xa0]*Mektup|Il(?:Iler['’]e[\\s\\xa0]*Mektup|iler’e[\\s\\xa0]*Mektup)|il(?:İlere[\\s\\xa0]*Mektup|[iI]ler(?:['’]e[\\s\\xa0]*Mektup)))|Ip(?:Il(?:İlere[\\s\\xa0]*Mektup|Iler['’]e[\\s\\xa0]*Mektup|iler’e[\\s\\xa0]*Mektup)|il(?:İlere[\\s\\xa0]*Mektup|[iI]ler(?:['’]e[\\s\\xa0]*Mektup))|İl[Ii]ler'e[\\s\\xa0]*Mektup)))))|Pavlus(?:’tan[\\s\\xa0]*FİlIpilIlere[\\s\\xa0]*Mektup|'tan[\\s\\xa0]*Fİlipİlilere[\\s\\xa0]*Mektup)|(?:F(?:ilİpIlİler'e[\\s\\xa0]*Mektup|Il(?:Ip(?:İlİler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|ilIler’e[\\s\\xa0]*Mektup)|İpİl(?:İlere[\\s\\xa0]*Mektup|Iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|İl(?:ipİlİler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|IpIl[iİ]ler’e[\\s\\xa0]*Mektup|İp(?:İlIler|IlIler’e[\\s\\xa0]*Mektup|ilİler)))|Pavlus(?:’tan[\\s\\xa0]*F(?:il(?:İp(?:ilIler'e[\\s\\xa0]*Mektup|Ilİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İlIler’e[\\s\\xa0]*Mektup)|ip(?:İliler|ilİler'e[\\s\\xa0]*Mektup)|IpIlIler'e[\\s\\xa0]*Mektup)|Il(?:İp(?:Ililer’e[\\s\\xa0]*Mektup|İlİler)|Ip(?:ilIlere[\\s\\xa0]*Mektup|İlİler))|İl(?:İpilIler|Ipİlİler|ip(?:Ililer|İliler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|ilİler)))|tan[\\s\\xa0]*F(?:İl(?:İpililer|ip(?:IlIler|İl[Iİ]ler)|IpIlİler)|Il(?:İp(?:İliler|Ililere[\\s\\xa0]*Mektup)|Ipİliler’e[\\s\\xa0]*Mektup)|il(?:İp(?:ilIler|[Iİ]lİler)|Ipİlİler|ip(?:İlilere[\\s\\xa0]*Mektup|il[İI]ler)))|'tan[\\s\\xa0]*F(?:İl(?:ip(?:Ilİler'e[\\s\\xa0]*Mektup|İlİler)|İpIlIler|Ip(?:Ililer'e[\\s\\xa0]*Mektup|İlIler))|il(?:ipİlIler'e[\\s\\xa0]*Mektup|İp(?:IlIler’e[\\s\\xa0]*Mektup|İl[Iİ]ler)|Ip(?:ilİler’e[\\s\\xa0]*Mektup|İl(?:ilere[\\s\\xa0]*Mektup|İler’e[\\s\\xa0]*Mektup)|Ilİlere[\\s\\xa0]*Mektup))|Il(?:Ipilİler'e[\\s\\xa0]*Mektup|ip(?:Ililer'e[\\s\\xa0]*Mektup|ililere[\\s\\xa0]*Mektup)|İpilİler))))|(?:F(?:Ilİpİlilere[\\s\\xa0]*Mektup|İl(?:Ip(?:ilİler’e[\\s\\xa0]*Mektup|IlIler’e[\\s\\xa0]*Mektup)|İpililer’e[\\s\\xa0]*Mektup)|ilİpİlIler'e[\\s\\xa0]*Mektup)|Pavlus(?:'tan[\\s\\xa0]*F(?:İlIpilIler'e[\\s\\xa0]*Mektup|ilIpİliler'e[\\s\\xa0]*Mektup)|’tan[\\s\\xa0]*FIlIpilİler'e[\\s\\xa0]*Mektup|tan[\\s\\xa0]*F(?:Ilİpililere[\\s\\xa0]*Mektup|ilIpİlIler’e[\\s\\xa0]*Mektup)))|(?:Pavlus(?:'tan[\\s\\xa0]*F(?:Il(?:Ipİliler'e[\\s\\xa0]*Mektup|ipİlIler'e[\\s\\xa0]*Mektup)|ilIpİlIler'e[\\s\\xa0]*Mektup|İl(?:ipIl[iI]ler'e[\\s\\xa0]*Mektup|Ipililer'e[\\s\\xa0]*Mektup))|’tan[\\s\\xa0]*F(?:ilIp[Ii]lİler'e[\\s\\xa0]*Mektup|Ilipilİler'e[\\s\\xa0]*Mektup)|tan[\\s\\xa0]*F(?:Il(?:ipİliler’e[\\s\\xa0]*Mektup|İpilIlere[\\s\\xa0]*Mektup)|il(?:İp(?:Ililere[\\s\\xa0]*Mektup|ilIlere[\\s\\xa0]*Mektup)|ipİlIler’e[\\s\\xa0]*Mektup|Ipİliler’e[\\s\\xa0]*Mektup)))|F(?:İl(?:ip[iI]l(?:[İIi]ler’e[\\s\\xa0]*Mektup)|Ipil[iI]ler’e[\\s\\xa0]*Mektup)|ilİpİliler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Ilİpİliler'e[\\s\\xa0]*Mektup))|Pavlus(?:’tan[\\s\\xa0]*FİlipIlilere[\\s\\xa0]*Mektup|tan[\\s\\xa0]*FilIpİlIlere[\\s\\xa0]*Mektup)|(?:Pavlus(?:tan[\\s\\xa0]*F(?:Il(?:İp(?:ililer|İlIler|Ilİler)|Ipililer|ip(?:İl[iİ]ler|ilİler))|İl(?:Ip(?:IlIler|ilİler)|ipİliler|İpIliler))|'tan[\\s\\xa0]*F(?:Ilipİlilere[\\s\\xa0]*Mektup|İl(?:İpIliler|IpIlİler|ip[Iİ]liler)|il(?:Ipİliler|ip(?:ilIler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Ilİler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İlİler)|İp(?:İliler|Ililer’e[\\s\\xa0]*Mektup|ilİler)))|’tan[\\s\\xa0]*F(?:İl(?:İpililer|Ip(?:İlIler|Il[İI]ler))|il(?:İpIl(?:Iler’e[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup)|ipilİler|Ip(?:ilIlere[\\s\\xa0]*Mektup|İlİler))|Il(?:Ip(?:Ililer'e[\\s\\xa0]*Mektup|İlIler)|İp(?:İliler|ilİler))))|F(?:il(?:Ipİl(?:iler’e[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|İp(?:Il(?:Ilere[\\s\\xa0]*Mektup|İler’e[\\s\\xa0]*Mektup)|İliler’e[\\s\\xa0]*Mektup)|ipİlİlere[\\s\\xa0]*Mektup)|Il(?:Ip(?:İl(?:İler’e[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup)|IlIler’e[\\s\\xa0]*Mektup)|İp(?:Ilİler'e[\\s\\xa0]*Mektup|ilİlere[\\s\\xa0]*Mektup|İlİler))|İl(?:Ip(?:İliler'e[\\s\\xa0]*Mektup|Ilİler'e[\\s\\xa0]*Mektup)|ip(?:IlIler'e[\\s\\xa0]*Mektup|İl(?:Ilere[\\s\\xa0]*Mektup|İler))|İp(?:İliler|Ilİler))))|(?:F(?:Il(?:ip(?:İlİler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|ilIler’e[\\s\\xa0]*Mektup)|İpIlİlere[\\s\\xa0]*Mektup)|ilIpİl(?:İler’e[\\s\\xa0]*Mektup|Iler'e[\\s\\xa0]*Mektup)|İl(?:IpİlIler'e[\\s\\xa0]*Mektup|ipilİler'e[\\s\\xa0]*Mektup))|Pavlus(?:’tan[\\s\\xa0]*F(?:ilİpililer'e[\\s\\xa0]*Mektup|IlİpilIler’e[\\s\\xa0]*Mektup)|'tan[\\s\\xa0]*FIl(?:Ipilİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İpililer’e[\\s\\xa0]*Mektup)))|(?:F(?:Il(?:Ip(?:İlIler'e[\\s\\xa0]*Mektup|[Ii]liler’e[\\s\\xa0]*Mektup)|ip(?:İl(?:İler’e[\\s\\xa0]*Mektup|[Ii]ler'e[\\s\\xa0]*Mektup)|Il[iI]ler’e[\\s\\xa0]*Mektup|ililer’e[\\s\\xa0]*Mektup))|İl(?:Ipilİler'e[\\s\\xa0]*Mektup|ip(?:Ilİler'e[\\s\\xa0]*Mektup|İl[iI]ler'e[\\s\\xa0]*Mektup))|il(?:ip(?:İl(?:İler['’]e[\\s\\xa0]*Mektup|[Ii]ler'e[\\s\\xa0]*Mektup)|[Ii]l(?:[Ii]ler’e[\\s\\xa0]*Mektup))|Ip(?:[iI]l(?:[iI]ler’e[\\s\\xa0]*Mektup)|İl(?:İlere[\\s\\xa0]*Mektup|iler'e[\\s\\xa0]*Mektup))|İp[Ii]lİlere[\\s\\xa0]*Mektup))|Pavlus(?:'tan[\\s\\xa0]*F(?:Il(?:ipIlİler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|İpIliler’e[\\s\\xa0]*Mektup)|il(?:Ip(?:Ilİler’e[\\s\\xa0]*Mektup|ilİlere[\\s\\xa0]*Mektup)|İpililer’e[\\s\\xa0]*Mektup))|’tan[\\s\\xa0]*F(?:Ilİpil(?:iler['’]e[\\s\\xa0]*Mektup|Iler'e[\\s\\xa0]*Mektup)|ilİpIliler’e[\\s\\xa0]*Mektup)))|Pavlus’tan[\\s\\xa0]*FİlIpililere[\\s\\xa0]*Mektup|(?:Pavlus(?:’tan[\\s\\xa0]*F(?:Ilip(?:Il(?:Ilere[\\s\\xa0]*Mektup|İler)|İl[Iİ]ler)|İlip(?:İliler|Il[İI]ler)|il(?:İp(?:İlIler|Il[Iİ]ler)|IpilIler'e[\\s\\xa0]*Mektup))|tan[\\s\\xa0]*F(?:il(?:IpIlİler|İp(?:ililer|İlIler))|Il(?:Ipİlİler|İpilİler|ip(?:ililer|İlIler(?:e[\\s\\xa0]*Mektup)?))|İl(?:ip(?:Ililer|ilİler)|Ipİliler))|'tan[\\s\\xa0]*F(?:Il(?:Ip(?:ilIler'e[\\s\\xa0]*Mektup|[Iİ]lilere[\\s\\xa0]*Mektup)|ipİliler|İp(?:İlIler|Ilİler))|İl(?:IpIliler|ip(?:İlIler|ilİler))|il(?:Ip(?:Ilİler'e[\\s\\xa0]*Mektup|İlİler)|İpililer)))|F(?:ilİp(?:Ililer'e[\\s\\xa0]*Mektup|İlİler)|İl(?:Ipİl(?:ilere[\\s\\xa0]*Mektup|İler)|İpIliler|ipIliler'e[\\s\\xa0]*Mektup)|Il(?:ip(?:ilİler’e[\\s\\xa0]*Mektup|Ilİlere[\\s\\xa0]*Mektup)|İp(?:Ilİler’e[\\s\\xa0]*Mektup|İliler’e[\\s\\xa0]*Mektup|il(?:ilere[\\s\\xa0]*Mektup|Iler’e[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup))|IpİlIler’e[\\s\\xa0]*Mektup)))|(?:Pavlus(?:'tan[\\s\\xa0]*F(?:IlIpililer'e[\\s\\xa0]*Mektup|ilip(?:İlilere[\\s\\xa0]*Mektup|il(?:ilere[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)))|tan[\\s\\xa0]*FilipİlIlere[\\s\\xa0]*Mektup)|F(?:ilİpil(?:Ilere[\\s\\xa0]*Mektup|İler'e[\\s\\xa0]*Mektup)|Ilİpilİler’e[\\s\\xa0]*Mektup))|(?:F(?:Ilİp(?:ilIlere[\\s\\xa0]*Mektup|Il[Ii]lere[\\s\\xa0]*Mektup)|ilİp(?:Ililere[\\s\\xa0]*Mektup|il(?:ilere[\\s\\xa0]*Mektup|İler’e[\\s\\xa0]*Mektup)))|Pavlus(?:'tan[\\s\\xa0]*F(?:il(?:ip(?:ililer'e[\\s\\xa0]*Mektup|Il(?:[Ii]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|Ip(?:il(?:(?:[Ii]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|İler'e[\\s\\xa0]*Mektup)|İlIlere[\\s\\xa0]*Mektup|Il(?:iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Iler'e[\\s\\xa0]*Mektup)))|Il(?:ip(?:ilIler'e[\\s\\xa0]*Mektup|Il(?:ilere[\\s\\xa0]*Mektup|Iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|Ipil[iI]lere[\\s\\xa0]*Mektup))|tan[\\s\\xa0]*FIlIpİlilere[\\s\\xa0]*Mektup))|(?:F(?:il(?:İp(?:İlIler’e[\\s\\xa0]*Mektup|ililer’e[\\s\\xa0]*Mektup)|IpIlİler’e[\\s\\xa0]*Mektup)|Il(?:İpilIler'e[\\s\\xa0]*Mektup|ip(?:İlIler(?:’e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|Ilİler'e[\\s\\xa0]*Mektup|ilİlere[\\s\\xa0]*Mektup))|İl(?:İpilIler|Ip(?:IlIler'e[\\s\\xa0]*Mektup|İlIlere[\\s\\xa0]*Mektup)))|Pavlus(?:'tan[\\s\\xa0]*F(?:ilİpIl[iİ]ler|İlIp(?:IlIler|ilİler)|Il(?:İpİliler|ipilIler|Ip(?:İl[Iİ]ler|Ilİler)))|tan[\\s\\xa0]*F(?:il(?:IpİlIler|İp(?:İliler|ilİler)|ip(?:Ililer|İlİler))|Il(?:İpIliler|IpIlİler)|İl(?:IpİlIler|ipilIler))|’tan[\\s\\xa0]*F(?:Il(?:İpİlIler|Ip(?:İliler|Ilİler)|ipililer'e[\\s\\xa0]*Mektup)|İl(?:ip(?:İlIler|ililere[\\s\\xa0]*Mektup)|Ipililer)|il(?:İpil[Iİ]ler|ipIlIlere[\\s\\xa0]*Mektup))))|(?:Pavlus’tan[\\s\\xa0]*FİlIpIlilere[\\s\\xa0]*Mektup|F(?:İl(?:ipil[iI]ler'e[\\s\\xa0]*Mektup|Ip(?:Ililer'e[\\s\\xa0]*Mektup|il[iI]ler'e[\\s\\xa0]*Mektup))|Il[Ii]pİliler’e[\\s\\xa0]*Mektup|il(?:IpİlIler’e[\\s\\xa0]*Mektup|ipİl[iI]ler’e[\\s\\xa0]*Mektup)))|(?:Pavlus(?:’tan[\\s\\xa0]*F(?:İlIp(?:İliler|ilIler)|Il(?:İp(?:ilIler|Ilİler)|ip(?:İliler|Ililere[\\s\\xa0]*Mektup)|Ipilİler)|il(?:İpİliler|Ipililer'e[\\s\\xa0]*Mektup))|tan[\\s\\xa0]*F(?:ilipIlİler|Il(?:İpIlIler|Ip(?:Ililer|İlIler))|İlIpIliler)|'tan[\\s\\xa0]*F(?:Il(?:İpilIler|ipİlİler)|il(?:IpilIler|ip(?:İlIler|ilİler))|İlip(?:ilIler|Ilİler)))|F(?:İl(?:ipİlilere[\\s\\xa0]*Mektup|İpIlIler|IpIlilere[\\s\\xa0]*Mektup)|il(?:ipIlİlere[\\s\\xa0]*Mektup|Ipilİler’e[\\s\\xa0]*Mektup|İpililer'e[\\s\\xa0]*Mektup)|Il(?:İp[Iİ]lIler’e[\\s\\xa0]*Mektup|Ip(?:İlIlere[\\s\\xa0]*Mektup|Ilİler'e[\\s\\xa0]*Mektup))))|(?:F(?:IlIp[Ii]lİlere[\\s\\xa0]*Mektup|il(?:ipilİlere[\\s\\xa0]*Mektup|Ip[Ii]lİlere[\\s\\xa0]*Mektup))|Pavlus’tan[\\s\\xa0]*F(?:ilip[Ii]l(?:[Ii]ler'e[\\s\\xa0]*Mektup)|Il(?:Ipil[iI]ler'e[\\s\\xa0]*Mektup|ip[Ii]lIler'e[\\s\\xa0]*Mektup)))|(?:F(?:İl(?:İpililer|ip(?:il(?:Ilere[\\s\\xa0]*Mektup|İler)|İliler))|il(?:İpilIler[’']e[\\s\\xa0]*Mektup|IpIliler'e[\\s\\xa0]*Mektup)|Il(?:ipilİler'e[\\s\\xa0]*Mektup|Ip(?:İl(?:ilere[\\s\\xa0]*Mektup|İler)|ilİler’e[\\s\\xa0]*Mektup)|İp(?:İliler|Ilİler)))|Pavlus(?:’tan[\\s\\xa0]*F(?:il(?:ipililere[\\s\\xa0]*Mektup|Ip(?:İliler|ilIler))|Il(?:İpIliler|ipilİler)|İlIpIliler)|tan[\\s\\xa0]*F(?:ilip[iİ]liler|Il(?:İpilIler|Ipilİler)|İlIpilIler)|'tan[\\s\\xa0]*F(?:Il(?:Ip(?:Ililer|ilİler)|ipİlIler|İpIliler)|İlipililer)))|(?:F(?:il(?:ip(?:İl(?:(?:[iI]ler(?:e[\\s\\xa0]*Mektup)?)|İler)|(?:[Ii]l(?:İler(?:[’']e[\\s\\xa0]*Mektup)?|(?:[Ii]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?))))|Ip(?:İl(?:(?:[iI]ler(?:e[\\s\\xa0]*Mektup)?)|İler)|Il(?:iler(?:e[\\s\\xa0]*Mektup)?|Iler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?|İler(?:'e[\\s\\xa0]*Mektup)?)|il(?:(?:[iI]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?)|İler(?:'e[\\s\\xa0]*Mektup)?))|İp(?:Il(?:Iler(?:['’]e[\\s\\xa0]*Mektup)?|iler(?:’e[\\s\\xa0]*Mektup)?|İler)|il[Iİi]ler|İl[Ii]ler))|İl(?:Ip(?:Il(?:Iler(?:e[\\s\\xa0]*Mektup)?|[İi]ler)|il(?:(?:[Ii]ler(?:e[\\s\\xa0]*Mektup)?)|İler)|İl[iI]ler)|ip(?:Il(?:(?:[iI]ler(?:e[\\s\\xa0]*Mektup)?)|İler)|İlIler|il(?:iler(?:e[\\s\\xa0]*Mektup)?|Iler)))|Il(?:ip(?:İl(?:iler(?:e[\\s\\xa0]*Mektup)?|[Iİ]ler)|il(?:(?:[Ii]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?)|İler)|Il(?:İler(?:’e[\\s\\xa0]*Mektup)?|(?:[iI]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?)))|Ip(?:İl[Ii]ler|il(?:(?:[Ii]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?)|İler(?:'e[\\s\\xa0]*Mektup)?)|Il(?:İler(?:’e[\\s\\xa0]*Mektup)?|(?:[Ii]ler(?:'e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)?)))|İp(?:Il(?:iler(?:[’']e[\\s\\xa0]*Mektup)?|Iler(?:'e[\\s\\xa0]*Mektup)?)|İlIler|il(?:iler(?:[’']e[\\s\\xa0]*Mektup)?|[İI]ler))))|Pavlus(?:tan[\\s\\xa0]*F(?:il(?:Ip(?:İliler|[iI]l(?:[Ii]ler))|İpIliler|ip[Iİ]lIler)|İlIpililer|Il(?:ip(?:Il[Iiİ]ler|ilIler)|Ip(?:İliler|[Ii]lIler)))|'tan[\\s\\xa0]*F(?:İl(?:ipIlIler|Ipil[iI]ler)|il(?:ip(?:Il[iİI]ler|İliler|il[Ii]ler)|İp[iI]lIler|Ip(?:Il[İIi]ler|İlIler|il[İi]ler))|Il(?:İp(?:ililer|IlIler)|Ip(?:İliler|IlIler|il[iI]ler)|ip(?:Il[Iiİ]ler|il[İi]ler)))|’tan[\\s\\xa0]*F(?:il(?:İp[Ii]liler|ip(?:Il(?:iler(?:e[\\s\\xa0]*Mektup)?|[Iİ]ler)|il[iI]ler)|Ip(?:il(?:iler(?:e[\\s\\xa0]*Mektup)?|İler)|Il(?:(?:[Ii]ler(?:e[\\s\\xa0]*Mektup)?)|İler)|İlIler))|Il(?:İp(?:ililer|IlIler)|Ip(?:il[Ii]ler|Il(?:iler(?:e[\\s\\xa0]*Mektup)?|Iler))|ip(?:Il[Ii]ler|il(?:[iI]ler(?:e[\\s\\xa0]*Mektup)?)))|İlipil[Ii]ler))))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Col"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:[CK]ol|Pavlus(?:tan[\\s\\xa0]*Kolosel[Iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|['’]tan[\\s\\xa0]*Kolosel(?:[Iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))))|Pavlus(?:tan[\\s\\xa0]*Koloseliler(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|[’']tan[\\s\\xa0]*Koloseliler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|(?:Pavlus(?:tan[\\s\\xa0]*Kolosel[İi]ler|’tan[\\s\\xa0]*Kolosel[İI]ler|'tan[\\s\\xa0]*Kolosel[iİ]ler)|Kolosel[iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|KoloselIler(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)|(?:Pavlus(?:’tan[\\s\\xa0]*Koloseliler|'tan[\\s\\xa0]*KoloselIler|tan[\\s\\xa0]*KoloselIler)|Kolosel[İiI]ler))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Thess"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:İk[Iİ](?:[\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler)|nc[Iİ][\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler))))|2(?:[\s\xa0]*Se(?:lan[Iİ]kl(?:[Iİ]ler))?|\.[\s\xa0]*Se(?:lan[Iİ]kl(?:[Iİ]ler))?|Thess|Se)|I(?:I(?:[\s\xa0]*Selan[Iİ]kl(?:[Iİ]ler)|\.[\s\xa0]*Selan[Iİ]kl(?:[Iİ]ler))|k[Iİ](?:[\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler)|nc[Iİ][\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler)))))|Pavlus(?:tan[\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))))))|(?:['’]tan[\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup))))))))))|[Iİ]k(?:[Iİ]nc(?:[Iİ][\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler))))|(?:Selan(?:[Iİi]kl(?:[iIİ]ler(?:(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|(?:[İi]k(?:[iİI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[iİI](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))|Pavlus(?:tan[\s\xa0]*Selan(?:ikl(?:[İiI]ler(?:(?:[’']e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iİI](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|(?:[İi]k(?:[İiI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İiI](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|(?:[İi]k(?:[iIİ](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[Iİ]kl(?:(?:[İI]ler(?:(?:['’]e[\s\xa0]*(?:ik(?:[iİI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup))))|e[\s\xa0]*(?:ik(?:[İIi](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)|[İI]nci[\s\xa0]*Mektup)))))|iler(?:(?:[’']e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İiI](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iIİ](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)))|(?:[İi]k(?:[Iİi](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))|(?:[’']tan[\s\xa0]*Selan(?:ikl(?:[iIİ]ler(?:(?:[’']e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İIi](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İIi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İIi](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[Iİ]kl(?:(?:[İI]ler(?:(?:[’']e[\s\xa0]*(?:ik(?:[iİI](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup))|(?:[Iİ]k(?:i(?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)|[İI]nci[\s\xa0]*Mektup))))|e[\s\xa0]*(?:ik(?:[İIi](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))))|iler(?:(?:['’]e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İIi](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|(?:[İi]k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iİI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|(?:[İi]k(?:[İIi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))))|İk(?:[Iİ](?:nc(?:i[\s\xa0]*Selan(?:[Iİi]kl(?:[iIİ]ler)|[İI][\s\xa0]*Selan(?:(?:[İI]kliler|ikl[iİI]ler)))|[\s\xa0]*Selan(?:[İI]kliler|ikl[Iiİ]ler)))|i(?:[\s\xa0]*Selan[İIi]kl(?:[İIi]ler)|nc[iIİ][\s\xa0]*Selan(?:[Iiİ]kl(?:[iIİ]ler))))|2(?:[\s\xa0]*Selan(?:[İI]kliler|ikl[iİI]ler)|\.[\s\xa0]*Selan(?:[İI]kliler|ikl[iIİ]ler))|I(?:k(?:[İI](?:nc(?:i[\s\xa0]*Selan(?:[Iİi]kl(?:[Iİi]ler)|[Iİ][\s\xa0]*Selan(?:(?:[Iİ]kliler|ikl[iIİ]ler)))|[\s\xa0]*Selan(?:[Iİ]kliler|ikl[iİI]ler)))|i(?:[\s\xa0]*Selan[Iiİ]kl(?:[Iiİ]ler)|nc[İiI][\s\xa0]*Selan(?:[İIi]kl(?:[İIi]ler))))|I(?:[\s\xa0]*Selan(?:[Iİ]kliler|ikl[iİI]ler)|\.[\s\xa0]*Selan(?:[İI]kliler|ikl[Iİi]ler)))|ik[iIİ](?:[\s\xa0]*Selan(?:[iIİ]kl(?:[İiI]ler)|nc[Iiİ][\s\xa0]*Selan(?:[iİI]kl(?:[İiI]ler)))))|(?:ik[iIİ]nc(?:[Iiİ][\s\xa0]*Selan(?:[iİI]kl(?:[İiI]ler)))|[Iİ]k(?:[İI](?:nc(?:[Iİ][\s\xa0]*Selan(?:(?:[Iİ]kliler|ikl[iIİ]ler))|[\s\xa0]*Selan(?:[Iİ]kliler|ikl[iİI]ler)))))|[Iİ]k(?:[İI][\s\xa0]*Selan(?:(?:[Iİ]kliler|ikl[iİI]ler))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Thess"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:Pavlus(?:(?:['’]tan[\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))|(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))))|tan[\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler(?:e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))|(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))))|I(?:[\s\xa0]*Selan[Iİ]kl(?:[Iİ]ler)|\.[\s\xa0]*Selan[Iİ]kl(?:[Iİ]ler)|lk[\s\xa0]*Selan[Iİ]kl(?:[Iİ]ler))|İlk[\s\xa0]*Selan[Iİ]kl(?:[Iİ]ler)|1(?:[\s\xa0]*Se(?:lan[Iİ]kl(?:[Iİ]ler))?|\.[\s\xa0]*Se(?:lan[Iİ]kl(?:[Iİ]ler))?|Thess|Se)|B[Iİ]r(?:[\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler)|[Iİ]nc(?:[Iİ][\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler))))))|B[Iİ]r(?:[Iİ]nc(?:[Iİ][\s\xa0]*Selan(?:[Iİ]kl(?:[Iİ]ler))))|(?:Pavlus(?:(?:[’']tan[\s\xa0]*Selan(?:(?:[İI]kl(?:iler(?:(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iiİ]r(?:[\s\xa0]*Mektup|[İIi]nc(?:[iIİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[iİI][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|(?:[Iİ]ler(?:(?:[’']e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[İIi]nc(?:[İiI][\s\xa0]*Mektup))|[İI]r(?:(?:[İI]nci[\s\xa0]*Mektup|inc[iIİ][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))|e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[Iİi]nc(?:[Iiİ][\s\xa0]*Mektup))|[İI]r(?:(?:[İI]nci[\s\xa0]*Mektup|inc[Iİi][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup)))))|ikl(?:[İIi]ler(?:(?:[’']e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iIİ]r(?:[\s\xa0]*Mektup|[İIi]nc(?:[iIİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[İiI]r(?:[\s\xa0]*Mektup|[İiI]nc(?:[İIi][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))|tan[\s\xa0]*Selan(?:(?:[Iİ]kl(?:iler(?:(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[İIi]r(?:[\s\xa0]*Mektup|[iIİ]nc(?:[Iiİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iİI]r(?:[\s\xa0]*Mektup|[iİI]nc(?:[iİI][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|(?:[İI]ler(?:(?:['’]e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[İIi]nc(?:[iIİ][\s\xa0]*Mektup))|[Iİ]r(?:(?:[Iİ]nci[\s\xa0]*Mektup|inc[İIi][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))|e[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[iİI]nc(?:[İIi][\s\xa0]*Mektup))|[İI]r(?:(?:[Iİ]nci[\s\xa0]*Mektup|inc[İIi][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup)))))|ikl(?:[iIİ]ler(?:(?:['’]e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[iİI]nc(?:[iIİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[İIi]nc(?:[İiI][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))))|Selan(?:[İiI]kl(?:[Iİi]ler(?:(?:[’']e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[iIİ]r(?:[\s\xa0]*Mektup|[İiI]nc(?:[İiI][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|e[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[İIi]r(?:[\s\xa0]*Mektup|[İiI]nc(?:[İiI][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))|I(?:lk[\s\xa0]*Selan(?:[Iİ]kliler|ikl[iIİ]ler)|[\s\xa0]*Selan(?:[Iİ]kliler|ikl[iİI]ler)|\.[\s\xa0]*Selan(?:[İI]kliler|ikl[Iiİ]ler))|1(?:[\s\xa0]*Selan(?:[Iİ]kliler|ikl[İIi]ler)|\.[\s\xa0]*Selan(?:[İI]kliler|ikl[Iİi]ler))|İlk[\s\xa0]*Selan(?:[Iİ]kliler|ikl[Iİi]ler)|B(?:ir(?:[\s\xa0]*Selan[Iİi]kl(?:[iIİ]ler)|[İiI]nc(?:[İiI][\s\xa0]*Selan(?:[İIi]kl(?:[iIİ]ler))))|[Iİ]r(?:inc(?:[iIİ][\s\xa0]*Selan(?:[iİI]kl(?:[Iiİ]ler))|[Iİ]nc(?:i[\s\xa0]*Selan(?:[İIi]kl(?:[Iiİ]ler)|[İI][\s\xa0]*Selan(?:(?:[İI]kliler|ikl[İIi]ler))))|[\s\xa0]*Selan(?:[İI]kliler|ikl[İIi]ler))))|ilk[\s\xa0]*Selan[İIi]kl(?:[Iİi]ler))|B[Iİ]r(?:(?:[Iİ]nc(?:i[\s\xa0]*Selan(?:[İIi]kl(?:[Iiİ]ler)|[İI][\s\xa0]*Selan(?:(?:[İI]kliler|ikl[İIi]ler))))|[\s\xa0]*Selan(?:[İI]kliler|ikl[İIi]ler)))|B[İI]r(?:[İI]nc(?:[İI][\s\xa0]*Selan(?:(?:[İI]kliler|ikl[iİI]ler)))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["2Tim"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:I(?:I(?:\.[\s\xa0]*T[Iİ]moteos|[\s\xa0]*T[Iİ]moteos)|k[Iİ](?:nc(?:[Iİ][\s\xa0]*T(?:[Iİ]moteos)|[\s\xa0]*T[Iİ]moteos)))|İk[Iİ](?:nc(?:[Iİ][\s\xa0]*T(?:[Iİ]moteos)|[\s\xa0]*T[Iİ]moteos))|Pavlus(?:tan[\s\xa0]*T(?:[Iİ]moteos(?:a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|(?:['’]a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup))))))|(?:['’]tan[\s\xa0]*T(?:[Iİ]moteos(?:a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|(?:['’]a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|İk(?:[Iİ](?:[\s\xa0]*Mektup|nc[Iİ][\s\xa0]*Mektup))))))))|2(?:Tim?|[\s\xa0]*T(?:[Iİ](?:moteos)?)|\.[\s\xa0]*T(?:[Iİ](?:moteos)?)))|[Iİ]k(?:[Iİ][\s\xa0]*T(?:[Iİ]moteos))|(?:I(?:I(?:[\s\xa0]*Timoteos|\.[\s\xa0]*Timoteos)|k(?:[İI](?:nc(?:i[\s\xa0]*T(?:[İIi]moteos|[İI][\s\xa0]*Timoteos)|[\s\xa0]*Timoteos))|i(?:[\s\xa0]*T[İIi]moteos|nc[İIi][\s\xa0]*T(?:[Iiİ]moteos))))|Pavlus(?:tan[\s\xa0]*T(?:imoteos(?:(?:['’]a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[İIi](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|(?:[iİ]k(?:[iİI](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İiI](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|(?:[Iİ]moteos(?:a[\s\xa0]*(?:ik(?:[Iiİ](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup))|(?:[Iİ]k(?:i(?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))|(?:['’]a[\s\xa0]*(?:ik(?:[Iİi](?:[\s\xa0]*Mektup|nc[Iiİ][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))))))|(?:['’]tan[\s\xa0]*T(?:imoteos(?:(?:[’']a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iİi](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|(?:[İi]k(?:[iİI](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iİI](?:[\s\xa0]*Mektup|nc[İiI][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İiI](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|(?:[Iİ]moteos(?:a[\s\xa0]*(?:ik(?:[İiI](?:[\s\xa0]*Mektup|nc[iİI][\s\xa0]*Mektup))|(?:[İI]k(?:i(?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))|(?:[’']a[\s\xa0]*(?:ik(?:[Iiİ](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup))|(?:[Iİ]k(?:i(?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)|[Iİ]nci[\s\xa0]*Mektup)))))))))|2(?:[\s\xa0]*Ti(?:moteos)?|\.[\s\xa0]*Ti(?:moteos)?)|T(?:[İiI]moteos(?:(?:[’']a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[iİI](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)))|(?:[iİ]k(?:[İIi](?:[\s\xa0]*Mektup|nc[iIİ][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:I(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|k(?:[Iiİ](?:[\s\xa0]*Mektup|nc[İIi][\s\xa0]*Mektup)))|(?:[İi]k(?:[iİI](?:[\s\xa0]*Mektup|nc[Iİi][\s\xa0]*Mektup)))|2(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|İk(?:[Iİ](?:nc(?:i[\s\xa0]*T(?:[iİI]moteos|[İI][\s\xa0]*Timoteos)|[\s\xa0]*Timoteos))|i(?:[\s\xa0]*T[Iiİ]moteos|nc[iİI][\s\xa0]*T(?:[iİI]moteos)))|ik[iIİ](?:[\s\xa0]*T(?:[iIİ]moteos|nc[İIi][\s\xa0]*T(?:[İIi]moteos))))|(?:ik[Iiİ]nc(?:[Iiİ][\s\xa0]*T(?:[iIİ]moteos))|(?:[İI]k(?:[Iİ](?:[\s\xa0]*Timoteos|nc[İI][\s\xa0]*Timoteos)))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Tim"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:B[Iİ]r(?:[\s\xa0]*T(?:[Iİ]moteos|[Iİ]nc(?:[Iİ][\s\xa0]*T(?:[Iİ]moteos))))|I(?:lk[\s\xa0]*T[Iİ]moteos|\.[\s\xa0]*T[Iİ]moteos|[\s\xa0]*T[Iİ]moteos)|1(?:Tim?|[\s\xa0]*T(?:[Iİ](?:moteos)?)|\.[\s\xa0]*T(?:[Iİ](?:moteos)?))|Pavlus(?:tan[\s\xa0]*T(?:[Iİ]moteos(?:a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))|(?:['’]a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))|(?:['’]tan[\s\xa0]*T(?:[Iİ]moteos(?:a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))|(?:['’]a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİ]r(?:[\s\xa0]*Mektup|[Iİ]nc(?:[Iİ][\s\xa0]*Mektup)))|İlk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))))|İlk[\s\xa0]*T[Iİ]moteos)|B[Iİ]r(?:[Iİ]nc(?:[Iİ][\s\xa0]*T(?:[Iİ]moteos)))|(?:T(?:[İiI]moteos(?:(?:[’']a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iiİ]r(?:[\s\xa0]*Mektup|[iIİ]nc(?:[İiI][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[iIİ]nc(?:[Iiİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|I(?:[\s\xa0]*Timoteos|lk[\s\xa0]*Timoteos|\.[\s\xa0]*Timoteos)|1(?:[\s\xa0]*Ti(?:moteos)?|\.[\s\xa0]*Ti(?:moteos)?)|ilk[\s\xa0]*T[Iİi]moteos|B(?:ir(?:[\s\xa0]*T[iIİ]moteos|[İIi]nc(?:[İIi][\s\xa0]*T(?:[iIİ]moteos)))|[İI]r(?:(?:[İI]nc(?:i[\s\xa0]*T(?:[İIi]moteos|[Iİ][\s\xa0]*Timoteos))|[\s\xa0]*Timoteos|inc[Iİi][\s\xa0]*T(?:[iİI]moteos))))|İlk[\s\xa0]*Timoteos|Pavlus(?:tan[\s\xa0]*T(?:(?:[Iİ]moteos(?:a[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[Iİi]nc(?:[İiI][\s\xa0]*Mektup))|[İI]r(?:(?:[Iİ]nci[\s\xa0]*Mektup|inc[Iİi][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup)|(?:['’]a[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[Iiİ][\s\xa0]*Mektup))|[İI]r(?:(?:[İI]nci[\s\xa0]*Mektup|inc[iİI][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))))|imoteos(?:(?:['’]a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[Iİi]nc(?:[Iiİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[İIi]r(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[iIİ][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup))))|(?:[’']tan[\s\xa0]*T(?:(?:[İI]moteos(?:a[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[Iiİ]nc(?:[iİI][\s\xa0]*Mektup))|[İI]r(?:(?:[Iİ]nci[\s\xa0]*Mektup|inc[İIi][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup)|(?:['’]a[\s\xa0]*(?:B(?:ir(?:[\s\xa0]*Mektup|[iIİ]nc(?:[iIİ][\s\xa0]*Mektup))|[İI]r(?:(?:[Iİ]nci[\s\xa0]*Mektup|inc[Iiİ][\s\xa0]*Mektup)))|ilk[\s\xa0]*Mektup))))|imoteos(?:(?:['’]a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iiİ]r(?:[\s\xa0]*Mektup|[iİI]nc(?:[iIİ][\s\xa0]*Mektup)))|[İi]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))|a[\s\xa0]*(?:I(?:[\s\xa0]*Mektup|lk[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)|B(?:[Iİi]r(?:[\s\xa0]*Mektup|[İIi]nc(?:[İiI][\s\xa0]*Mektup)))|[iİ]lk[\s\xa0]*Mektup|1(?:[\s\xa0]*Mektup|\.[\s\xa0]*Mektup)))))))|B[İI]r(?:[İI]nc(?:[Iİ][\s\xa0]*Timoteos)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Titus"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Pavlus(?:['’]tan[\\s\\xa0]*T(?:[Iİ]t(?:[ou]s(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup))))|tan[\\s\\xa0]*T[Iİ]t(?:[ou]s(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup))))|T[Iİ]t)|(?:T(?:it[uo]s(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?)?|[İI]t(?:[uo]s(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?)))|Pavlus(?:['’]tan[\\s\\xa0]*T(?:it(?:[ou]s(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?)|[Iİ]t(?:[ou]s)))|tan[\\s\\xa0]*T(?:it[ou]s(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?)|[Iİ]t(?:[ou]s))))|(?:Pavlus['’]tan[\\s\\xa0]*T(?:[Iİ]t(?:[ou]s))|Tit))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Phlm"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Flm|P(?:hlm|avlus(?:tan[\\s\\xa0]*F[Iİ]l(?:[Iİ]mon(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)))|['’]tan[\\s\\xa0]*F(?:[Iİ]l(?:[Iİ]mon(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)))))))|(?:Pavlus(?:tan[\\s\\xa0]*F(?:il[iIİ]mon(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?)|[İI]l(?:imon(?:(?:['’]a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?|[Iİ]mon)))|[’']tan[\\s\\xa0]*F(?:il(?:[Iİi]mon(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?)|[İI]l(?:imon(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?|[Iİ]mon)))))|F[İiI]l(?:[iIİ]mon(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?)))|Pavlus(?:[’']tan[\\s\\xa0]*F(?:[İI]l(?:imon(?:(?:[’']a[\\s\\xa0]*Mektup|a[\\s\\xa0]*Mektup)?|[Iİ]mon)))|tan[\\s\\xa0]*F[Iİ]l(?:[Iİ]mon))|Pavlus[’']tan[\\s\\xa0]*F(?:[Iİ]l(?:[Iİ]mon)))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Heb"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Heb|[Iİ]br(?:an(?:[Iİ]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))?))|(?:[Iİ]br)|(?:[Iİ]braniler(?:(?:[’']e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup))|ibran[Iİi]ler(?:(?:['’]e[\\s\\xa0]*Mektup|e[\\s\\xa0]*Mektup)))|(?:[İI]bran(?:[İiI]ler)|ibr(?:an[iIİ]ler)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jas"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Yak(?:u(?:b(?:['’]un[\\s\\xa0]*Mektubu|un[\\s\\xa0]*Mektubu)|p(?:['’]un[\\s\\xa0]*Mektubu|un[\\s\\xa0]*Mektubu)?))?|Jas))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Pet"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:2(?:Pet?|\.[\s\xa0]*Pe(?:trus)?|[\s\xa0]*Pe(?:trus)?)|I(?:I(?:[\s\xa0]*Petrus|\.[\s\xa0]*Petrus)|k(?:[Iİ](?:[\s\xa0]*Petrus|nc[Iİ][\s\xa0]*Petrus)))|İk(?:[Iİ](?:[\s\xa0]*Petrus|nc[Iİ][\s\xa0]*Petrus))|Petrus(?:un[\s\xa0]*(?:İk(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu))|2(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|I(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|k(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu))))|(?:['’]un[\s\xa0]*(?:İk(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu))|2(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|I(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)|k(?:[Iİ](?:[\s\xa0]*Mektubu|nc[Iİ][\s\xa0]*Mektubu)))))))|(?:[Iİ]k(?:(?:[İI]nci[\s\xa0]*Petrus|i(?:[\s\xa0]*Petrus|nc[Iİi][\s\xa0]*Petrus)))|Petrus(?:un[\s\xa0]*(?:(?:[Iİ]k(?:i(?:[\s\xa0]*Mektubu|nc[Iiİ][\s\xa0]*Mektubu)|[İI]nci[\s\xa0]*Mektubu))|ik(?:[Iiİ](?:[\s\xa0]*Mektubu|nc[iİI][\s\xa0]*Mektubu)))|(?:[’']un[\s\xa0]*(?:(?:[Iİ]k(?:i(?:[\s\xa0]*Mektubu|nc[Iİi][\s\xa0]*Mektubu)|[İI]nci[\s\xa0]*Mektubu))|ik(?:[Iİi](?:[\s\xa0]*Mektubu|nc[İIi][\s\xa0]*Mektubu)))))|ik(?:[iİI](?:[\s\xa0]*Petrus|nc[İiI][\s\xa0]*Petrus))))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Pet"],
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:Petrus(?:(?:['’]un[\s\xa0]*(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu|lk[\s\xa0]*Mektubu)|İlk[\s\xa0]*Mektubu|B(?:[Iİ]r(?:[\s\xa0]*Mektubu|[Iİ]nc(?:[Iİ][\s\xa0]*Mektubu)))|1(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)))|un[\s\xa0]*(?:I(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu|lk[\s\xa0]*Mektubu)|İlk[\s\xa0]*Mektubu|B(?:[Iİ]r(?:[\s\xa0]*Mektubu|[Iİ]nc(?:[Iİ][\s\xa0]*Mektubu)))|1(?:[\s\xa0]*Mektubu|\.[\s\xa0]*Mektubu)))|1(?:Pet?|\.[\s\xa0]*Pe(?:trus)?|[\s\xa0]*Pe(?:trus)?)|I(?:[\s\xa0]*Petrus|lk[\s\xa0]*Petrus|\.[\s\xa0]*Petrus)|B(?:[Iİ]r(?:[\s\xa0]*Petrus|[Iİ]nc(?:[Iİ][\s\xa0]*Petrus)))|İlk[\s\xa0]*Petrus)|(?:B(?:[İI]r(?:inc(?:[iİI][\s\xa0]*Petrus|[İI]nci[\s\xa0]*Petrus))|ir(?:[\s\xa0]*Petrus|[Iiİ]nc(?:[İIi][\s\xa0]*Petrus)))|Petrus(?:(?:[’']un[\s\xa0]*(?:ilk[\s\xa0]*Mektubu|B(?:[Iİ]r(?:(?:[İI]nci[\s\xa0]*Mektubu|inc[Iiİ][\s\xa0]*Mektubu))|ir(?:[\s\xa0]*Mektubu|[İiI]nc(?:[Iiİ][\s\xa0]*Mektubu)))))|un[\s\xa0]*(?:ilk[\s\xa0]*Mektubu|B(?:[İI]r(?:(?:[Iİ]nci[\s\xa0]*Mektubu|inc[İIi][\s\xa0]*Mektubu))|ir(?:[\s\xa0]*Mektubu|[Iİi]nc(?:[İiI][\s\xa0]*Mektubu)))))|ilk[\s\xa0]*Petrus)|B[İI]r(?:[İI]nci[\s\xa0]*Petrus))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["Jude"],
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Jude|Yah(?:uda(?:n[Iiİı]n[\\s\\xa0]*Mektubu|['’]n(?:[Iiİı]n[\\s\\xa0]*Mektubu))?)?))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Tob"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Tob(?:[Iiİ]t)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Jdt"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")((?:Jdt|Yud[Iiİ]t))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Bar"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Bar(?:uk)?)(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["Sus"],
        apocrypha: true,
        regexp: RegExp("(^|" + bcv_parser.prototype.regexps.pre_book + ")(Su(?:s|zanna))(?:(?=[\\d\\s\\xa0.:,;\\x1e\\x1f&\\(\\)（）\\[\\]/\"'\\*=~\\-\\u2013\\u2014])|$)", "gi")
      }, {
        osis: ["2Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:I(?:I(?:\.[\s\xa0]*Makabeler|[\s\xa0]*Makabeler)|k[Iİ](?:nc(?:[Iİ][\s\xa0]*Makabeler|[\s\xa0]*Makabeler)))|2(?:\.[\s\xa0]*Makabeler|Macc|[\s\xa0]*Makabeler)|İk[Iİ](?:nc(?:[Iİ][\s\xa0]*Makabeler|[\s\xa0]*Makabeler)))|[Iİ]k(?:[Iİ][\s\xa0]*Makabeler)|(?:ik[Iiİ](?:nc(?:[Iİi][\s\xa0]*Makabeler|[\s\xa0]*Makabeler))|[Iİ]k(?:(?:[Iİ]nci[\s\xa0]*Makabeler|i(?:nc[İIi][\s\xa0]*Makabeler|[\s\xa0]*Makabeler))))|ik(?:[Iiİ][\s\xa0]*Makabeler))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["3Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:(?:[UÜ](?:[cç](?:[\s\xa0]*Makabeler|[uü]nc(?:[uü][\s\xa0]*Makabeler))))|3(?:\.[\s\xa0]*Makabeler|Macc|[\s\xa0]*Makabeler)|III(?:\.[\s\xa0]*Makabeler|[\s\xa0]*Makabeler)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["4Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:4(?:\.[\s\xa0]*Makabeler|Macc|[\s\xa0]*Makabeler)|D(?:[oö]r(?:t[\s\xa0]*Makabeler|d[uü]nc(?:[uü][\s\xa0]*Makabeler)))|IV(?:\.[\s\xa0]*Makabeler|[\s\xa0]*Makabeler)))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }, {
        osis: ["1Macc"],
        apocrypha: true,
        regexp: /(^|[^0-9A-Za-zªµºÀ-ÖØ-öø-ɏḀ-ỿⱠ-ⱿꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꟿ])((?:B(?:[Iİ]r(?:[\s\xa0]*Makabeler|[Iİ]nc(?:[Iİ][\s\xa0]*Makabeler)))|1(?:\.[\s\xa0]*Makabeler|Macc|[\s\xa0]*Makabeler)|I(?:lk[\s\xa0]*Makabeler|\.[\s\xa0]*Makabeler|[\s\xa0]*Makabeler)|İlk[\s\xa0]*Makabeler)|(?:B(?:ir(?:[Iiİ]nc(?:[iİI][\s\xa0]*Makabeler)|[\s\xa0]*Makabeler)|[İI]r(?:(?:[Iİ]nci[\s\xa0]*Makabeler|inc[İiI][\s\xa0]*Makabeler)))|ilk[\s\xa0]*Makabeler))(?:(?=[\d\s\xa0.:,;\x1e\x1f&\(\)（）\[\]\/"'\*=~\-\u2013\u2014])|$)/gi
      }
    ];
    if (include_apocrypha === true && case_sensitive === "none") {
      return books;
    }
    out = [];
    for (k = 0, len = books.length; k < len; k++) {
      book = books[k];
      if (include_apocrypha === false && (book.apocrypha != null) && book.apocrypha === true) {
        continue;
      }
      if (case_sensitive === "books") {
        book.regexp = new RegExp(book.regexp.source, "g");
      }
      out.push(book);
    }
    return out;
  };

  bcv_parser.prototype.regexps.books = bcv_parser.prototype.regexps.get_books(false, "none");
var grammar = (function() {
  "use strict";

  /*
   * Generated by PEG.js 0.9.0.
   *
   * http://pegjs.org/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function peg$SyntaxError(message, expected, found, location) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.location = location;
    this.name     = "SyntaxError";

    if (typeof Error.captureStackTrace === "function") {
      Error.captureStackTrace(this, peg$SyntaxError);
    }
  }

  peg$subclass(peg$SyntaxError, Error);

  function peg$parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},
        parser  = this,

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = function(val_1, val_2) { val_2.unshift([val_1]); return {"type": "sequence", "value": val_2, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c1 = "(",
        peg$c2 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c3 = ")",
        peg$c4 = { type: "literal", value: ")", description: "\")\"" },
        peg$c5 = function(val_1, val_2) { if (typeof(val_2) === "undefined") val_2 = []; val_2.unshift([val_1]); return {"type": "sequence_post_enclosed", "value": val_2, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c6 = function(val_1, val_2) { if (val_1.length && val_1.length === 2) val_1 = val_1[0]; // for `b`, which returns [object, undefined]
              return {"type": "range", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c7 = "\x1F",
        peg$c8 = { type: "literal", value: "\x1F", description: "\"\\x1F\"" },
        peg$c9 = "/",
        peg$c10 = { type: "literal", value: "/", description: "\"/\"" },
        peg$c11 = /^[1-8]/,
        peg$c12 = { type: "class", value: "[1-8]", description: "[1-8]" },
        peg$c13 = function(val) { return {"type": "b", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c14 = function(val_1, val_2) { return {"type": "bc", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c15 = ",",
        peg$c16 = { type: "literal", value: ",", description: "\",\"" },
        peg$c17 = function(val_1, val_2) { return {"type": "bc_title", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c18 = ".",
        peg$c19 = { type: "literal", value: ".", description: "\".\"" },
        peg$c20 = function(val_1, val_2) { return {"type": "bcv", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c21 = "-",
        peg$c22 = { type: "literal", value: "-", description: "\"-\"" },
        peg$c23 = function(val_1, val_2, val_3, val_4) { return {"type": "range", "value": [{"type": "bcv", "value": [{"type": "bc", "value": [val_1, val_2], "indices": [val_1.indices[0], val_2.indices[1]]}, val_3], "indices": [val_1.indices[0], val_3.indices[1]]}, val_4], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c24 = function(val_1, val_2) { return {"type": "bv", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c25 = function(val_1, val_2) { return {"type": "bc", "value": [val_2, val_1], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c26 = function(val_1, val_2, val_3) { return {"type": "cb_range", "value": [val_3, val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c27 = "th",
        peg$c28 = { type: "literal", value: "th", description: "\"th\"" },
        peg$c29 = "nd",
        peg$c30 = { type: "literal", value: "nd", description: "\"nd\"" },
        peg$c31 = "st",
        peg$c32 = { type: "literal", value: "st", description: "\"st\"" },
        peg$c33 = "/1\x1F",
        peg$c34 = { type: "literal", value: "/1\x1F", description: "\"/1\\x1F\"" },
        peg$c35 = function(val) { return {"type": "c_psalm", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c36 = function(val_1, val_2) { return {"type": "cv_psalm", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c37 = function(val_1, val_2) { return {"type": "c_title", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c38 = function(val_1, val_2) { return {"type": "cv", "value": [val_1, val_2], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c39 = function(val) { return {"type": "c", "value": [val], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c40 = "vs",
        peg$c41 = { type: "literal", value: "vs", description: "\"vs\"" },
        peg$c42 = "vd",
        peg$c43 = { type: "literal", value: "vd", description: "\"vd\"" },
        peg$c44 = /^[a-z]/,
        peg$c45 = { type: "class", value: "[a-z]", description: "[a-z]" },
        peg$c46 = function(val_1) { return {"type": "ff", "value": [val_1], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c47 = "ba",
        peg$c48 = { type: "literal", value: "ba", description: "\"ba\"" },
        peg$c49 = /^[\u015Fs]/i,
        peg$c50 = { type: "class", value: "[\u015Fs]i", description: "[\u015Fs]i" },
        peg$c51 = "l",
        peg$c52 = { type: "literal", value: "l", description: "\"l\"" },
        peg$c53 = /^[\u0130Ii\u0131]/i,
        peg$c54 = { type: "class", value: "[\u0130Ii\u0131]i", description: "[\u0130Ii\u0131]i" },
        peg$c55 = "k",
        peg$c56 = { type: "literal", value: "k", description: "\"k\"" },
        peg$c57 = function(val_1) { return {"type": "integer_title", "value": [val_1], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c58 = "/9\x1F",
        peg$c59 = { type: "literal", value: "/9\x1F", description: "\"/9\\x1F\"" },
        peg$c60 = function(val) { return {"type": "context", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c61 = "/2\x1F",
        peg$c62 = { type: "literal", value: "/2\x1F", description: "\"/2\\x1F\"" },
        peg$c63 = ".1",
        peg$c64 = { type: "literal", value: ".1", description: "\".1\"" },
        peg$c65 = /^[0-9]/,
        peg$c66 = { type: "class", value: "[0-9]", description: "[0-9]" },
        peg$c67 = function(val) { return {"type": "bc", "value": [val, {"type": "c", "value": [{"type": "integer", "value": 151, "indices": [peg$currPos - 2, peg$currPos - 1]}], "indices": [peg$currPos - 2, peg$currPos - 1]}], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c68 = function(val_1, val_2) { return {"type": "bcv", "value": [val_1, {"type": "v", "value": [val_2], "indices": [val_2.indices[0], val_2.indices[1]]}], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c69 = /^[b-e]/,
        peg$c70 = { type: "class", value: "[b-e]", description: "[b-e]" },
        peg$c71 = function(val) { return {"type": "v", "value": [val], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c72 = "b",
        peg$c73 = { type: "literal", value: "b", description: "\"b\"" },
        peg$c74 = "aplar",
        peg$c75 = { type: "literal", value: "aplar", description: "\"aplar\"" },
        peg$c76 = "ap",
        peg$c77 = { type: "literal", value: "ap", description: "\"ap\"" },
        peg$c78 = "p",
        peg$c79 = { type: "literal", value: "p", description: "\"p\"" },
        peg$c80 = /^[\xF6o]/i,
        peg$c81 = { type: "class", value: "[\xF6o]i", description: "[\xF6o]i" },
        peg$c82 = /^[\xFCu]/i,
        peg$c83 = { type: "class", value: "[\xFCu]i", description: "[\xFCu]i" },
        peg$c84 = "mler",
        peg$c85 = { type: "literal", value: "mler", description: "\"mler\"" },
        peg$c86 = "m",
        peg$c87 = { type: "literal", value: "m", description: "\"m\"" },
        peg$c88 = function() { return {"type": "c_explicit"} },
        peg$c89 = "a",
        peg$c90 = { type: "literal", value: "a", description: "\"a\"" },
        peg$c91 = "yet",
        peg$c92 = { type: "literal", value: "yet", description: "\"yet\"" },
        peg$c93 = /^[\u0130Ii]/i,
        peg$c94 = { type: "class", value: "[\u0130Ii]i", description: "[\u0130Ii]i" },
        peg$c95 = function() { return {"type": "v_explicit"} },
        peg$c96 = ":",
        peg$c97 = { type: "literal", value: ":", description: "\":\"" },
        peg$c98 = /^["']/,
        peg$c99 = { type: "class", value: "[\"']", description: "[\"']" },
        peg$c100 = /^[,;\/:&\-\u2013\u2014~]/,
        peg$c101 = { type: "class", value: "[,;/:&\\-\\u2013\\u2014~]", description: "[,;/:&\\-\\u2013\\u2014~]" },
        peg$c102 = "ve",
        peg$c103 = { type: "literal", value: "ve", description: "\"ve\"" },
        peg$c104 = function() { return "" },
        peg$c105 = /^[\-\u2013\u2014]/,
        peg$c106 = { type: "class", value: "[\\-\\u2013\\u2014]", description: "[\\-\\u2013\\u2014]" },
        peg$c107 = "le",
        peg$c108 = { type: "literal", value: "le", description: "\"le\"" },
        peg$c109 = function(val) { return {type:"title", value: [val], "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c110 = "from",
        peg$c111 = { type: "literal", value: "from", description: "\"from\"" },
        peg$c112 = "of",
        peg$c113 = { type: "literal", value: "of", description: "\"of\"" },
        peg$c114 = "in",
        peg$c115 = { type: "literal", value: "in", description: "\"in\"" },
        peg$c116 = "the",
        peg$c117 = { type: "literal", value: "the", description: "\"the\"" },
        peg$c118 = "book",
        peg$c119 = { type: "literal", value: "book", description: "\"book\"" },
        peg$c120 = /^[([]/,
        peg$c121 = { type: "class", value: "[\\(\\[]", description: "[\\(\\[]" },
        peg$c122 = /^[)\]]/,
        peg$c123 = { type: "class", value: "[\\)\\]]", description: "[\\)\\]]" },
        peg$c124 = function(val) { return {"type": "translation_sequence", "value": val, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c125 = "\x1E",
        peg$c126 = { type: "literal", value: "\x1E", description: "\"\\x1E\"" },
        peg$c127 = function(val) { return {"type": "translation", "value": val.value, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c128 = ",000",
        peg$c129 = { type: "literal", value: ",000", description: "\",000\"" },
        peg$c130 = function(val) { return {"type": "integer", "value": parseInt(val.join(""), 10), "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c131 = /^[^\x1F\x1E([]/,
        peg$c132 = { type: "class", value: "[^\\x1f\\x1e\\(\\[]", description: "[^\\x1f\\x1e\\(\\[]" },
        peg$c133 = function(val) { return {"type": "word", "value": val.join(""), "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c134 = function(val) { return {"type": "stop", "value": val, "indices": [peg$savedPos, peg$currPos - 1]} },
        peg$c135 = /^[\s\xa0*]/,
        peg$c136 = { type: "class", value: "[\\s\\xa0\\*]", description: "[\\s\\xa0\\*]" },

        peg$currPos          = 0,
        peg$savedPos         = 0,
        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    if ("punctuation_strategy" in options && options.punctuation_strategy === "eu") {
        peg$parsecv_sep = peg$parseeu_cv_sep;
        peg$c100 = /^[;\/:&\-\u2013\u2014~]/;
    }

    function text() {
      return input.substring(peg$savedPos, peg$currPos);
    }

    function location() {
      return peg$computeLocation(peg$savedPos, peg$currPos);
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function error(message) {
      throw peg$buildException(
        message,
        null,
        input.substring(peg$savedPos, peg$currPos),
        peg$computeLocation(peg$savedPos, peg$currPos)
      );
    }

    function peg$computePosDetails(pos) {
      var details = peg$posDetailsCache[pos],
          p, ch;

      if (details) {
        return details;
      } else {
        p = pos - 1;
        while (!peg$posDetailsCache[p]) {
          p--;
        }

        details = peg$posDetailsCache[p];
        details = {
          line:   details.line,
          column: details.column,
          seenCR: details.seenCR
        };

        while (p < pos) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }

          p++;
        }

        peg$posDetailsCache[pos] = details;
        return details;
      }
    }

    function peg$computeLocation(startPos, endPos) {
      var startPosDetails = peg$computePosDetails(startPos),
          endPosDetails   = peg$computePosDetails(endPos);

      return {
        start: {
          offset: startPos,
          line:   startPosDetails.line,
          column: startPosDetails.column
        },
        end: {
          offset: endPos,
          line:   endPosDetails.line,
          column: endPosDetails.column
        }
      };
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, found, location) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0100-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1000-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new peg$SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        location
      );
    }

    function peg$parsestart() {
      var s0, s1;

      s0 = [];
      s1 = peg$parsebcv_hyphen_range();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesequence();
        if (s1 === peg$FAILED) {
          s1 = peg$parsecb_range();
          if (s1 === peg$FAILED) {
            s1 = peg$parserange();
            if (s1 === peg$FAILED) {
              s1 = peg$parseff();
              if (s1 === peg$FAILED) {
                s1 = peg$parsebcv_comma();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsebc_title();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parseps151_bcv();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebcv();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parsebcv_weak();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parseps151_bc();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsebc();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsecv_psalm();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsebv();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsec_psalm();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parseb();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsecbv();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parsecbv_ordinal();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecb();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsecb_ordinal();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parsetranslation_sequence_enclosed();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parsetranslation_sequence();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parsesequence_sep();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parsec_title();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parseinteger_title();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parsecv();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parsecv_weak();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parsev_letter();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parseinteger();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parsec();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parsev();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parseword();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parseword_parenthesis();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parsecontext();
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        while (s1 !== peg$FAILED) {
          s0.push(s1);
          s1 = peg$parsebcv_hyphen_range();
          if (s1 === peg$FAILED) {
            s1 = peg$parsesequence();
            if (s1 === peg$FAILED) {
              s1 = peg$parsecb_range();
              if (s1 === peg$FAILED) {
                s1 = peg$parserange();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseff();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsebcv_comma();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebc_title();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseps151_bcv();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsebcv();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsebcv_weak();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parseps151_bc();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsebc();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsecv_psalm();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parsebv();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsec_psalm();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parseb();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecbv();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsecbv_ordinal();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parsecb();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parsecb_ordinal();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parsetranslation_sequence_enclosed();
                                                  if (s1 === peg$FAILED) {
                                                    s1 = peg$parsetranslation_sequence();
                                                    if (s1 === peg$FAILED) {
                                                      s1 = peg$parsesequence_sep();
                                                      if (s1 === peg$FAILED) {
                                                        s1 = peg$parsec_title();
                                                        if (s1 === peg$FAILED) {
                                                          s1 = peg$parseinteger_title();
                                                          if (s1 === peg$FAILED) {
                                                            s1 = peg$parsecv();
                                                            if (s1 === peg$FAILED) {
                                                              s1 = peg$parsecv_weak();
                                                              if (s1 === peg$FAILED) {
                                                                s1 = peg$parsev_letter();
                                                                if (s1 === peg$FAILED) {
                                                                  s1 = peg$parseinteger();
                                                                  if (s1 === peg$FAILED) {
                                                                    s1 = peg$parsec();
                                                                    if (s1 === peg$FAILED) {
                                                                      s1 = peg$parsev();
                                                                      if (s1 === peg$FAILED) {
                                                                        s1 = peg$parseword();
                                                                        if (s1 === peg$FAILED) {
                                                                          s1 = peg$parseword_parenthesis();
                                                                          if (s1 === peg$FAILED) {
                                                                            s1 = peg$parsecontext();
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      } else {
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesequence() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsecb_range();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebcv_hyphen_range();
        if (s1 === peg$FAILED) {
          s1 = peg$parserange();
          if (s1 === peg$FAILED) {
            s1 = peg$parseff();
            if (s1 === peg$FAILED) {
              s1 = peg$parsebcv_comma();
              if (s1 === peg$FAILED) {
                s1 = peg$parsebc_title();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseps151_bcv();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsebcv();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebcv_weak();
                      if (s1 === peg$FAILED) {
                        s1 = peg$parseps151_bc();
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsebc();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsecv_psalm();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsebv();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsec_psalm();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parseb();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parsecbv();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parsecbv_ordinal();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parsecb();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecb_ordinal();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsecontext();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        s4 = peg$parsesequence_sep();
        if (s4 === peg$FAILED) {
          s4 = null;
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesequence_post();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            s4 = peg$parsesequence_sep();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesequence_post();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c0(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesequence_post_enclosed() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c1;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c2); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesequence_sep();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesequence_post();
            if (s4 !== peg$FAILED) {
              s5 = [];
              s6 = peg$currPos;
              s7 = peg$parsesequence_sep();
              if (s7 === peg$FAILED) {
                s7 = null;
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsesequence_post();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              while (s6 !== peg$FAILED) {
                s5.push(s6);
                s6 = peg$currPos;
                s7 = peg$parsesequence_sep();
                if (s7 === peg$FAILED) {
                  s7 = null;
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesequence_post();
                  if (s8 !== peg$FAILED) {
                    s7 = [s7, s8];
                    s6 = s7;
                  } else {
                    peg$currPos = s6;
                    s6 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parsesp();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c3;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c4); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c5(s4, s5);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsesequence_post() {
      var s0;

      s0 = peg$parsesequence_post_enclosed();
      if (s0 === peg$FAILED) {
        s0 = peg$parsecb_range();
        if (s0 === peg$FAILED) {
          s0 = peg$parsebcv_hyphen_range();
          if (s0 === peg$FAILED) {
            s0 = peg$parserange();
            if (s0 === peg$FAILED) {
              s0 = peg$parseff();
              if (s0 === peg$FAILED) {
                s0 = peg$parsebcv_comma();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsebc_title();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseps151_bcv();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsebcv();
                      if (s0 === peg$FAILED) {
                        s0 = peg$parsebcv_weak();
                        if (s0 === peg$FAILED) {
                          s0 = peg$parseps151_bc();
                          if (s0 === peg$FAILED) {
                            s0 = peg$parsebc();
                            if (s0 === peg$FAILED) {
                              s0 = peg$parsecv_psalm();
                              if (s0 === peg$FAILED) {
                                s0 = peg$parsebv();
                                if (s0 === peg$FAILED) {
                                  s0 = peg$parsec_psalm();
                                  if (s0 === peg$FAILED) {
                                    s0 = peg$parseb();
                                    if (s0 === peg$FAILED) {
                                      s0 = peg$parsecbv();
                                      if (s0 === peg$FAILED) {
                                        s0 = peg$parsecbv_ordinal();
                                        if (s0 === peg$FAILED) {
                                          s0 = peg$parsecb();
                                          if (s0 === peg$FAILED) {
                                            s0 = peg$parsecb_ordinal();
                                            if (s0 === peg$FAILED) {
                                              s0 = peg$parsec_title();
                                              if (s0 === peg$FAILED) {
                                                s0 = peg$parseinteger_title();
                                                if (s0 === peg$FAILED) {
                                                  s0 = peg$parsecv();
                                                  if (s0 === peg$FAILED) {
                                                    s0 = peg$parsecv_weak();
                                                    if (s0 === peg$FAILED) {
                                                      s0 = peg$parsev_letter();
                                                      if (s0 === peg$FAILED) {
                                                        s0 = peg$parseinteger();
                                                        if (s0 === peg$FAILED) {
                                                          s0 = peg$parsec();
                                                          if (s0 === peg$FAILED) {
                                                            s0 = peg$parsev();
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      return s0;
    }

    function peg$parserange() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebcv_comma();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc_title();
        if (s1 === peg$FAILED) {
          s1 = peg$parseps151_bcv();
          if (s1 === peg$FAILED) {
            s1 = peg$parsebcv();
            if (s1 === peg$FAILED) {
              s1 = peg$parsebcv_weak();
              if (s1 === peg$FAILED) {
                s1 = peg$parseps151_bc();
                if (s1 === peg$FAILED) {
                  s1 = peg$parsebc();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsecv_psalm();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsebv();
                      if (s1 === peg$FAILED) {
                        s1 = peg$currPos;
                        s2 = peg$parseb();
                        if (s2 !== peg$FAILED) {
                          s3 = peg$currPos;
                          peg$silentFails++;
                          s4 = peg$currPos;
                          s5 = peg$parserange_sep();
                          if (s5 !== peg$FAILED) {
                            s6 = peg$parsebcv_comma();
                            if (s6 === peg$FAILED) {
                              s6 = peg$parsebc_title();
                              if (s6 === peg$FAILED) {
                                s6 = peg$parseps151_bcv();
                                if (s6 === peg$FAILED) {
                                  s6 = peg$parsebcv();
                                  if (s6 === peg$FAILED) {
                                    s6 = peg$parsebcv_weak();
                                    if (s6 === peg$FAILED) {
                                      s6 = peg$parseps151_bc();
                                      if (s6 === peg$FAILED) {
                                        s6 = peg$parsebc();
                                        if (s6 === peg$FAILED) {
                                          s6 = peg$parsebv();
                                          if (s6 === peg$FAILED) {
                                            s6 = peg$parseb();
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                            if (s6 !== peg$FAILED) {
                              s5 = [s5, s6];
                              s4 = s5;
                            } else {
                              peg$currPos = s4;
                              s4 = peg$FAILED;
                            }
                          } else {
                            peg$currPos = s4;
                            s4 = peg$FAILED;
                          }
                          peg$silentFails--;
                          if (s4 !== peg$FAILED) {
                            peg$currPos = s3;
                            s3 = void 0;
                          } else {
                            s3 = peg$FAILED;
                          }
                          if (s3 !== peg$FAILED) {
                            s2 = [s2, s3];
                            s1 = s2;
                          } else {
                            peg$currPos = s1;
                            s1 = peg$FAILED;
                          }
                        } else {
                          peg$currPos = s1;
                          s1 = peg$FAILED;
                        }
                        if (s1 === peg$FAILED) {
                          s1 = peg$parsecbv();
                          if (s1 === peg$FAILED) {
                            s1 = peg$parsecbv_ordinal();
                            if (s1 === peg$FAILED) {
                              s1 = peg$parsec_psalm();
                              if (s1 === peg$FAILED) {
                                s1 = peg$parsecb();
                                if (s1 === peg$FAILED) {
                                  s1 = peg$parsecb_ordinal();
                                  if (s1 === peg$FAILED) {
                                    s1 = peg$parsec_title();
                                    if (s1 === peg$FAILED) {
                                      s1 = peg$parseinteger_title();
                                      if (s1 === peg$FAILED) {
                                        s1 = peg$parsecv();
                                        if (s1 === peg$FAILED) {
                                          s1 = peg$parsecv_weak();
                                          if (s1 === peg$FAILED) {
                                            s1 = peg$parsev_letter();
                                            if (s1 === peg$FAILED) {
                                              s1 = peg$parseinteger();
                                              if (s1 === peg$FAILED) {
                                                s1 = peg$parsec();
                                                if (s1 === peg$FAILED) {
                                                  s1 = peg$parsev();
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parserange_sep();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseff();
          if (s3 === peg$FAILED) {
            s3 = peg$parsebcv_comma();
            if (s3 === peg$FAILED) {
              s3 = peg$parsebc_title();
              if (s3 === peg$FAILED) {
                s3 = peg$parseps151_bcv();
                if (s3 === peg$FAILED) {
                  s3 = peg$parsebcv();
                  if (s3 === peg$FAILED) {
                    s3 = peg$parsebcv_weak();
                    if (s3 === peg$FAILED) {
                      s3 = peg$parseps151_bc();
                      if (s3 === peg$FAILED) {
                        s3 = peg$parsebc();
                        if (s3 === peg$FAILED) {
                          s3 = peg$parsecv_psalm();
                          if (s3 === peg$FAILED) {
                            s3 = peg$parsebv();
                            if (s3 === peg$FAILED) {
                              s3 = peg$parseb();
                              if (s3 === peg$FAILED) {
                                s3 = peg$parsecbv();
                                if (s3 === peg$FAILED) {
                                  s3 = peg$parsecbv_ordinal();
                                  if (s3 === peg$FAILED) {
                                    s3 = peg$parsec_psalm();
                                    if (s3 === peg$FAILED) {
                                      s3 = peg$parsecb();
                                      if (s3 === peg$FAILED) {
                                        s3 = peg$parsecb_ordinal();
                                        if (s3 === peg$FAILED) {
                                          s3 = peg$parsec_title();
                                          if (s3 === peg$FAILED) {
                                            s3 = peg$parseinteger_title();
                                            if (s3 === peg$FAILED) {
                                              s3 = peg$parsecv();
                                              if (s3 === peg$FAILED) {
                                                s3 = peg$parsev_letter();
                                                if (s3 === peg$FAILED) {
                                                  s3 = peg$parseinteger();
                                                  if (s3 === peg$FAILED) {
                                                    s3 = peg$parsecv_weak();
                                                    if (s3 === peg$FAILED) {
                                                      s3 = peg$parsec();
                                                      if (s3 === peg$FAILED) {
                                                        s3 = peg$parsev();
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c6(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseb() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 47) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c10); }
          }
          if (s4 !== peg$FAILED) {
            if (peg$c11.test(input.charAt(peg$currPos))) {
              s5 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c12); }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 31) {
              s4 = peg$c7;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c8); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c13(s2);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebc() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        s3 = peg$parsev_explicit();
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$currPos;
          s6 = peg$parsec();
          if (s6 !== peg$FAILED) {
            s7 = peg$parsecv_sep();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsev();
              if (s8 !== peg$FAILED) {
                s6 = [s6, s7, s8];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          peg$silentFails--;
          if (s5 !== peg$FAILED) {
            peg$currPos = s4;
            s4 = void 0;
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = [];
          s3 = peg$parsecv_sep();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsecv_sep();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = [];
            s3 = peg$parsecv_sep_weak();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parsecv_sep_weak();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = [];
              s3 = peg$parserange_sep();
              if (s3 !== peg$FAILED) {
                while (s3 !== peg$FAILED) {
                  s2.push(s3);
                  s3 = peg$parserange_sep();
                }
              } else {
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsesp();
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsec();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c14(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebc_comma() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c15;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesp();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsec();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c14(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebc_title() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsetitle();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c17(s1, s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        peg$silentFails++;
        s3 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c18;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsev_explicit();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsev();
            if (s6 !== peg$FAILED) {
              s4 = [s4, s5, s6];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsesequence_sep();
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsev_explicit();
            if (s5 !== peg$FAILED) {
              s6 = peg$parsecv();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        peg$silentFails--;
        if (s3 === peg$FAILED) {
          s2 = void 0;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsecv_sep();
          if (s4 === peg$FAILED) {
            s4 = peg$parsesequence_sep();
          }
          if (s4 === peg$FAILED) {
            s4 = null;
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsev_explicit();
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 === peg$FAILED) {
            s3 = peg$parsecv_sep();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev_letter();
            if (s4 === peg$FAILED) {
              s4 = peg$parsev();
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv_weak() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebc();
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecv_sep_weak();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_letter();
          if (s3 === peg$FAILED) {
            s3 = peg$parsev();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            s6 = peg$parsecv_sep();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsev();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv_comma() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsebc_comma();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s3 = peg$c15;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c16); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesp();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsev_letter();
              if (s5 === peg$FAILED) {
                s5 = peg$parsev();
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                s7 = peg$currPos;
                s8 = peg$parsecv_sep();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsev();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c20(s1, s5);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebcv_hyphen_range() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 45) {
          s2 = peg$c21;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c22); }
        }
        if (s2 === peg$FAILED) {
          s2 = peg$parsespace();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsec();
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 45) {
              s4 = peg$c21;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c22); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsev();
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 45) {
                  s6 = peg$c21;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c22); }
                }
                if (s6 !== peg$FAILED) {
                  s7 = peg$parsev();
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c23(s1, s3, s5, s7);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsebv() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parseb();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parsecv_sep();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parsecv_sep();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = [];
          s3 = peg$parsecv_sep_weak();
          if (s3 !== peg$FAILED) {
            while (s3 !== peg$FAILED) {
              s2.push(s3);
              s3 = peg$parsecv_sep_weak();
            }
          } else {
            s2 = peg$FAILED;
          }
          if (s2 === peg$FAILED) {
            s2 = [];
            s3 = peg$parserange_sep();
            if (s3 !== peg$FAILED) {
              while (s3 !== peg$FAILED) {
                s2.push(s3);
                s3 = peg$parserange_sep();
              }
            } else {
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              s2 = peg$currPos;
              s3 = [];
              s4 = peg$parsesequence_sep();
              if (s4 !== peg$FAILED) {
                while (s4 !== peg$FAILED) {
                  s3.push(s4);
                  s4 = peg$parsesequence_sep();
                }
              } else {
                s3 = peg$FAILED;
              }
              if (s3 !== peg$FAILED) {
                s4 = peg$currPos;
                peg$silentFails++;
                s5 = peg$parsev_explicit();
                peg$silentFails--;
                if (s5 !== peg$FAILED) {
                  peg$currPos = s4;
                  s4 = void 0;
                } else {
                  s4 = peg$FAILED;
                }
                if (s4 !== peg$FAILED) {
                  s3 = [s3, s4];
                  s2 = s3;
                } else {
                  peg$currPos = s2;
                  s2 = peg$FAILED;
                }
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsesp();
              }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_letter();
          if (s3 === peg$FAILED) {
            s3 = peg$parsev();
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c24(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecb() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsein_book_of();
          if (s3 === peg$FAILED) {
            s3 = null;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseb();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c25(s2, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecb_range() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$parserange_sep();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsec();
            if (s4 !== peg$FAILED) {
              s5 = peg$parsein_book_of();
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseb();
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c26(s2, s4, s6);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecbv() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsecb();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesequence_sep();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecb_ordinal() {
      var s0, s1, s2, s3, s4, s5;

      s0 = peg$currPos;
      s1 = peg$parsec();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c27) {
          s2 = peg$c27;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c28); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c29) {
            s2 = peg$c29;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c30); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c31) {
              s2 = peg$c31;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c32); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsec_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsein_book_of();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseb();
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c25(s1, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecbv_ordinal() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsecb_ordinal();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesequence_sep();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c20(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec_psalm() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c33) {
            s3 = peg$c33;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c34); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c35(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_psalm() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parsec_psalm();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesequence_sep();
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_explicit();
          if (s3 !== peg$FAILED) {
            s4 = peg$parsev();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c36(s1, s4);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec_title() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsetitle();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c37(s2, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsev_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsec();
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s5 = peg$c18;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsev_explicit();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsev();
              if (s7 !== peg$FAILED) {
                s5 = [s5, s6, s7];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsecv_sep();
            if (s5 === peg$FAILED) {
              s5 = null;
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsev_explicit();
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = peg$parsecv_sep();
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsev_letter();
              if (s5 === peg$FAILED) {
                s5 = peg$parsev();
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c38(s2, s5);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_weak() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsec();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecv_sep_weak();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsev_letter();
          if (s3 === peg$FAILED) {
            s3 = peg$parsev();
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            s6 = peg$parsecv_sep();
            if (s6 !== peg$FAILED) {
              s7 = peg$parsev();
              if (s7 !== peg$FAILED) {
                s6 = [s6, s7];
                s5 = s6;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c38(s1, s3);
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsec_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c39(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseff() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsebcv();
      if (s1 === peg$FAILED) {
        s1 = peg$parsebcv_weak();
        if (s1 === peg$FAILED) {
          s1 = peg$parsebc();
          if (s1 === peg$FAILED) {
            s1 = peg$parsebv();
            if (s1 === peg$FAILED) {
              s1 = peg$parsecv();
              if (s1 === peg$FAILED) {
                s1 = peg$parsecv_weak();
                if (s1 === peg$FAILED) {
                  s1 = peg$parseinteger();
                  if (s1 === peg$FAILED) {
                    s1 = peg$parsec();
                    if (s1 === peg$FAILED) {
                      s1 = peg$parsev();
                    }
                  }
                }
              }
            }
          }
        }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesp();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c40) {
            s3 = peg$c40;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c41); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c42) {
              s3 = peg$c42;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c43); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseabbrev();
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              peg$silentFails++;
              if (peg$c44.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c45); }
              }
              peg$silentFails--;
              if (s6 === peg$FAILED) {
                s5 = void 0;
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$c46(s1);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinteger_title() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parseinteger();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsecv_sep();
        if (s2 === peg$FAILED) {
          s2 = peg$parsesequence_sep();
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s3 = peg$c47;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c48); }
          }
          if (s3 !== peg$FAILED) {
            if (peg$c49.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c50); }
            }
            if (s4 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 108) {
                s5 = peg$c51;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c52); }
              }
              if (s5 !== peg$FAILED) {
                if (peg$c53.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c54); }
                }
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 107) {
                    s7 = peg$c55;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c56); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$c57(s1);
                    s0 = s1;
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecontext() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c58) {
            s3 = peg$c58;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c59); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c60(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseps151_b() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 31) {
        s1 = peg$c7;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c8); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c61) {
            s3 = peg$c61;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c62); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c13(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseps151_bc() {
      var s0, s1, s2, s3, s4;

      s0 = peg$currPos;
      s1 = peg$parseps151_b();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c63) {
          s2 = peg$c63;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c64); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c67(s1);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseps151_bcv() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parseps151_bc();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseinteger();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c68(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsev_letter() {
      var s0, s1, s2, s3, s4, s5, s6, s7;

      s0 = peg$currPos;
      s1 = peg$parsev_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            if (input.substr(peg$currPos, 2) === peg$c40) {
              s5 = peg$c40;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c41); }
            }
            if (s5 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c42) {
                s5 = peg$c42;
                peg$currPos += 2;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c43); }
              }
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              if (peg$c69.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c70); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$currPos;
                peg$silentFails++;
                if (peg$c44.test(input.charAt(peg$currPos))) {
                  s7 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c45); }
                }
                peg$silentFails--;
                if (s7 === peg$FAILED) {
                  s6 = void 0;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c71(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsev() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = peg$parsev_explicit();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseinteger();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$c71(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsec_explicit() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 98) {
          s3 = peg$c72;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c73); }
        }
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 5) === peg$c74) {
            s4 = peg$c74;
            peg$currPos += 5;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c75); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c76) {
              s4 = peg$c76;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c77); }
            }
            if (s4 === peg$FAILED) {
              s4 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 112) {
                s5 = peg$c78;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c79); }
              }
              if (s5 !== peg$FAILED) {
                s6 = peg$parseabbrev();
                if (s6 === peg$FAILED) {
                  s6 = null;
                }
                if (s6 !== peg$FAILED) {
                  s5 = [s5, s6];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 === peg$FAILED) {
                s4 = peg$currPos;
                if (peg$c80.test(input.charAt(peg$currPos))) {
                  s5 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c81); }
                }
                if (s5 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 108) {
                    s6 = peg$c51;
                    peg$currPos++;
                  } else {
                    s6 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c52); }
                  }
                  if (s6 !== peg$FAILED) {
                    if (peg$c82.test(input.charAt(peg$currPos))) {
                      s7 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s7 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c83); }
                    }
                    if (s7 !== peg$FAILED) {
                      if (input.substr(peg$currPos, 4) === peg$c84) {
                        s8 = peg$c84;
                        peg$currPos += 4;
                      } else {
                        s8 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c85); }
                      }
                      if (s8 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
                if (s4 === peg$FAILED) {
                  s4 = peg$currPos;
                  if (peg$c80.test(input.charAt(peg$currPos))) {
                    s5 = input.charAt(peg$currPos);
                    peg$currPos++;
                  } else {
                    s5 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c81); }
                  }
                  if (s5 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 108) {
                      s6 = peg$c51;
                      peg$currPos++;
                    } else {
                      s6 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c52); }
                    }
                    if (s6 !== peg$FAILED) {
                      if (peg$c82.test(input.charAt(peg$currPos))) {
                        s7 = input.charAt(peg$currPos);
                        peg$currPos++;
                      } else {
                        s7 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$c83); }
                      }
                      if (s7 !== peg$FAILED) {
                        if (input.charCodeAt(peg$currPos) === 109) {
                          s8 = peg$c86;
                          peg$currPos++;
                        } else {
                          s8 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$c87); }
                        }
                        if (s8 !== peg$FAILED) {
                          s5 = [s5, s6, s7, s8];
                          s4 = s5;
                        } else {
                          peg$currPos = s4;
                          s4 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                  if (s4 === peg$FAILED) {
                    s4 = peg$currPos;
                    if (peg$c80.test(input.charAt(peg$currPos))) {
                      s5 = input.charAt(peg$currPos);
                      peg$currPos++;
                    } else {
                      s5 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c81); }
                    }
                    if (s5 !== peg$FAILED) {
                      s6 = peg$parseabbrev();
                      if (s6 === peg$FAILED) {
                        s6 = null;
                      }
                      if (s6 !== peg$FAILED) {
                        s5 = [s5, s6];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  }
                }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c88();
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsev_explicit() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 97) {
          s3 = peg$c89;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c90); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseabbrev();
          if (s4 === peg$FAILED) {
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c91) {
              s5 = peg$c91;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c92); }
            }
            if (s5 !== peg$FAILED) {
              if (peg$c93.test(input.charAt(peg$currPos))) {
                s6 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c91) {
                s4 = peg$c91;
                peg$currPos += 3;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c92); }
              }
            }
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          if (peg$c44.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c45); }
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parsesp();
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$c95();
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_sep() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c96;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c97); }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            if (input.charCodeAt(peg$currPos) === 58) {
              s3 = peg$c96;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c97); }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 46) {
            s3 = peg$c18;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c19); }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            peg$silentFails++;
            s5 = peg$currPos;
            s6 = peg$parsesp();
            if (s6 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 46) {
                s7 = peg$c18;
                peg$currPos++;
              } else {
                s7 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c19); }
              }
              if (s7 !== peg$FAILED) {
                s8 = peg$parsesp();
                if (s8 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 46) {
                    s9 = peg$c18;
                    peg$currPos++;
                  } else {
                    s9 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$c19); }
                  }
                  if (s9 !== peg$FAILED) {
                    s6 = [s6, s7, s8, s9];
                    s5 = s6;
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
            peg$silentFails--;
            if (s5 === peg$FAILED) {
              s4 = void 0;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s3 = [s3, s4];
              s2 = s3;
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsecv_sep_weak() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (peg$c98.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c99); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsespace();
      }

      return s0;
    }

    function peg$parsesequence_sep() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c100.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c101); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c18;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$currPos;
          peg$silentFails++;
          s5 = peg$currPos;
          s6 = peg$parsesp();
          if (s6 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s7 = peg$c18;
              peg$currPos++;
            } else {
              s7 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s7 !== peg$FAILED) {
              s8 = peg$parsesp();
              if (s8 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s9 = peg$c18;
                  peg$currPos++;
                } else {
                  s9 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s9 !== peg$FAILED) {
                  s6 = [s6, s7, s8, s9];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          peg$silentFails--;
          if (s5 === peg$FAILED) {
            s4 = void 0;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c102) {
            s2 = peg$c102;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c103); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$parsespace();
          }
        }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c100.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c101); }
          }
          if (s2 === peg$FAILED) {
            s2 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 46) {
              s3 = peg$c18;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s3 !== peg$FAILED) {
              s4 = peg$currPos;
              peg$silentFails++;
              s5 = peg$currPos;
              s6 = peg$parsesp();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s7 = peg$c18;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesp();
                  if (s8 !== peg$FAILED) {
                    if (input.charCodeAt(peg$currPos) === 46) {
                      s9 = peg$c18;
                      peg$currPos++;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c19); }
                    }
                    if (s9 !== peg$FAILED) {
                      s6 = [s6, s7, s8, s9];
                      s5 = s6;
                    } else {
                      peg$currPos = s5;
                      s5 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s5;
                    s5 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              peg$silentFails--;
              if (s5 === peg$FAILED) {
                s4 = void 0;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
              if (s4 !== peg$FAILED) {
                s3 = [s3, s4];
                s2 = s3;
              } else {
                peg$currPos = s2;
                s2 = peg$FAILED;
              }
            } else {
              peg$currPos = s2;
              s2 = peg$FAILED;
            }
            if (s2 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c102) {
                s2 = peg$c102;
                peg$currPos += 2;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c103); }
              }
              if (s2 === peg$FAILED) {
                s2 = peg$parsespace();
              }
            }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c104();
      }
      s0 = s1;

      return s0;
    }

    function peg$parserange_sep() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$currPos;
        if (peg$c105.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c106); }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parsesp();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
        if (s3 === peg$FAILED) {
          s3 = peg$currPos;
          if (peg$c93.test(input.charAt(peg$currPos))) {
            s4 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c94); }
          }
          if (s4 !== peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c107) {
              s5 = peg$c107;
              peg$currPos += 2;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c108); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesp();
              if (s6 !== peg$FAILED) {
                s4 = [s4, s5, s6];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        }
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$currPos;
            if (peg$c105.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c106); }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesp();
              if (s5 !== peg$FAILED) {
                s4 = [s4, s5];
                s3 = s4;
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
            if (s3 === peg$FAILED) {
              s3 = peg$currPos;
              if (peg$c93.test(input.charAt(peg$currPos))) {
                s4 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c94); }
              }
              if (s4 !== peg$FAILED) {
                if (input.substr(peg$currPos, 2) === peg$c107) {
                  s5 = peg$c107;
                  peg$currPos += 2;
                } else {
                  s5 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c108); }
                }
                if (s5 !== peg$FAILED) {
                  s6 = peg$parsesp();
                  if (s6 !== peg$FAILED) {
                    s4 = [s4, s5, s6];
                    s3 = s4;
                  } else {
                    peg$currPos = s3;
                    s3 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s3;
                  s3 = peg$FAILED;
                }
              } else {
                peg$currPos = s3;
                s3 = peg$FAILED;
              }
            }
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          s1 = [s1, s2];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetitle() {
      var s0, s1, s2, s3, s4, s5, s6;

      s0 = peg$currPos;
      s1 = peg$parsecv_sep();
      if (s1 === peg$FAILED) {
        s1 = peg$parsesequence_sep();
      }
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c47) {
          s2 = peg$c47;
          peg$currPos += 2;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c48); }
        }
        if (s2 !== peg$FAILED) {
          if (peg$c49.test(input.charAt(peg$currPos))) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c50); }
          }
          if (s3 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 108) {
              s4 = peg$c51;
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c52); }
            }
            if (s4 !== peg$FAILED) {
              if (peg$c53.test(input.charAt(peg$currPos))) {
                s5 = input.charAt(peg$currPos);
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c54); }
              }
              if (s5 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 107) {
                  s6 = peg$c55;
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c56); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c109(s2);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsein_book_of() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c110) {
          s2 = peg$c110;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c111); }
        }
        if (s2 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c112) {
            s2 = peg$c112;
            peg$currPos += 2;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c113); }
          }
          if (s2 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c114) {
              s2 = peg$c114;
              peg$currPos += 2;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c115); }
            }
          }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            if (input.substr(peg$currPos, 3) === peg$c116) {
              s5 = peg$c116;
              peg$currPos += 3;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c117); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parsesp();
              if (s6 !== peg$FAILED) {
                if (input.substr(peg$currPos, 4) === peg$c118) {
                  s7 = peg$c118;
                  peg$currPos += 4;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c119); }
                }
                if (s7 !== peg$FAILED) {
                  s8 = peg$parsesp();
                  if (s8 !== peg$FAILED) {
                    if (input.substr(peg$currPos, 2) === peg$c112) {
                      s9 = peg$c112;
                      peg$currPos += 2;
                    } else {
                      s9 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$c113); }
                    }
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parsesp();
                      if (s10 !== peg$FAILED) {
                        s5 = [s5, s6, s7, s8, s9, s10];
                        s4 = s5;
                      } else {
                        peg$currPos = s4;
                        s4 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s4;
                      s4 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s4;
                    s4 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 === peg$FAILED) {
              s4 = null;
            }
            if (s4 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseabbrev() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s2 = peg$c18;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          peg$silentFails++;
          s4 = peg$currPos;
          s5 = peg$parsesp();
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 46) {
              s6 = peg$c18;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$c19); }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsesp();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 46) {
                  s8 = peg$c18;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c19); }
                }
                if (s8 !== peg$FAILED) {
                  s5 = [s5, s6, s7, s8];
                  s4 = s5;
                } else {
                  peg$currPos = s4;
                  s4 = peg$FAILED;
                }
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
          peg$silentFails--;
          if (s4 === peg$FAILED) {
            s3 = void 0;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseeu_cv_sep() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 44) {
          s2 = peg$c15;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s1 = [s1, s2, s3];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslation_sequence_enclosed() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        if (peg$c120.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c121); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsesp();
          if (s3 !== peg$FAILED) {
            s4 = peg$currPos;
            s5 = peg$parsetranslation();
            if (s5 !== peg$FAILED) {
              s6 = [];
              s7 = peg$currPos;
              s8 = peg$parsesequence_sep();
              if (s8 !== peg$FAILED) {
                s9 = peg$parsetranslation();
                if (s9 !== peg$FAILED) {
                  s8 = [s8, s9];
                  s7 = s8;
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              } else {
                peg$currPos = s7;
                s7 = peg$FAILED;
              }
              while (s7 !== peg$FAILED) {
                s6.push(s7);
                s7 = peg$currPos;
                s8 = peg$parsesequence_sep();
                if (s8 !== peg$FAILED) {
                  s9 = peg$parsetranslation();
                  if (s9 !== peg$FAILED) {
                    s8 = [s8, s9];
                    s7 = s8;
                  } else {
                    peg$currPos = s7;
                    s7 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s7;
                  s7 = peg$FAILED;
                }
              }
              if (s6 !== peg$FAILED) {
                s5 = [s5, s6];
                s4 = s5;
              } else {
                peg$currPos = s4;
                s4 = peg$FAILED;
              }
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parsesp();
              if (s5 !== peg$FAILED) {
                if (peg$c122.test(input.charAt(peg$currPos))) {
                  s6 = input.charAt(peg$currPos);
                  peg$currPos++;
                } else {
                  s6 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$c123); }
                }
                if (s6 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$c124(s4);
                  s0 = s1;
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslation_sequence() {
      var s0, s1, s2, s3, s4, s5, s6, s7, s8;

      s0 = peg$currPos;
      s1 = peg$parsesp();
      if (s1 !== peg$FAILED) {
        s2 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c15;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c16); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parsesp();
          if (s4 !== peg$FAILED) {
            s3 = [s3, s4];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$currPos;
          s4 = peg$parsetranslation();
          if (s4 !== peg$FAILED) {
            s5 = [];
            s6 = peg$currPos;
            s7 = peg$parsesequence_sep();
            if (s7 !== peg$FAILED) {
              s8 = peg$parsetranslation();
              if (s8 !== peg$FAILED) {
                s7 = [s7, s8];
                s6 = s7;
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$currPos;
              s7 = peg$parsesequence_sep();
              if (s7 !== peg$FAILED) {
                s8 = peg$parsetranslation();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
            }
            if (s5 !== peg$FAILED) {
              s4 = [s4, s5];
              s3 = s4;
            } else {
              peg$currPos = s3;
              s3 = peg$FAILED;
            }
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c124(s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parsetranslation() {
      var s0, s1, s2, s3;

      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 30) {
        s1 = peg$c125;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c126); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseany_integer();
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 30) {
            s3 = peg$c125;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c126); }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$c127(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }

      return s0;
    }

    function peg$parseinteger() {
      var res;
      if (res = /^[0-9]{1,3}(?!\d|,000)/.exec(input.substr(peg$currPos))) {
      	peg$savedPos = peg$currPos;
        peg$currPos += res[0].length;
        return {"type": "integer", "value": parseInt(res[0], 10), "indices": [peg$savedPos, peg$currPos - 1]}
      } else {
        return peg$FAILED;
      }
    }

    function peg$parseany_integer() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c65.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c66); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c65.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c66); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c130(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseword() {
      var s0, s1, s2;

      s0 = peg$currPos;
      s1 = [];
      if (peg$c131.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c132); }
      }
      if (s2 !== peg$FAILED) {
        while (s2 !== peg$FAILED) {
          s1.push(s2);
          if (peg$c131.test(input.charAt(peg$currPos))) {
            s2 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c132); }
          }
        }
      } else {
        s1 = peg$FAILED;
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c133(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parseword_parenthesis() {
      var s0, s1;

      s0 = peg$currPos;
      if (peg$c120.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c121); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$c134(s1);
      }
      s0 = s1;

      return s0;
    }

    function peg$parsesp() {
      var s0;

      s0 = peg$parsespace();
      if (s0 === peg$FAILED) {
        s0 = null;
      }

      return s0;
    }

    function peg$parsespace() {
      var res;
      if (res = /^[\s\xa0*]+/.exec(input.substr(peg$currPos))) {
        peg$currPos += res[0].length;
        return [];
      }
      return peg$FAILED;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(
        null,
        peg$maxFailExpected,
        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
        peg$maxFailPos < input.length
          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
      );
    }
  }

  return {
    SyntaxError: peg$SyntaxError,
    parse:       peg$parse
  };
})();


}).call(this);
